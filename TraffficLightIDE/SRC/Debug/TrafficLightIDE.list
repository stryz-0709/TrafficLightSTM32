
TrafficLightIDE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002af4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002c00  08002c00  00012c00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002c24  08002c24  000200e0  2**0
                  CONTENTS
  4 .ARM          00000000  08002c24  08002c24  000200e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002c24  08002c24  000200e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002c24  08002c24  00012c24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002c28  08002c28  00012c28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000e0  20000000  08002c2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ac  200000e0  08002d0c  000200e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000018c  08002d0c  0002018c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200e0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020109  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008619  00000000  00000000  0002014c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001b79  00000000  00000000  00028765  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a68  00000000  00000000  0002a2e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000007dd  00000000  00000000  0002ad48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000170f4  00000000  00000000  0002b525  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000bd6c  00000000  00000000  00042619  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000846ed  00000000  00000000  0004e385  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002918  00000000  00000000  000d2a74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  000d538c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000e0 	.word	0x200000e0
 8000128:	00000000 	.word	0x00000000
 800012c:	08002be8 	.word	0x08002be8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000e4 	.word	0x200000e4
 8000148:	08002be8 	.word	0x08002be8

0800014c <isButtonPressed>:
int KeyReg1 [4] = {NORMAL_STATE, NORMAL_STATE, NORMAL_STATE, NORMAL_STATE};
int KeyReg2 [4] = {NORMAL_STATE, NORMAL_STATE, NORMAL_STATE, NORMAL_STATE};
int KeyReg3 [4] = {NORMAL_STATE, NORMAL_STATE, NORMAL_STATE, NORMAL_STATE};
int TimerForKeyPress [4] = {500, 500, 500, 500};

int isButtonPressed(int btn){
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	if (btn_flag[btn] == 1){
 8000154:	4a09      	ldr	r2, [pc, #36]	; (800017c <isButtonPressed+0x30>)
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800015c:	2b01      	cmp	r3, #1
 800015e:	d106      	bne.n	800016e <isButtonPressed+0x22>
		btn_flag[btn] = 0;
 8000160:	4a06      	ldr	r2, [pc, #24]	; (800017c <isButtonPressed+0x30>)
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	2100      	movs	r1, #0
 8000166:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 800016a:	2301      	movs	r3, #1
 800016c:	e000      	b.n	8000170 <isButtonPressed+0x24>
	}
	return 0;
 800016e:	2300      	movs	r3, #0
}
 8000170:	4618      	mov	r0, r3
 8000172:	370c      	adds	r7, #12
 8000174:	46bd      	mov	sp, r7
 8000176:	bc80      	pop	{r7}
 8000178:	4770      	bx	lr
 800017a:	bf00      	nop
 800017c:	200000fc 	.word	0x200000fc

08000180 <subKeyProcess>:

void subKeyProcess(int btn){
 8000180:	b480      	push	{r7}
 8000182:	b083      	sub	sp, #12
 8000184:	af00      	add	r7, sp, #0
 8000186:	6078      	str	r0, [r7, #4]
	btn_flag[btn] = 1;
 8000188:	4a04      	ldr	r2, [pc, #16]	; (800019c <subKeyProcess+0x1c>)
 800018a:	687b      	ldr	r3, [r7, #4]
 800018c:	2101      	movs	r1, #1
 800018e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000192:	bf00      	nop
 8000194:	370c      	adds	r7, #12
 8000196:	46bd      	mov	sp, r7
 8000198:	bc80      	pop	{r7}
 800019a:	4770      	bx	lr
 800019c:	200000fc 	.word	0x200000fc

080001a0 <getKeyInput>:


void getKeyInput(int btn){
 80001a0:	b580      	push	{r7, lr}
 80001a2:	b082      	sub	sp, #8
 80001a4:	af00      	add	r7, sp, #0
 80001a6:	6078      	str	r0, [r7, #4]
	KeyReg0[btn] = KeyReg1[btn];
 80001a8:	4a37      	ldr	r2, [pc, #220]	; (8000288 <getKeyInput+0xe8>)
 80001aa:	687b      	ldr	r3, [r7, #4]
 80001ac:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001b0:	4936      	ldr	r1, [pc, #216]	; (800028c <getKeyInput+0xec>)
 80001b2:	687b      	ldr	r3, [r7, #4]
 80001b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	KeyReg1[btn] = KeyReg2[btn];
 80001b8:	4a35      	ldr	r2, [pc, #212]	; (8000290 <getKeyInput+0xf0>)
 80001ba:	687b      	ldr	r3, [r7, #4]
 80001bc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001c0:	4931      	ldr	r1, [pc, #196]	; (8000288 <getKeyInput+0xe8>)
 80001c2:	687b      	ldr	r3, [r7, #4]
 80001c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	KeyReg2[btn] = HAL_GPIO_ReadPin(BTN_PORT[btn], BTN_PIN[btn]);
 80001c8:	4a32      	ldr	r2, [pc, #200]	; (8000294 <getKeyInput+0xf4>)
 80001ca:	687b      	ldr	r3, [r7, #4]
 80001cc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001d0:	4931      	ldr	r1, [pc, #196]	; (8000298 <getKeyInput+0xf8>)
 80001d2:	687b      	ldr	r3, [r7, #4]
 80001d4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80001d8:	4619      	mov	r1, r3
 80001da:	4610      	mov	r0, r2
 80001dc:	f001 fcb4 	bl	8001b48 <HAL_GPIO_ReadPin>
 80001e0:	4603      	mov	r3, r0
 80001e2:	4619      	mov	r1, r3
 80001e4:	4a2a      	ldr	r2, [pc, #168]	; (8000290 <getKeyInput+0xf0>)
 80001e6:	687b      	ldr	r3, [r7, #4]
 80001e8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	if ((KeyReg0[btn] == KeyReg1[btn]) && (KeyReg1[btn] == KeyReg2[btn])){
 80001ec:	4a27      	ldr	r2, [pc, #156]	; (800028c <getKeyInput+0xec>)
 80001ee:	687b      	ldr	r3, [r7, #4]
 80001f0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001f4:	4924      	ldr	r1, [pc, #144]	; (8000288 <getKeyInput+0xe8>)
 80001f6:	687b      	ldr	r3, [r7, #4]
 80001f8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80001fc:	429a      	cmp	r2, r3
 80001fe:	d13f      	bne.n	8000280 <getKeyInput+0xe0>
 8000200:	4a21      	ldr	r2, [pc, #132]	; (8000288 <getKeyInput+0xe8>)
 8000202:	687b      	ldr	r3, [r7, #4]
 8000204:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000208:	4921      	ldr	r1, [pc, #132]	; (8000290 <getKeyInput+0xf0>)
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000210:	429a      	cmp	r2, r3
 8000212:	d135      	bne.n	8000280 <getKeyInput+0xe0>
		if (KeyReg3[btn] != KeyReg2[btn]){
 8000214:	4a21      	ldr	r2, [pc, #132]	; (800029c <getKeyInput+0xfc>)
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800021c:	491c      	ldr	r1, [pc, #112]	; (8000290 <getKeyInput+0xf0>)
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000224:	429a      	cmp	r2, r3
 8000226:	d017      	beq.n	8000258 <getKeyInput+0xb8>
			KeyReg3[btn] = KeyReg2[btn];
 8000228:	4a19      	ldr	r2, [pc, #100]	; (8000290 <getKeyInput+0xf0>)
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000230:	491a      	ldr	r1, [pc, #104]	; (800029c <getKeyInput+0xfc>)
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if (KeyReg2[btn] == PRESSED_STATE){
 8000238:	4a15      	ldr	r2, [pc, #84]	; (8000290 <getKeyInput+0xf0>)
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000240:	2b00      	cmp	r3, #0
 8000242:	d11d      	bne.n	8000280 <getKeyInput+0xe0>
				subKeyProcess(btn);
 8000244:	6878      	ldr	r0, [r7, #4]
 8000246:	f7ff ff9b 	bl	8000180 <subKeyProcess>
				TimerForKeyPress[btn] = 500;
 800024a:	4a15      	ldr	r2, [pc, #84]	; (80002a0 <getKeyInput+0x100>)
 800024c:	687b      	ldr	r3, [r7, #4]
 800024e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000252:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			if (TimerForKeyPress[btn] <= 0){
				KeyReg3[btn] = NORMAL_STATE;
			}
		}
	}
}
 8000256:	e013      	b.n	8000280 <getKeyInput+0xe0>
			TimerForKeyPress[btn]--;
 8000258:	4a11      	ldr	r2, [pc, #68]	; (80002a0 <getKeyInput+0x100>)
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000260:	1e5a      	subs	r2, r3, #1
 8000262:	490f      	ldr	r1, [pc, #60]	; (80002a0 <getKeyInput+0x100>)
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if (TimerForKeyPress[btn] <= 0){
 800026a:	4a0d      	ldr	r2, [pc, #52]	; (80002a0 <getKeyInput+0x100>)
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000272:	2b00      	cmp	r3, #0
 8000274:	dc04      	bgt.n	8000280 <getKeyInput+0xe0>
				KeyReg3[btn] = NORMAL_STATE;
 8000276:	4a09      	ldr	r2, [pc, #36]	; (800029c <getKeyInput+0xfc>)
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	2101      	movs	r1, #1
 800027c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000280:	bf00      	nop
 8000282:	3708      	adds	r7, #8
 8000284:	46bd      	mov	sp, r7
 8000286:	bd80      	pop	{r7, pc}
 8000288:	20000028 	.word	0x20000028
 800028c:	20000018 	.word	0x20000018
 8000290:	20000038 	.word	0x20000038
 8000294:	20000000 	.word	0x20000000
 8000298:	20000010 	.word	0x20000010
 800029c:	20000048 	.word	0x20000048
 80002a0:	20000058 	.word	0x20000058

080002a4 <initDuration>:
#include "fsm_auto.h"

int initMode[2] = {RED, GREEN};


int initDuration(int lane){
 80002a4:	b480      	push	{r7}
 80002a6:	b083      	sub	sp, #12
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	6078      	str	r0, [r7, #4]
	return (lane == 1)? GREEN_DURATION : RED_DURATION;
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	2b01      	cmp	r3, #1
 80002b0:	d102      	bne.n	80002b8 <initDuration+0x14>
 80002b2:	4b05      	ldr	r3, [pc, #20]	; (80002c8 <initDuration+0x24>)
 80002b4:	681b      	ldr	r3, [r3, #0]
 80002b6:	e001      	b.n	80002bc <initDuration+0x18>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <initDuration+0x28>)
 80002ba:	681b      	ldr	r3, [r3, #0]
}
 80002bc:	4618      	mov	r0, r3
 80002be:	370c      	adds	r7, #12
 80002c0:	46bd      	mov	sp, r7
 80002c2:	bc80      	pop	{r7}
 80002c4:	4770      	bx	lr
 80002c6:	bf00      	nop
 80002c8:	200000ac 	.word	0x200000ac
 80002cc:	200000a4 	.word	0x200000a4

080002d0 <fsm_auto_run>:

void fsm_auto_run(int lane){
 80002d0:	b580      	push	{r7, lr}
 80002d2:	b082      	sub	sp, #8
 80002d4:	af00      	add	r7, sp, #0
 80002d6:	6078      	str	r0, [r7, #4]
	switch(LED_MODE[lane]){
 80002d8:	4a59      	ldr	r2, [pc, #356]	; (8000440 <fsm_auto_run+0x170>)
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002e0:	3b01      	subs	r3, #1
 80002e2:	2b16      	cmp	r3, #22
 80002e4:	f200 80a1 	bhi.w	800042a <fsm_auto_run+0x15a>
 80002e8:	a201      	add	r2, pc, #4	; (adr r2, 80002f0 <fsm_auto_run+0x20>)
 80002ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002ee:	bf00      	nop
 80002f0:	0800034d 	.word	0x0800034d
 80002f4:	0800042b 	.word	0x0800042b
 80002f8:	0800042b 	.word	0x0800042b
 80002fc:	0800042b 	.word	0x0800042b
 8000300:	0800042b 	.word	0x0800042b
 8000304:	0800042b 	.word	0x0800042b
 8000308:	0800042b 	.word	0x0800042b
 800030c:	0800042b 	.word	0x0800042b
 8000310:	0800042b 	.word	0x0800042b
 8000314:	0800042b 	.word	0x0800042b
 8000318:	0800042b 	.word	0x0800042b
 800031c:	0800042b 	.word	0x0800042b
 8000320:	0800042b 	.word	0x0800042b
 8000324:	0800042b 	.word	0x0800042b
 8000328:	0800042b 	.word	0x0800042b
 800032c:	0800042b 	.word	0x0800042b
 8000330:	0800042b 	.word	0x0800042b
 8000334:	0800042b 	.word	0x0800042b
 8000338:	0800042b 	.word	0x0800042b
 800033c:	0800042b 	.word	0x0800042b
 8000340:	0800037d 	.word	0x0800037d
 8000344:	080003f1 	.word	0x080003f1
 8000348:	080003b7 	.word	0x080003b7
		case INIT:
			setTrafficLight(lane, OFF);
 800034c:	210c      	movs	r1, #12
 800034e:	6878      	ldr	r0, [r7, #4]
 8000350:	f000 fd38 	bl	8000dc4 <setTrafficLight>

			LED_MODE[lane] = initMode[lane];
 8000354:	4a3b      	ldr	r2, [pc, #236]	; (8000444 <fsm_auto_run+0x174>)
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800035c:	4938      	ldr	r1, [pc, #224]	; (8000440 <fsm_auto_run+0x170>)
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			setTimer(lane, initDuration(lane)*100);
 8000364:	6878      	ldr	r0, [r7, #4]
 8000366:	f7ff ff9d 	bl	80002a4 <initDuration>
 800036a:	4603      	mov	r3, r0
 800036c:	2264      	movs	r2, #100	; 0x64
 800036e:	fb02 f303 	mul.w	r3, r2, r3
 8000372:	4619      	mov	r1, r3
 8000374:	6878      	ldr	r0, [r7, #4]
 8000376:	f000 fc57 	bl	8000c28 <setTimer>

			break;
 800037a:	e05d      	b.n	8000438 <fsm_auto_run+0x168>
		case RED:
			setTrafficLight(lane, RED);
 800037c:	2115      	movs	r1, #21
 800037e:	6878      	ldr	r0, [r7, #4]
 8000380:	f000 fd20 	bl	8000dc4 <setTrafficLight>

			if(timer_flag[lane] && TRAFFIC_MODE != MANUAL){
 8000384:	4a30      	ldr	r2, [pc, #192]	; (8000448 <fsm_auto_run+0x178>)
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800038c:	2b00      	cmp	r3, #0
 800038e:	d04e      	beq.n	800042e <fsm_auto_run+0x15e>
 8000390:	4b2e      	ldr	r3, [pc, #184]	; (800044c <fsm_auto_run+0x17c>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	2b0d      	cmp	r3, #13
 8000396:	d04a      	beq.n	800042e <fsm_auto_run+0x15e>
				LED_MODE[lane] = GREEN;
 8000398:	4a29      	ldr	r2, [pc, #164]	; (8000440 <fsm_auto_run+0x170>)
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	2117      	movs	r1, #23
 800039e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				setTimer(lane, GREEN_DURATION*100);
 80003a2:	4b2b      	ldr	r3, [pc, #172]	; (8000450 <fsm_auto_run+0x180>)
 80003a4:	681b      	ldr	r3, [r3, #0]
 80003a6:	2264      	movs	r2, #100	; 0x64
 80003a8:	fb02 f303 	mul.w	r3, r2, r3
 80003ac:	4619      	mov	r1, r3
 80003ae:	6878      	ldr	r0, [r7, #4]
 80003b0:	f000 fc3a 	bl	8000c28 <setTimer>
			}

			break;
 80003b4:	e03b      	b.n	800042e <fsm_auto_run+0x15e>
		case GREEN:
			setTrafficLight(lane, GREEN);
 80003b6:	2117      	movs	r1, #23
 80003b8:	6878      	ldr	r0, [r7, #4]
 80003ba:	f000 fd03 	bl	8000dc4 <setTrafficLight>

			if(timer_flag[lane] && TRAFFIC_MODE != MANUAL){
 80003be:	4a22      	ldr	r2, [pc, #136]	; (8000448 <fsm_auto_run+0x178>)
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d033      	beq.n	8000432 <fsm_auto_run+0x162>
 80003ca:	4b20      	ldr	r3, [pc, #128]	; (800044c <fsm_auto_run+0x17c>)
 80003cc:	681b      	ldr	r3, [r3, #0]
 80003ce:	2b0d      	cmp	r3, #13
 80003d0:	d02f      	beq.n	8000432 <fsm_auto_run+0x162>
				LED_MODE[lane] = AMBER;
 80003d2:	4a1b      	ldr	r2, [pc, #108]	; (8000440 <fsm_auto_run+0x170>)
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	2116      	movs	r1, #22
 80003d8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				setTimer(lane, AMBER_DURATION*100);
 80003dc:	4b1d      	ldr	r3, [pc, #116]	; (8000454 <fsm_auto_run+0x184>)
 80003de:	681b      	ldr	r3, [r3, #0]
 80003e0:	2264      	movs	r2, #100	; 0x64
 80003e2:	fb02 f303 	mul.w	r3, r2, r3
 80003e6:	4619      	mov	r1, r3
 80003e8:	6878      	ldr	r0, [r7, #4]
 80003ea:	f000 fc1d 	bl	8000c28 <setTimer>
			}

			break;
 80003ee:	e020      	b.n	8000432 <fsm_auto_run+0x162>
		case AMBER:
			setTrafficLight(lane, AMBER);
 80003f0:	2116      	movs	r1, #22
 80003f2:	6878      	ldr	r0, [r7, #4]
 80003f4:	f000 fce6 	bl	8000dc4 <setTrafficLight>

			if(timer_flag[lane] && TRAFFIC_MODE != MANUAL){
 80003f8:	4a13      	ldr	r2, [pc, #76]	; (8000448 <fsm_auto_run+0x178>)
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000400:	2b00      	cmp	r3, #0
 8000402:	d018      	beq.n	8000436 <fsm_auto_run+0x166>
 8000404:	4b11      	ldr	r3, [pc, #68]	; (800044c <fsm_auto_run+0x17c>)
 8000406:	681b      	ldr	r3, [r3, #0]
 8000408:	2b0d      	cmp	r3, #13
 800040a:	d014      	beq.n	8000436 <fsm_auto_run+0x166>
				LED_MODE[lane] = RED;
 800040c:	4a0c      	ldr	r2, [pc, #48]	; (8000440 <fsm_auto_run+0x170>)
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	2115      	movs	r1, #21
 8000412:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				setTimer(lane, RED_DURATION*100);
 8000416:	4b10      	ldr	r3, [pc, #64]	; (8000458 <fsm_auto_run+0x188>)
 8000418:	681b      	ldr	r3, [r3, #0]
 800041a:	2264      	movs	r2, #100	; 0x64
 800041c:	fb02 f303 	mul.w	r3, r2, r3
 8000420:	4619      	mov	r1, r3
 8000422:	6878      	ldr	r0, [r7, #4]
 8000424:	f000 fc00 	bl	8000c28 <setTimer>
			}
			break;
 8000428:	e005      	b.n	8000436 <fsm_auto_run+0x166>
		default:
			break;
 800042a:	bf00      	nop
 800042c:	e004      	b.n	8000438 <fsm_auto_run+0x168>
			break;
 800042e:	bf00      	nop
 8000430:	e002      	b.n	8000438 <fsm_auto_run+0x168>
			break;
 8000432:	bf00      	nop
 8000434:	e000      	b.n	8000438 <fsm_auto_run+0x168>
			break;
 8000436:	bf00      	nop
	}
}
 8000438:	bf00      	nop
 800043a:	3708      	adds	r7, #8
 800043c:	46bd      	mov	sp, r7
 800043e:	bd80      	pop	{r7, pc}
 8000440:	20000098 	.word	0x20000098
 8000444:	20000068 	.word	0x20000068
 8000448:	20000170 	.word	0x20000170
 800044c:	200000a0 	.word	0x200000a0
 8000450:	200000ac 	.word	0x200000ac
 8000454:	200000a8 	.word	0x200000a8
 8000458:	200000a4 	.word	0x200000a4

0800045c <manualPlus>:
int tempDuration = 0;

int LIGHT[8] = {RED, RED, GREEN, AMBER, GREEN, AMBER, RED, RED};
int manualMode[2] = {0, 4};

void manualPlus(int lane){
 800045c:	b480      	push	{r7}
 800045e:	b083      	sub	sp, #12
 8000460:	af00      	add	r7, sp, #0
 8000462:	6078      	str	r0, [r7, #4]
	manualMode[lane] += 1;
 8000464:	4a13      	ldr	r2, [pc, #76]	; (80004b4 <manualPlus+0x58>)
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800046c:	1c5a      	adds	r2, r3, #1
 800046e:	4911      	ldr	r1, [pc, #68]	; (80004b4 <manualPlus+0x58>)
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	if (manualMode[lane] > (lane+1)*4-1) manualMode[lane] = lane*4;
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	3301      	adds	r3, #1
 800047a:	009a      	lsls	r2, r3, #2
 800047c:	490d      	ldr	r1, [pc, #52]	; (80004b4 <manualPlus+0x58>)
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000484:	429a      	cmp	r2, r3
 8000486:	dc05      	bgt.n	8000494 <manualPlus+0x38>
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	009a      	lsls	r2, r3, #2
 800048c:	4909      	ldr	r1, [pc, #36]	; (80004b4 <manualPlus+0x58>)
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	LED_MODE[lane] = LIGHT[manualMode[lane]];
 8000494:	4a07      	ldr	r2, [pc, #28]	; (80004b4 <manualPlus+0x58>)
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800049c:	4a06      	ldr	r2, [pc, #24]	; (80004b8 <manualPlus+0x5c>)
 800049e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80004a2:	4906      	ldr	r1, [pc, #24]	; (80004bc <manualPlus+0x60>)
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80004aa:	bf00      	nop
 80004ac:	370c      	adds	r7, #12
 80004ae:	46bd      	mov	sp, r7
 80004b0:	bc80      	pop	{r7}
 80004b2:	4770      	bx	lr
 80004b4:	20000090 	.word	0x20000090
 80004b8:	20000070 	.word	0x20000070
 80004bc:	20000098 	.word	0x20000098

080004c0 <manualMinus>:

void manualMinus(int lane){
 80004c0:	b480      	push	{r7}
 80004c2:	b083      	sub	sp, #12
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
	manualMode[lane] -= 1;
 80004c8:	4a14      	ldr	r2, [pc, #80]	; (800051c <manualMinus+0x5c>)
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80004d0:	1e5a      	subs	r2, r3, #1
 80004d2:	4912      	ldr	r1, [pc, #72]	; (800051c <manualMinus+0x5c>)
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	if (manualMode[lane] < lane*4) manualMode[lane] = (lane+1)*4-1;
 80004da:	4a10      	ldr	r2, [pc, #64]	; (800051c <manualMinus+0x5c>)
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	009b      	lsls	r3, r3, #2
 80004e6:	429a      	cmp	r2, r3
 80004e8:	da07      	bge.n	80004fa <manualMinus+0x3a>
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	3301      	adds	r3, #1
 80004ee:	009b      	lsls	r3, r3, #2
 80004f0:	1e5a      	subs	r2, r3, #1
 80004f2:	490a      	ldr	r1, [pc, #40]	; (800051c <manualMinus+0x5c>)
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	LED_MODE[lane] = LIGHT[manualMode[lane]];
 80004fa:	4a08      	ldr	r2, [pc, #32]	; (800051c <manualMinus+0x5c>)
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000502:	4a07      	ldr	r2, [pc, #28]	; (8000520 <manualMinus+0x60>)
 8000504:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000508:	4906      	ldr	r1, [pc, #24]	; (8000524 <manualMinus+0x64>)
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000510:	bf00      	nop
 8000512:	370c      	adds	r7, #12
 8000514:	46bd      	mov	sp, r7
 8000516:	bc80      	pop	{r7}
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop
 800051c:	20000090 	.word	0x20000090
 8000520:	20000070 	.word	0x20000070
 8000524:	20000098 	.word	0x20000098

08000528 <changeMode>:

//Change mode
void changeMode(int mode, int duration, int ledMode){
 8000528:	b580      	push	{r7, lr}
 800052a:	b084      	sub	sp, #16
 800052c:	af00      	add	r7, sp, #0
 800052e:	60f8      	str	r0, [r7, #12]
 8000530:	60b9      	str	r1, [r7, #8]
 8000532:	607a      	str	r2, [r7, #4]
	//Display duration
	tempDuration = duration;
 8000534:	4a0f      	ldr	r2, [pc, #60]	; (8000574 <changeMode+0x4c>)
 8000536:	68bb      	ldr	r3, [r7, #8]
 8000538:	6013      	str	r3, [r2, #0]

	//Change traffic lights to toggle the right color
	LED_MODE[0] = ledMode;
 800053a:	4a0f      	ldr	r2, [pc, #60]	; (8000578 <changeMode+0x50>)
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	6013      	str	r3, [r2, #0]
	LED_MODE[1] = ledMode;
 8000540:	4a0d      	ldr	r2, [pc, #52]	; (8000578 <changeMode+0x50>)
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	6053      	str	r3, [r2, #4]

	//Change ped light mode
	LED_MODE[2] = ledMode;
 8000546:	4a0c      	ldr	r2, [pc, #48]	; (8000578 <changeMode+0x50>)
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	6093      	str	r3, [r2, #8]

	//Turn off all lights
	setTrafficLight(0, OFF);
 800054c:	210c      	movs	r1, #12
 800054e:	2000      	movs	r0, #0
 8000550:	f000 fc38 	bl	8000dc4 <setTrafficLight>
	setTrafficLight(1, OFF);
 8000554:	210c      	movs	r1, #12
 8000556:	2001      	movs	r0, #1
 8000558:	f000 fc34 	bl	8000dc4 <setTrafficLight>

	//Update mode
	TRAFFIC_MODE = mode;
 800055c:	4a07      	ldr	r2, [pc, #28]	; (800057c <changeMode+0x54>)
 800055e:	68fb      	ldr	r3, [r7, #12]
 8000560:	6013      	str	r3, [r2, #0]

	//Set timer to toggle lights
	setTimer(3, 25);
 8000562:	2119      	movs	r1, #25
 8000564:	2003      	movs	r0, #3
 8000566:	f000 fb5f 	bl	8000c28 <setTimer>
}
 800056a:	bf00      	nop
 800056c:	3710      	adds	r7, #16
 800056e:	46bd      	mov	sp, r7
 8000570:	bd80      	pop	{r7, pc}
 8000572:	bf00      	nop
 8000574:	2000010c 	.word	0x2000010c
 8000578:	20000098 	.word	0x20000098
 800057c:	200000a0 	.word	0x200000a0

08000580 <increaseDuration>:


//Increment duration
void increaseDuration(int mode){
 8000580:	b580      	push	{r7, lr}
 8000582:	b082      	sub	sp, #8
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
	tempDuration++;
 8000588:	4b0a      	ldr	r3, [pc, #40]	; (80005b4 <increaseDuration+0x34>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	3301      	adds	r3, #1
 800058e:	4a09      	ldr	r2, [pc, #36]	; (80005b4 <increaseDuration+0x34>)
 8000590:	6013      	str	r3, [r2, #0]
	if (tempDuration == 10) tempDuration = 1;
 8000592:	4b08      	ldr	r3, [pc, #32]	; (80005b4 <increaseDuration+0x34>)
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	2b0a      	cmp	r3, #10
 8000598:	d102      	bne.n	80005a0 <increaseDuration+0x20>
 800059a:	4b06      	ldr	r3, [pc, #24]	; (80005b4 <increaseDuration+0x34>)
 800059c:	2201      	movs	r2, #1
 800059e:	601a      	str	r2, [r3, #0]

	//Display duration
	display7SEG(tempDuration);
 80005a0:	4b04      	ldr	r3, [pc, #16]	; (80005b4 <increaseDuration+0x34>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	4618      	mov	r0, r3
 80005a6:	f000 fdb1 	bl	800110c <display7SEG>
}
 80005aa:	bf00      	nop
 80005ac:	3708      	adds	r7, #8
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	bf00      	nop
 80005b4:	2000010c 	.word	0x2000010c

080005b8 <decreaseDuration>:

void decreaseDuration(int mode){
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b082      	sub	sp, #8
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
	tempDuration--;
 80005c0:	4b0a      	ldr	r3, [pc, #40]	; (80005ec <decreaseDuration+0x34>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	3b01      	subs	r3, #1
 80005c6:	4a09      	ldr	r2, [pc, #36]	; (80005ec <decreaseDuration+0x34>)
 80005c8:	6013      	str	r3, [r2, #0]
	if (tempDuration == 0) tempDuration = 9;
 80005ca:	4b08      	ldr	r3, [pc, #32]	; (80005ec <decreaseDuration+0x34>)
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d102      	bne.n	80005d8 <decreaseDuration+0x20>
 80005d2:	4b06      	ldr	r3, [pc, #24]	; (80005ec <decreaseDuration+0x34>)
 80005d4:	2209      	movs	r2, #9
 80005d6:	601a      	str	r2, [r3, #0]

	//Display duration
	display7SEG(tempDuration);
 80005d8:	4b04      	ldr	r3, [pc, #16]	; (80005ec <decreaseDuration+0x34>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	4618      	mov	r0, r3
 80005de:	f000 fd95 	bl	800110c <display7SEG>
}
 80005e2:	bf00      	nop
 80005e4:	3708      	adds	r7, #8
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	2000010c 	.word	0x2000010c

080005f0 <toggle>:


//Toggle Lights
void toggle(int mode){
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b082      	sub	sp, #8
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
	toggleLight(0, mode);
 80005f8:	6879      	ldr	r1, [r7, #4]
 80005fa:	2000      	movs	r0, #0
 80005fc:	f000 fcd6 	bl	8000fac <toggleLight>
	toggleLight(1, mode);
 8000600:	6879      	ldr	r1, [r7, #4]
 8000602:	2001      	movs	r0, #1
 8000604:	f000 fcd2 	bl	8000fac <toggleLight>
	setTimer(3, 25);
 8000608:	2119      	movs	r1, #25
 800060a:	2003      	movs	r0, #3
 800060c:	f000 fb0c 	bl	8000c28 <setTimer>
}
 8000610:	bf00      	nop
 8000612:	3708      	adds	r7, #8
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}

08000618 <displayCountdown>:


void displayCountdown(){
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
	if (timer_counter[0] % 100 == 0){
 800061c:	4b0d      	ldr	r3, [pc, #52]	; (8000654 <displayCountdown+0x3c>)
 800061e:	681a      	ldr	r2, [r3, #0]
 8000620:	4b0d      	ldr	r3, [pc, #52]	; (8000658 <displayCountdown+0x40>)
 8000622:	fb83 1302 	smull	r1, r3, r3, r2
 8000626:	1159      	asrs	r1, r3, #5
 8000628:	17d3      	asrs	r3, r2, #31
 800062a:	1acb      	subs	r3, r1, r3
 800062c:	2164      	movs	r1, #100	; 0x64
 800062e:	fb01 f303 	mul.w	r3, r1, r3
 8000632:	1ad3      	subs	r3, r2, r3
 8000634:	2b00      	cmp	r3, #0
 8000636:	d10a      	bne.n	800064e <displayCountdown+0x36>
		display7SEG(timer_counter[0] /100);
 8000638:	4b06      	ldr	r3, [pc, #24]	; (8000654 <displayCountdown+0x3c>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	4a06      	ldr	r2, [pc, #24]	; (8000658 <displayCountdown+0x40>)
 800063e:	fb82 1203 	smull	r1, r2, r2, r3
 8000642:	1152      	asrs	r2, r2, #5
 8000644:	17db      	asrs	r3, r3, #31
 8000646:	1ad3      	subs	r3, r2, r3
 8000648:	4618      	mov	r0, r3
 800064a:	f000 fd5f 	bl	800110c <display7SEG>
//		setTimer(5,100);
	}
}
 800064e:	bf00      	nop
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	20000158 	.word	0x20000158
 8000658:	51eb851f 	.word	0x51eb851f

0800065c <checkDuration>:


//Check and update duration so that RED = GREEN + AMBER
void checkDuration(int mode){
 800065c:	b480      	push	{r7}
 800065e:	b085      	sub	sp, #20
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
	int lane = GREEN_DURATION + AMBER_DURATION;
 8000664:	4b1e      	ldr	r3, [pc, #120]	; (80006e0 <checkDuration+0x84>)
 8000666:	681a      	ldr	r2, [r3, #0]
 8000668:	4b1e      	ldr	r3, [pc, #120]	; (80006e4 <checkDuration+0x88>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	4413      	add	r3, r2
 800066e:	60fb      	str	r3, [r7, #12]
	switch (mode){
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	2b17      	cmp	r3, #23
 8000674:	d01f      	beq.n	80006b6 <checkDuration+0x5a>
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	2b17      	cmp	r3, #23
 800067a:	dc2c      	bgt.n	80006d6 <checkDuration+0x7a>
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	2b15      	cmp	r3, #21
 8000680:	d003      	beq.n	800068a <checkDuration+0x2e>
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	2b16      	cmp	r3, #22
 8000686:	d00b      	beq.n	80006a0 <checkDuration+0x44>
		break;
	case GREEN:
		if (lane != RED) RED_DURATION = GREEN_DURATION + AMBER_DURATION;
		break;
	}
}
 8000688:	e025      	b.n	80006d6 <checkDuration+0x7a>
		if (lane != RED) GREEN_DURATION = RED_DURATION - AMBER_DURATION;
 800068a:	68fb      	ldr	r3, [r7, #12]
 800068c:	2b15      	cmp	r3, #21
 800068e:	d01d      	beq.n	80006cc <checkDuration+0x70>
 8000690:	4b15      	ldr	r3, [pc, #84]	; (80006e8 <checkDuration+0x8c>)
 8000692:	681a      	ldr	r2, [r3, #0]
 8000694:	4b13      	ldr	r3, [pc, #76]	; (80006e4 <checkDuration+0x88>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	1ad3      	subs	r3, r2, r3
 800069a:	4a11      	ldr	r2, [pc, #68]	; (80006e0 <checkDuration+0x84>)
 800069c:	6013      	str	r3, [r2, #0]
		break;
 800069e:	e015      	b.n	80006cc <checkDuration+0x70>
		if (lane != RED) RED_DURATION = GREEN_DURATION + AMBER_DURATION;
 80006a0:	68fb      	ldr	r3, [r7, #12]
 80006a2:	2b15      	cmp	r3, #21
 80006a4:	d014      	beq.n	80006d0 <checkDuration+0x74>
 80006a6:	4b0e      	ldr	r3, [pc, #56]	; (80006e0 <checkDuration+0x84>)
 80006a8:	681a      	ldr	r2, [r3, #0]
 80006aa:	4b0e      	ldr	r3, [pc, #56]	; (80006e4 <checkDuration+0x88>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	4413      	add	r3, r2
 80006b0:	4a0d      	ldr	r2, [pc, #52]	; (80006e8 <checkDuration+0x8c>)
 80006b2:	6013      	str	r3, [r2, #0]
		break;
 80006b4:	e00c      	b.n	80006d0 <checkDuration+0x74>
		if (lane != RED) RED_DURATION = GREEN_DURATION + AMBER_DURATION;
 80006b6:	68fb      	ldr	r3, [r7, #12]
 80006b8:	2b15      	cmp	r3, #21
 80006ba:	d00b      	beq.n	80006d4 <checkDuration+0x78>
 80006bc:	4b08      	ldr	r3, [pc, #32]	; (80006e0 <checkDuration+0x84>)
 80006be:	681a      	ldr	r2, [r3, #0]
 80006c0:	4b08      	ldr	r3, [pc, #32]	; (80006e4 <checkDuration+0x88>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	4413      	add	r3, r2
 80006c6:	4a08      	ldr	r2, [pc, #32]	; (80006e8 <checkDuration+0x8c>)
 80006c8:	6013      	str	r3, [r2, #0]
		break;
 80006ca:	e003      	b.n	80006d4 <checkDuration+0x78>
		break;
 80006cc:	bf00      	nop
 80006ce:	e002      	b.n	80006d6 <checkDuration+0x7a>
		break;
 80006d0:	bf00      	nop
 80006d2:	e000      	b.n	80006d6 <checkDuration+0x7a>
		break;
 80006d4:	bf00      	nop
}
 80006d6:	bf00      	nop
 80006d8:	3714      	adds	r7, #20
 80006da:	46bd      	mov	sp, r7
 80006dc:	bc80      	pop	{r7}
 80006de:	4770      	bx	lr
 80006e0:	200000ac 	.word	0x200000ac
 80006e4:	200000a8 	.word	0x200000a8
 80006e8:	200000a4 	.word	0x200000a4

080006ec <fsm_manual_run>:

void fsm_manual_run(){
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
	switch(TRAFFIC_MODE){
 80006f0:	4b89      	ldr	r3, [pc, #548]	; (8000918 <fsm_manual_run+0x22c>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	3b0b      	subs	r3, #11
 80006f6:	2b0c      	cmp	r3, #12
 80006f8:	f200 8100 	bhi.w	80008fc <fsm_manual_run+0x210>
 80006fc:	a201      	add	r2, pc, #4	; (adr r2, 8000704 <fsm_manual_run+0x18>)
 80006fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000702:	bf00      	nop
 8000704:	08000739 	.word	0x08000739
 8000708:	080008fd 	.word	0x080008fd
 800070c:	0800075d 	.word	0x0800075d
 8000710:	080008fd 	.word	0x080008fd
 8000714:	080008fd 	.word	0x080008fd
 8000718:	080008fd 	.word	0x080008fd
 800071c:	080008fd 	.word	0x080008fd
 8000720:	080008fd 	.word	0x080008fd
 8000724:	080008fd 	.word	0x080008fd
 8000728:	080008fd 	.word	0x080008fd
 800072c:	080007b5 	.word	0x080007b5
 8000730:	08000827 	.word	0x08000827
 8000734:	08000899 	.word	0x08000899
		case AUTO:
			displayCountdown();
 8000738:	f7ff ff6e 	bl	8000618 <displayCountdown>
			if (isButtonPressed(0)){
 800073c:	2000      	movs	r0, #0
 800073e:	f7ff fd05 	bl	800014c <isButtonPressed>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	f000 80db 	beq.w	8000900 <fsm_manual_run+0x214>
				changeMode(MANUAL, 0, INIT);
 800074a:	2201      	movs	r2, #1
 800074c:	2100      	movs	r1, #0
 800074e:	200d      	movs	r0, #13
 8000750:	f7ff feea 	bl	8000528 <changeMode>
				display7SEG(USER);
 8000754:	200e      	movs	r0, #14
 8000756:	f000 fcd9 	bl	800110c <display7SEG>
			}
			break;
 800075a:	e0d1      	b.n	8000900 <fsm_manual_run+0x214>

		case MANUAL:
			//Change mode
			if (isButtonPressed(0)){
 800075c:	2000      	movs	r0, #0
 800075e:	f7ff fcf5 	bl	800014c <isButtonPressed>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d00b      	beq.n	8000780 <fsm_manual_run+0x94>
				changeMode(RED, RED_DURATION, OFF);
 8000768:	4b6c      	ldr	r3, [pc, #432]	; (800091c <fsm_manual_run+0x230>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	220c      	movs	r2, #12
 800076e:	4619      	mov	r1, r3
 8000770:	2015      	movs	r0, #21
 8000772:	f7ff fed9 	bl	8000528 <changeMode>
				display7SEG(RED_DURATION);
 8000776:	4b69      	ldr	r3, [pc, #420]	; (800091c <fsm_manual_run+0x230>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	4618      	mov	r0, r3
 800077c:	f000 fcc6 	bl	800110c <display7SEG>
			}

			if (isButtonPressed(2)){
 8000780:	2002      	movs	r0, #2
 8000782:	f7ff fce3 	bl	800014c <isButtonPressed>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d005      	beq.n	8000798 <fsm_manual_run+0xac>
				manualPlus(0);
 800078c:	2000      	movs	r0, #0
 800078e:	f7ff fe65 	bl	800045c <manualPlus>
				manualPlus(1);
 8000792:	2001      	movs	r0, #1
 8000794:	f7ff fe62 	bl	800045c <manualPlus>
			}
			if (isButtonPressed(3)){
 8000798:	2003      	movs	r0, #3
 800079a:	f7ff fcd7 	bl	800014c <isButtonPressed>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	f000 80af 	beq.w	8000904 <fsm_manual_run+0x218>
				manualMinus(0);
 80007a6:	2000      	movs	r0, #0
 80007a8:	f7ff fe8a 	bl	80004c0 <manualMinus>
				manualMinus(1);
 80007ac:	2001      	movs	r0, #1
 80007ae:	f7ff fe87 	bl	80004c0 <manualMinus>
			}
			break;
 80007b2:	e0a7      	b.n	8000904 <fsm_manual_run+0x218>

		case RED:
			//Change mode
			if (isButtonPressed(0)){
 80007b4:	2000      	movs	r0, #0
 80007b6:	f7ff fcc9 	bl	800014c <isButtonPressed>
 80007ba:	4603      	mov	r3, r0
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d00b      	beq.n	80007d8 <fsm_manual_run+0xec>
				changeMode(AMBER, AMBER_DURATION, OFF);
 80007c0:	4b57      	ldr	r3, [pc, #348]	; (8000920 <fsm_manual_run+0x234>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	220c      	movs	r2, #12
 80007c6:	4619      	mov	r1, r3
 80007c8:	2016      	movs	r0, #22
 80007ca:	f7ff fead 	bl	8000528 <changeMode>
				display7SEG(AMBER_DURATION);
 80007ce:	4b54      	ldr	r3, [pc, #336]	; (8000920 <fsm_manual_run+0x234>)
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	4618      	mov	r0, r3
 80007d4:	f000 fc9a 	bl	800110c <display7SEG>
			}

			//Change duration
			if (isButtonPressed(3)) increaseDuration(RED);
 80007d8:	2003      	movs	r0, #3
 80007da:	f7ff fcb7 	bl	800014c <isButtonPressed>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d002      	beq.n	80007ea <fsm_manual_run+0xfe>
 80007e4:	2015      	movs	r0, #21
 80007e6:	f7ff fecb 	bl	8000580 <increaseDuration>

			if (isButtonPressed(2)) decreaseDuration(RED);
 80007ea:	2002      	movs	r0, #2
 80007ec:	f7ff fcae 	bl	800014c <isButtonPressed>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d002      	beq.n	80007fc <fsm_manual_run+0x110>
 80007f6:	2015      	movs	r0, #21
 80007f8:	f7ff fede 	bl	80005b8 <decreaseDuration>

			//Save duration
			if (isButtonPressed(1)){
 80007fc:	2001      	movs	r0, #1
 80007fe:	f7ff fca5 	bl	800014c <isButtonPressed>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d006      	beq.n	8000816 <fsm_manual_run+0x12a>
				RED_DURATION = tempDuration;
 8000808:	4b46      	ldr	r3, [pc, #280]	; (8000924 <fsm_manual_run+0x238>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	4a43      	ldr	r2, [pc, #268]	; (800091c <fsm_manual_run+0x230>)
 800080e:	6013      	str	r3, [r2, #0]
				checkDuration(RED);
 8000810:	2015      	movs	r0, #21
 8000812:	f7ff ff23 	bl	800065c <checkDuration>
			}

			//Toggle lights
			if (timer_flag[3]) toggle(RED);
 8000816:	4b44      	ldr	r3, [pc, #272]	; (8000928 <fsm_manual_run+0x23c>)
 8000818:	68db      	ldr	r3, [r3, #12]
 800081a:	2b00      	cmp	r3, #0
 800081c:	d074      	beq.n	8000908 <fsm_manual_run+0x21c>
 800081e:	2015      	movs	r0, #21
 8000820:	f7ff fee6 	bl	80005f0 <toggle>
			break;
 8000824:	e070      	b.n	8000908 <fsm_manual_run+0x21c>

		case AMBER:
			//Change mode
			if (isButtonPressed(0)){
 8000826:	2000      	movs	r0, #0
 8000828:	f7ff fc90 	bl	800014c <isButtonPressed>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d00b      	beq.n	800084a <fsm_manual_run+0x15e>
				changeMode(GREEN, GREEN_DURATION, OFF);
 8000832:	4b3e      	ldr	r3, [pc, #248]	; (800092c <fsm_manual_run+0x240>)
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	220c      	movs	r2, #12
 8000838:	4619      	mov	r1, r3
 800083a:	2017      	movs	r0, #23
 800083c:	f7ff fe74 	bl	8000528 <changeMode>
				display7SEG(GREEN_DURATION);
 8000840:	4b3a      	ldr	r3, [pc, #232]	; (800092c <fsm_manual_run+0x240>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	4618      	mov	r0, r3
 8000846:	f000 fc61 	bl	800110c <display7SEG>
			}

			//Change duration
			if (isButtonPressed(3))	increaseDuration(AMBER);
 800084a:	2003      	movs	r0, #3
 800084c:	f7ff fc7e 	bl	800014c <isButtonPressed>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d002      	beq.n	800085c <fsm_manual_run+0x170>
 8000856:	2016      	movs	r0, #22
 8000858:	f7ff fe92 	bl	8000580 <increaseDuration>

			if (isButtonPressed(2))	decreaseDuration(AMBER);
 800085c:	2002      	movs	r0, #2
 800085e:	f7ff fc75 	bl	800014c <isButtonPressed>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d002      	beq.n	800086e <fsm_manual_run+0x182>
 8000868:	2016      	movs	r0, #22
 800086a:	f7ff fea5 	bl	80005b8 <decreaseDuration>

			//Save duration
			if (isButtonPressed(1)){
 800086e:	2001      	movs	r0, #1
 8000870:	f7ff fc6c 	bl	800014c <isButtonPressed>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d006      	beq.n	8000888 <fsm_manual_run+0x19c>
				AMBER_DURATION = tempDuration;
 800087a:	4b2a      	ldr	r3, [pc, #168]	; (8000924 <fsm_manual_run+0x238>)
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	4a28      	ldr	r2, [pc, #160]	; (8000920 <fsm_manual_run+0x234>)
 8000880:	6013      	str	r3, [r2, #0]
				checkDuration(AMBER);
 8000882:	2016      	movs	r0, #22
 8000884:	f7ff feea 	bl	800065c <checkDuration>
			}

			//Toggle lights
			if (timer_flag[3]) toggle(AMBER);
 8000888:	4b27      	ldr	r3, [pc, #156]	; (8000928 <fsm_manual_run+0x23c>)
 800088a:	68db      	ldr	r3, [r3, #12]
 800088c:	2b00      	cmp	r3, #0
 800088e:	d03d      	beq.n	800090c <fsm_manual_run+0x220>
 8000890:	2016      	movs	r0, #22
 8000892:	f7ff fead 	bl	80005f0 <toggle>
			break;
 8000896:	e039      	b.n	800090c <fsm_manual_run+0x220>

		case GREEN:
			//Change mode
			if (isButtonPressed(0)) changeMode(AUTO, 0, INIT);
 8000898:	2000      	movs	r0, #0
 800089a:	f7ff fc57 	bl	800014c <isButtonPressed>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d004      	beq.n	80008ae <fsm_manual_run+0x1c2>
 80008a4:	2201      	movs	r2, #1
 80008a6:	2100      	movs	r1, #0
 80008a8:	200b      	movs	r0, #11
 80008aa:	f7ff fe3d 	bl	8000528 <changeMode>

			//Change duration
			if (isButtonPressed(3)) increaseDuration(GREEN);
 80008ae:	2003      	movs	r0, #3
 80008b0:	f7ff fc4c 	bl	800014c <isButtonPressed>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d002      	beq.n	80008c0 <fsm_manual_run+0x1d4>
 80008ba:	2017      	movs	r0, #23
 80008bc:	f7ff fe60 	bl	8000580 <increaseDuration>

			if (isButtonPressed(2)) decreaseDuration(GREEN);
 80008c0:	2002      	movs	r0, #2
 80008c2:	f7ff fc43 	bl	800014c <isButtonPressed>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d002      	beq.n	80008d2 <fsm_manual_run+0x1e6>
 80008cc:	2017      	movs	r0, #23
 80008ce:	f7ff fe73 	bl	80005b8 <decreaseDuration>


			//Save duration
			if (isButtonPressed(1)){
 80008d2:	2001      	movs	r0, #1
 80008d4:	f7ff fc3a 	bl	800014c <isButtonPressed>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d006      	beq.n	80008ec <fsm_manual_run+0x200>
				GREEN_DURATION = tempDuration;
 80008de:	4b11      	ldr	r3, [pc, #68]	; (8000924 <fsm_manual_run+0x238>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	4a12      	ldr	r2, [pc, #72]	; (800092c <fsm_manual_run+0x240>)
 80008e4:	6013      	str	r3, [r2, #0]
				checkDuration(GREEN);
 80008e6:	2017      	movs	r0, #23
 80008e8:	f7ff feb8 	bl	800065c <checkDuration>
			}

			//Toggle lights
			if (timer_flag[3]) toggle(GREEN);
 80008ec:	4b0e      	ldr	r3, [pc, #56]	; (8000928 <fsm_manual_run+0x23c>)
 80008ee:	68db      	ldr	r3, [r3, #12]
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d00d      	beq.n	8000910 <fsm_manual_run+0x224>
 80008f4:	2017      	movs	r0, #23
 80008f6:	f7ff fe7b 	bl	80005f0 <toggle>
			break;
 80008fa:	e009      	b.n	8000910 <fsm_manual_run+0x224>

		default:
			 break;
 80008fc:	bf00      	nop
 80008fe:	e008      	b.n	8000912 <fsm_manual_run+0x226>
			break;
 8000900:	bf00      	nop
 8000902:	e006      	b.n	8000912 <fsm_manual_run+0x226>
			break;
 8000904:	bf00      	nop
 8000906:	e004      	b.n	8000912 <fsm_manual_run+0x226>
			break;
 8000908:	bf00      	nop
 800090a:	e002      	b.n	8000912 <fsm_manual_run+0x226>
			break;
 800090c:	bf00      	nop
 800090e:	e000      	b.n	8000912 <fsm_manual_run+0x226>
			break;
 8000910:	bf00      	nop
	}
}
 8000912:	bf00      	nop
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	200000a0 	.word	0x200000a0
 800091c:	200000a4 	.word	0x200000a4
 8000920:	200000a8 	.word	0x200000a8
 8000924:	2000010c 	.word	0x2000010c
 8000928:	20000170 	.word	0x20000170
 800092c:	200000ac 	.word	0x200000ac

08000930 <updateTimer>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void updateTimer(void) {
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
	timerRun(0);
 8000934:	2000      	movs	r0, #0
 8000936:	f000 f98f 	bl	8000c58 <timerRun>
	timerRun(1);
 800093a:	2001      	movs	r0, #1
 800093c:	f000 f98c 	bl	8000c58 <timerRun>
	timerRun(2);
 8000940:	2002      	movs	r0, #2
 8000942:	f000 f989 	bl	8000c58 <timerRun>
	timerRun(3);
 8000946:	2003      	movs	r0, #3
 8000948:	f000 f986 	bl	8000c58 <timerRun>
	timerRun(4);
 800094c:	2004      	movs	r0, #4
 800094e:	f000 f983 	bl	8000c58 <timerRun>
}
 8000952:	bf00      	nop
 8000954:	bd80      	pop	{r7, pc}

08000956 <buttonRead>:

void buttonRead(void){
 8000956:	b580      	push	{r7, lr}
 8000958:	af00      	add	r7, sp, #0
	getKeyInput(0);
 800095a:	2000      	movs	r0, #0
 800095c:	f7ff fc20 	bl	80001a0 <getKeyInput>
	getKeyInput(1);
 8000960:	2001      	movs	r0, #1
 8000962:	f7ff fc1d 	bl	80001a0 <getKeyInput>
	getKeyInput(2);
 8000966:	2002      	movs	r0, #2
 8000968:	f7ff fc1a 	bl	80001a0 <getKeyInput>
	getKeyInput(3);
 800096c:	2003      	movs	r0, #3
 800096e:	f7ff fc17 	bl	80001a0 <getKeyInput>
}
 8000972:	bf00      	nop
 8000974:	bd80      	pop	{r7, pc}
	...

08000978 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b082      	sub	sp, #8
 800097c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800097e:	f000 fdef 	bl	8001560 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000982:	f000 f81f 	bl	80009c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000986:	f000 f8ad 	bl	8000ae4 <MX_GPIO_Init>
  MX_TIM2_Init();
 800098a:	f000 f85d 	bl	8000a48 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 800098e:	480c      	ldr	r0, [pc, #48]	; (80009c0 <main+0x48>)
 8000990:	f001 fd50 	bl	8002434 <HAL_TIM_Base_Start_IT>

  setTrafficLight(0, OFF);
 8000994:	210c      	movs	r1, #12
 8000996:	2000      	movs	r0, #0
 8000998:	f000 fa14 	bl	8000dc4 <setTrafficLight>
  setTrafficLight(1, OFF);
 800099c:	210c      	movs	r1, #12
 800099e:	2001      	movs	r0, #1
 80009a0:	f000 fa10 	bl	8000dc4 <setTrafficLight>
  display7SEG(OFF);
 80009a4:	200c      	movs	r0, #12
 80009a6:	f000 fbb1 	bl	800110c <display7SEG>
  int i = 0;
 80009aa:	2300      	movs	r3, #0
 80009ac:	607b      	str	r3, [r7, #4]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  fsm_manual_run();
 80009ae:	f7ff fe9d 	bl	80006ec <fsm_manual_run>
	  fsm_auto_run(0);
 80009b2:	2000      	movs	r0, #0
 80009b4:	f7ff fc8c 	bl	80002d0 <fsm_auto_run>
	  fsm_auto_run(1);
 80009b8:	2001      	movs	r0, #1
 80009ba:	f7ff fc89 	bl	80002d0 <fsm_auto_run>
	  fsm_manual_run();
 80009be:	e7f6      	b.n	80009ae <main+0x36>
 80009c0:	20000110 	.word	0x20000110

080009c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b090      	sub	sp, #64	; 0x40
 80009c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009ca:	f107 0318 	add.w	r3, r7, #24
 80009ce:	2228      	movs	r2, #40	; 0x28
 80009d0:	2100      	movs	r1, #0
 80009d2:	4618      	mov	r0, r3
 80009d4:	f002 f8dc 	bl	8002b90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009d8:	1d3b      	adds	r3, r7, #4
 80009da:	2200      	movs	r2, #0
 80009dc:	601a      	str	r2, [r3, #0]
 80009de:	605a      	str	r2, [r3, #4]
 80009e0:	609a      	str	r2, [r3, #8]
 80009e2:	60da      	str	r2, [r3, #12]
 80009e4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009e6:	2302      	movs	r3, #2
 80009e8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009ea:	2301      	movs	r3, #1
 80009ec:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009ee:	2310      	movs	r3, #16
 80009f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009f2:	2302      	movs	r3, #2
 80009f4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80009f6:	2300      	movs	r3, #0
 80009f8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80009fa:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80009fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a00:	f107 0318 	add.w	r3, r7, #24
 8000a04:	4618      	mov	r0, r3
 8000a06:	f001 f8e7 	bl	8001bd8 <HAL_RCC_OscConfig>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d001      	beq.n	8000a14 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000a10:	f000 f904 	bl	8000c1c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a14:	230f      	movs	r3, #15
 8000a16:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a18:	2302      	movs	r3, #2
 8000a1a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a24:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a26:	2300      	movs	r3, #0
 8000a28:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a2a:	1d3b      	adds	r3, r7, #4
 8000a2c:	2102      	movs	r1, #2
 8000a2e:	4618      	mov	r0, r3
 8000a30:	f001 fb54 	bl	80020dc <HAL_RCC_ClockConfig>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d001      	beq.n	8000a3e <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000a3a:	f000 f8ef 	bl	8000c1c <Error_Handler>
  }
}
 8000a3e:	bf00      	nop
 8000a40:	3740      	adds	r7, #64	; 0x40
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
	...

08000a48 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b086      	sub	sp, #24
 8000a4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a4e:	f107 0308 	add.w	r3, r7, #8
 8000a52:	2200      	movs	r2, #0
 8000a54:	601a      	str	r2, [r3, #0]
 8000a56:	605a      	str	r2, [r3, #4]
 8000a58:	609a      	str	r2, [r3, #8]
 8000a5a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a5c:	463b      	mov	r3, r7
 8000a5e:	2200      	movs	r2, #0
 8000a60:	601a      	str	r2, [r3, #0]
 8000a62:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a64:	4b1e      	ldr	r3, [pc, #120]	; (8000ae0 <MX_TIM2_Init+0x98>)
 8000a66:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a6a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1023;
 8000a6c:	4b1c      	ldr	r3, [pc, #112]	; (8000ae0 <MX_TIM2_Init+0x98>)
 8000a6e:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8000a72:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a74:	4b1a      	ldr	r3, [pc, #104]	; (8000ae0 <MX_TIM2_Init+0x98>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 624;
 8000a7a:	4b19      	ldr	r3, [pc, #100]	; (8000ae0 <MX_TIM2_Init+0x98>)
 8000a7c:	f44f 721c 	mov.w	r2, #624	; 0x270
 8000a80:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a82:	4b17      	ldr	r3, [pc, #92]	; (8000ae0 <MX_TIM2_Init+0x98>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a88:	4b15      	ldr	r3, [pc, #84]	; (8000ae0 <MX_TIM2_Init+0x98>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a8e:	4814      	ldr	r0, [pc, #80]	; (8000ae0 <MX_TIM2_Init+0x98>)
 8000a90:	f001 fc80 	bl	8002394 <HAL_TIM_Base_Init>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d001      	beq.n	8000a9e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000a9a:	f000 f8bf 	bl	8000c1c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000aa2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000aa4:	f107 0308 	add.w	r3, r7, #8
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	480d      	ldr	r0, [pc, #52]	; (8000ae0 <MX_TIM2_Init+0x98>)
 8000aac:	f001 fe1c 	bl	80026e8 <HAL_TIM_ConfigClockSource>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d001      	beq.n	8000aba <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000ab6:	f000 f8b1 	bl	8000c1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000aba:	2300      	movs	r3, #0
 8000abc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ac2:	463b      	mov	r3, r7
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	4806      	ldr	r0, [pc, #24]	; (8000ae0 <MX_TIM2_Init+0x98>)
 8000ac8:	f001 fff2 	bl	8002ab0 <HAL_TIMEx_MasterConfigSynchronization>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d001      	beq.n	8000ad6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000ad2:	f000 f8a3 	bl	8000c1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000ad6:	bf00      	nop
 8000ad8:	3718      	adds	r7, #24
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	20000110 	.word	0x20000110

08000ae4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b088      	sub	sp, #32
 8000ae8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aea:	f107 0310 	add.w	r3, r7, #16
 8000aee:	2200      	movs	r2, #0
 8000af0:	601a      	str	r2, [r3, #0]
 8000af2:	605a      	str	r2, [r3, #4]
 8000af4:	609a      	str	r2, [r3, #8]
 8000af6:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000af8:	4b3e      	ldr	r3, [pc, #248]	; (8000bf4 <MX_GPIO_Init+0x110>)
 8000afa:	699b      	ldr	r3, [r3, #24]
 8000afc:	4a3d      	ldr	r2, [pc, #244]	; (8000bf4 <MX_GPIO_Init+0x110>)
 8000afe:	f043 0310 	orr.w	r3, r3, #16
 8000b02:	6193      	str	r3, [r2, #24]
 8000b04:	4b3b      	ldr	r3, [pc, #236]	; (8000bf4 <MX_GPIO_Init+0x110>)
 8000b06:	699b      	ldr	r3, [r3, #24]
 8000b08:	f003 0310 	and.w	r3, r3, #16
 8000b0c:	60fb      	str	r3, [r7, #12]
 8000b0e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b10:	4b38      	ldr	r3, [pc, #224]	; (8000bf4 <MX_GPIO_Init+0x110>)
 8000b12:	699b      	ldr	r3, [r3, #24]
 8000b14:	4a37      	ldr	r2, [pc, #220]	; (8000bf4 <MX_GPIO_Init+0x110>)
 8000b16:	f043 0304 	orr.w	r3, r3, #4
 8000b1a:	6193      	str	r3, [r2, #24]
 8000b1c:	4b35      	ldr	r3, [pc, #212]	; (8000bf4 <MX_GPIO_Init+0x110>)
 8000b1e:	699b      	ldr	r3, [r3, #24]
 8000b20:	f003 0304 	and.w	r3, r3, #4
 8000b24:	60bb      	str	r3, [r7, #8]
 8000b26:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b28:	4b32      	ldr	r3, [pc, #200]	; (8000bf4 <MX_GPIO_Init+0x110>)
 8000b2a:	699b      	ldr	r3, [r3, #24]
 8000b2c:	4a31      	ldr	r2, [pc, #196]	; (8000bf4 <MX_GPIO_Init+0x110>)
 8000b2e:	f043 0308 	orr.w	r3, r3, #8
 8000b32:	6193      	str	r3, [r2, #24]
 8000b34:	4b2f      	ldr	r3, [pc, #188]	; (8000bf4 <MX_GPIO_Init+0x110>)
 8000b36:	699b      	ldr	r3, [r3, #24]
 8000b38:	f003 0308 	and.w	r3, r3, #8
 8000b3c:	607b      	str	r3, [r7, #4]
 8000b3e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GREEN1_Pin|AMBER1_Pin|SEG1_Pin, GPIO_PIN_RESET);
 8000b40:	2200      	movs	r2, #0
 8000b42:	2183      	movs	r1, #131	; 0x83
 8000b44:	482c      	ldr	r0, [pc, #176]	; (8000bf8 <MX_GPIO_Init+0x114>)
 8000b46:	f001 f816 	bl	8001b76 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RED2_Pin|AMBER2_Pin|GREEN2_Pin|SEG5_Pin
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	f240 21f3 	movw	r1, #755	; 0x2f3
 8000b50:	482a      	ldr	r0, [pc, #168]	; (8000bfc <MX_GPIO_Init+0x118>)
 8000b52:	f001 f810 	bl	8001b76 <HAL_GPIO_WritePin>
                          |SEG4_Pin|SEG3_Pin|SEG0_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RED1_Pin|SEG2_Pin|SEG6_Pin, GPIO_PIN_RESET);
 8000b56:	2200      	movs	r2, #0
 8000b58:	f240 2141 	movw	r1, #577	; 0x241
 8000b5c:	4828      	ldr	r0, [pc, #160]	; (8000c00 <MX_GPIO_Init+0x11c>)
 8000b5e:	f001 f80a 	bl	8001b76 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : GREEN1_Pin AMBER1_Pin SEG1_Pin */
  GPIO_InitStruct.Pin = GREEN1_Pin|AMBER1_Pin|SEG1_Pin;
 8000b62:	2383      	movs	r3, #131	; 0x83
 8000b64:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b66:	2301      	movs	r3, #1
 8000b68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b6e:	2302      	movs	r3, #2
 8000b70:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b72:	f107 0310 	add.w	r3, r7, #16
 8000b76:	4619      	mov	r1, r3
 8000b78:	481f      	ldr	r0, [pc, #124]	; (8000bf8 <MX_GPIO_Init+0x114>)
 8000b7a:	f000 fe61 	bl	8001840 <HAL_GPIO_Init>

  /*Configure GPIO pins : RED2_Pin AMBER2_Pin GREEN2_Pin SEG5_Pin
                           SEG4_Pin SEG3_Pin SEG0_Pin */
  GPIO_InitStruct.Pin = RED2_Pin|AMBER2_Pin|GREEN2_Pin|SEG5_Pin
 8000b7e:	f240 23f3 	movw	r3, #755	; 0x2f3
 8000b82:	613b      	str	r3, [r7, #16]
                          |SEG4_Pin|SEG3_Pin|SEG0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b84:	2301      	movs	r3, #1
 8000b86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b8c:	2302      	movs	r3, #2
 8000b8e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b90:	f107 0310 	add.w	r3, r7, #16
 8000b94:	4619      	mov	r1, r3
 8000b96:	4819      	ldr	r0, [pc, #100]	; (8000bfc <MX_GPIO_Init+0x118>)
 8000b98:	f000 fe52 	bl	8001840 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN2_Pin BTN1_Pin BTN3_Pin */
  GPIO_InitStruct.Pin = BTN2_Pin|BTN1_Pin|BTN3_Pin;
 8000b9c:	f240 430c 	movw	r3, #1036	; 0x40c
 8000ba0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000baa:	f107 0310 	add.w	r3, r7, #16
 8000bae:	4619      	mov	r1, r3
 8000bb0:	4812      	ldr	r0, [pc, #72]	; (8000bfc <MX_GPIO_Init+0x118>)
 8000bb2:	f000 fe45 	bl	8001840 <HAL_GPIO_Init>

  /*Configure GPIO pins : RED1_Pin SEG2_Pin SEG6_Pin */
  GPIO_InitStruct.Pin = RED1_Pin|SEG2_Pin|SEG6_Pin;
 8000bb6:	f240 2341 	movw	r3, #577	; 0x241
 8000bba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bbc:	2301      	movs	r3, #1
 8000bbe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc4:	2302      	movs	r3, #2
 8000bc6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bc8:	f107 0310 	add.w	r3, r7, #16
 8000bcc:	4619      	mov	r1, r3
 8000bce:	480c      	ldr	r0, [pc, #48]	; (8000c00 <MX_GPIO_Init+0x11c>)
 8000bd0:	f000 fe36 	bl	8001840 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN4_Pin */
  GPIO_InitStruct.Pin = BTN4_Pin;
 8000bd4:	2308      	movs	r3, #8
 8000bd6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bdc:	2301      	movs	r3, #1
 8000bde:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BTN4_GPIO_Port, &GPIO_InitStruct);
 8000be0:	f107 0310 	add.w	r3, r7, #16
 8000be4:	4619      	mov	r1, r3
 8000be6:	4806      	ldr	r0, [pc, #24]	; (8000c00 <MX_GPIO_Init+0x11c>)
 8000be8:	f000 fe2a 	bl	8001840 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bec:	bf00      	nop
 8000bee:	3720      	adds	r7, #32
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	40021000 	.word	0x40021000
 8000bf8:	40011000 	.word	0x40011000
 8000bfc:	40010800 	.word	0x40010800
 8000c00:	40010c00 	.word	0x40010c00

08000c04 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b082      	sub	sp, #8
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
	updateTimer();
 8000c0c:	f7ff fe90 	bl	8000930 <updateTimer>
	buttonRead();
 8000c10:	f7ff fea1 	bl	8000956 <buttonRead>
}
 8000c14:	bf00      	nop
 8000c16:	3708      	adds	r7, #8
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}

08000c1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c20:	b672      	cpsid	i
}
 8000c22:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c24:	e7fe      	b.n	8000c24 <Error_Handler+0x8>
	...

08000c28 <setTimer>:
#include "software_timer.h"

int timer_counter[6] = {0, 0, 0, 0, 0, 0};
int timer_flag[6] = {0, 0, 0, 0, 0, 0};

void setTimer(int type, int duration){
 8000c28:	b480      	push	{r7}
 8000c2a:	b083      	sub	sp, #12
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
 8000c30:	6039      	str	r1, [r7, #0]
	timer_counter[type] = duration;
 8000c32:	4907      	ldr	r1, [pc, #28]	; (8000c50 <setTimer+0x28>)
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	683a      	ldr	r2, [r7, #0]
 8000c38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	timer_flag[type] = 0;
 8000c3c:	4a05      	ldr	r2, [pc, #20]	; (8000c54 <setTimer+0x2c>)
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	2100      	movs	r1, #0
 8000c42:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000c46:	bf00      	nop
 8000c48:	370c      	adds	r7, #12
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bc80      	pop	{r7}
 8000c4e:	4770      	bx	lr
 8000c50:	20000158 	.word	0x20000158
 8000c54:	20000170 	.word	0x20000170

08000c58 <timerRun>:

void timerRun(int type){
 8000c58:	b480      	push	{r7}
 8000c5a:	b083      	sub	sp, #12
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
	if(timer_counter[type] > 0){
 8000c60:	4a0f      	ldr	r2, [pc, #60]	; (8000ca0 <timerRun+0x48>)
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	dd13      	ble.n	8000c94 <timerRun+0x3c>
		timer_counter[type]--;
 8000c6c:	4a0c      	ldr	r2, [pc, #48]	; (8000ca0 <timerRun+0x48>)
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c74:	1e5a      	subs	r2, r3, #1
 8000c76:	490a      	ldr	r1, [pc, #40]	; (8000ca0 <timerRun+0x48>)
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		if(timer_counter[type] <= 0){
 8000c7e:	4a08      	ldr	r2, [pc, #32]	; (8000ca0 <timerRun+0x48>)
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	dc04      	bgt.n	8000c94 <timerRun+0x3c>
			timer_flag[type] = 1;
 8000c8a:	4a06      	ldr	r2, [pc, #24]	; (8000ca4 <timerRun+0x4c>)
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	2101      	movs	r1, #1
 8000c90:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		}
	}
}
 8000c94:	bf00      	nop
 8000c96:	370c      	adds	r7, #12
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bc80      	pop	{r7}
 8000c9c:	4770      	bx	lr
 8000c9e:	bf00      	nop
 8000ca0:	20000158 	.word	0x20000158
 8000ca4:	20000170 	.word	0x20000170

08000ca8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b085      	sub	sp, #20
 8000cac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000cae:	4b15      	ldr	r3, [pc, #84]	; (8000d04 <HAL_MspInit+0x5c>)
 8000cb0:	699b      	ldr	r3, [r3, #24]
 8000cb2:	4a14      	ldr	r2, [pc, #80]	; (8000d04 <HAL_MspInit+0x5c>)
 8000cb4:	f043 0301 	orr.w	r3, r3, #1
 8000cb8:	6193      	str	r3, [r2, #24]
 8000cba:	4b12      	ldr	r3, [pc, #72]	; (8000d04 <HAL_MspInit+0x5c>)
 8000cbc:	699b      	ldr	r3, [r3, #24]
 8000cbe:	f003 0301 	and.w	r3, r3, #1
 8000cc2:	60bb      	str	r3, [r7, #8]
 8000cc4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cc6:	4b0f      	ldr	r3, [pc, #60]	; (8000d04 <HAL_MspInit+0x5c>)
 8000cc8:	69db      	ldr	r3, [r3, #28]
 8000cca:	4a0e      	ldr	r2, [pc, #56]	; (8000d04 <HAL_MspInit+0x5c>)
 8000ccc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cd0:	61d3      	str	r3, [r2, #28]
 8000cd2:	4b0c      	ldr	r3, [pc, #48]	; (8000d04 <HAL_MspInit+0x5c>)
 8000cd4:	69db      	ldr	r3, [r3, #28]
 8000cd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cda:	607b      	str	r3, [r7, #4]
 8000cdc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000cde:	4b0a      	ldr	r3, [pc, #40]	; (8000d08 <HAL_MspInit+0x60>)
 8000ce0:	685b      	ldr	r3, [r3, #4]
 8000ce2:	60fb      	str	r3, [r7, #12]
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000cea:	60fb      	str	r3, [r7, #12]
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000cf2:	60fb      	str	r3, [r7, #12]
 8000cf4:	4a04      	ldr	r2, [pc, #16]	; (8000d08 <HAL_MspInit+0x60>)
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cfa:	bf00      	nop
 8000cfc:	3714      	adds	r7, #20
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bc80      	pop	{r7}
 8000d02:	4770      	bx	lr
 8000d04:	40021000 	.word	0x40021000
 8000d08:	40010000 	.word	0x40010000

08000d0c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b084      	sub	sp, #16
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d1c:	d113      	bne.n	8000d46 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d1e:	4b0c      	ldr	r3, [pc, #48]	; (8000d50 <HAL_TIM_Base_MspInit+0x44>)
 8000d20:	69db      	ldr	r3, [r3, #28]
 8000d22:	4a0b      	ldr	r2, [pc, #44]	; (8000d50 <HAL_TIM_Base_MspInit+0x44>)
 8000d24:	f043 0301 	orr.w	r3, r3, #1
 8000d28:	61d3      	str	r3, [r2, #28]
 8000d2a:	4b09      	ldr	r3, [pc, #36]	; (8000d50 <HAL_TIM_Base_MspInit+0x44>)
 8000d2c:	69db      	ldr	r3, [r3, #28]
 8000d2e:	f003 0301 	and.w	r3, r3, #1
 8000d32:	60fb      	str	r3, [r7, #12]
 8000d34:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000d36:	2200      	movs	r2, #0
 8000d38:	2100      	movs	r1, #0
 8000d3a:	201c      	movs	r0, #28
 8000d3c:	f000 fd49 	bl	80017d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000d40:	201c      	movs	r0, #28
 8000d42:	f000 fd62 	bl	800180a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000d46:	bf00      	nop
 8000d48:	3710      	adds	r7, #16
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	40021000 	.word	0x40021000

08000d54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d58:	e7fe      	b.n	8000d58 <NMI_Handler+0x4>

08000d5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d5a:	b480      	push	{r7}
 8000d5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d5e:	e7fe      	b.n	8000d5e <HardFault_Handler+0x4>

08000d60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d64:	e7fe      	b.n	8000d64 <MemManage_Handler+0x4>

08000d66 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d66:	b480      	push	{r7}
 8000d68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d6a:	e7fe      	b.n	8000d6a <BusFault_Handler+0x4>

08000d6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d70:	e7fe      	b.n	8000d70 <UsageFault_Handler+0x4>

08000d72 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d72:	b480      	push	{r7}
 8000d74:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d76:	bf00      	nop
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bc80      	pop	{r7}
 8000d7c:	4770      	bx	lr

08000d7e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d7e:	b480      	push	{r7}
 8000d80:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d82:	bf00      	nop
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bc80      	pop	{r7}
 8000d88:	4770      	bx	lr

08000d8a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d8a:	b480      	push	{r7}
 8000d8c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d8e:	bf00      	nop
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bc80      	pop	{r7}
 8000d94:	4770      	bx	lr

08000d96 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d96:	b580      	push	{r7, lr}
 8000d98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d9a:	f000 fc27 	bl	80015ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d9e:	bf00      	nop
 8000da0:	bd80      	pop	{r7, pc}
	...

08000da4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000da8:	4802      	ldr	r0, [pc, #8]	; (8000db4 <TIM2_IRQHandler+0x10>)
 8000daa:	f001 fb95 	bl	80024d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000dae:	bf00      	nop
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	20000110 	.word	0x20000110

08000db8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dbc:	bf00      	nop
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bc80      	pop	{r7}
 8000dc2:	4770      	bx	lr

08000dc4 <setTrafficLight>:
uint16_t REDLIGHT [2] = {RED1_Pin, RED2_Pin};
uint16_t GREENLIGHT [2] = {GREEN1_Pin, GREEN2_Pin};
uint16_t AMBERLIGHT [2] = {AMBER1_Pin, AMBER2_Pin};
GPIO_TypeDef * GPIO_Port [6] = {GPIOB, GPIOC, GPIOC, GPIOA, GPIOA, GPIOA};

void setTrafficLight(int lane, int light){
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b082      	sub	sp, #8
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
 8000dcc:	6039      	str	r1, [r7, #0]
	switch(light){
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	3b0c      	subs	r3, #12
 8000dd2:	2b0b      	cmp	r3, #11
 8000dd4:	f200 80dc 	bhi.w	8000f90 <setTrafficLight+0x1cc>
 8000dd8:	a201      	add	r2, pc, #4	; (adr r2, 8000de0 <setTrafficLight+0x1c>)
 8000dda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dde:	bf00      	nop
 8000de0:	08000f31 	.word	0x08000f31
 8000de4:	08000f91 	.word	0x08000f91
 8000de8:	08000f91 	.word	0x08000f91
 8000dec:	08000f91 	.word	0x08000f91
 8000df0:	08000f91 	.word	0x08000f91
 8000df4:	08000f91 	.word	0x08000f91
 8000df8:	08000f91 	.word	0x08000f91
 8000dfc:	08000f91 	.word	0x08000f91
 8000e00:	08000f91 	.word	0x08000f91
 8000e04:	08000e11 	.word	0x08000e11
 8000e08:	08000e71 	.word	0x08000e71
 8000e0c:	08000ed1 	.word	0x08000ed1
	case RED:
		HAL_GPIO_WritePin(GPIO_Port[lane*3], REDLIGHT[lane], RESET);
 8000e10:	687a      	ldr	r2, [r7, #4]
 8000e12:	4613      	mov	r3, r2
 8000e14:	005b      	lsls	r3, r3, #1
 8000e16:	4413      	add	r3, r2
 8000e18:	4a60      	ldr	r2, [pc, #384]	; (8000f9c <setTrafficLight+0x1d8>)
 8000e1a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000e1e:	4a60      	ldr	r2, [pc, #384]	; (8000fa0 <setTrafficLight+0x1dc>)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e26:	2200      	movs	r2, #0
 8000e28:	4619      	mov	r1, r3
 8000e2a:	f000 fea4 	bl	8001b76 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_Port[lane*3+1], GREENLIGHT[lane], SET);
 8000e2e:	687a      	ldr	r2, [r7, #4]
 8000e30:	4613      	mov	r3, r2
 8000e32:	005b      	lsls	r3, r3, #1
 8000e34:	4413      	add	r3, r2
 8000e36:	3301      	adds	r3, #1
 8000e38:	4a58      	ldr	r2, [pc, #352]	; (8000f9c <setTrafficLight+0x1d8>)
 8000e3a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000e3e:	4a59      	ldr	r2, [pc, #356]	; (8000fa4 <setTrafficLight+0x1e0>)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e46:	2201      	movs	r2, #1
 8000e48:	4619      	mov	r1, r3
 8000e4a:	f000 fe94 	bl	8001b76 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_Port[lane*3+2], AMBERLIGHT[lane], SET);
 8000e4e:	687a      	ldr	r2, [r7, #4]
 8000e50:	4613      	mov	r3, r2
 8000e52:	005b      	lsls	r3, r3, #1
 8000e54:	4413      	add	r3, r2
 8000e56:	3302      	adds	r3, #2
 8000e58:	4a50      	ldr	r2, [pc, #320]	; (8000f9c <setTrafficLight+0x1d8>)
 8000e5a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000e5e:	4a52      	ldr	r2, [pc, #328]	; (8000fa8 <setTrafficLight+0x1e4>)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e66:	2201      	movs	r2, #1
 8000e68:	4619      	mov	r1, r3
 8000e6a:	f000 fe84 	bl	8001b76 <HAL_GPIO_WritePin>
		break;
 8000e6e:	e090      	b.n	8000f92 <setTrafficLight+0x1ce>
	case AMBER:
		HAL_GPIO_WritePin(GPIO_Port[lane*3], REDLIGHT[lane], SET);
 8000e70:	687a      	ldr	r2, [r7, #4]
 8000e72:	4613      	mov	r3, r2
 8000e74:	005b      	lsls	r3, r3, #1
 8000e76:	4413      	add	r3, r2
 8000e78:	4a48      	ldr	r2, [pc, #288]	; (8000f9c <setTrafficLight+0x1d8>)
 8000e7a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000e7e:	4a48      	ldr	r2, [pc, #288]	; (8000fa0 <setTrafficLight+0x1dc>)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e86:	2201      	movs	r2, #1
 8000e88:	4619      	mov	r1, r3
 8000e8a:	f000 fe74 	bl	8001b76 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_Port[lane*3+1], GREENLIGHT[lane], SET);
 8000e8e:	687a      	ldr	r2, [r7, #4]
 8000e90:	4613      	mov	r3, r2
 8000e92:	005b      	lsls	r3, r3, #1
 8000e94:	4413      	add	r3, r2
 8000e96:	3301      	adds	r3, #1
 8000e98:	4a40      	ldr	r2, [pc, #256]	; (8000f9c <setTrafficLight+0x1d8>)
 8000e9a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000e9e:	4a41      	ldr	r2, [pc, #260]	; (8000fa4 <setTrafficLight+0x1e0>)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	f000 fe64 	bl	8001b76 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_Port[lane*3+2], AMBERLIGHT[lane], RESET);
 8000eae:	687a      	ldr	r2, [r7, #4]
 8000eb0:	4613      	mov	r3, r2
 8000eb2:	005b      	lsls	r3, r3, #1
 8000eb4:	4413      	add	r3, r2
 8000eb6:	3302      	adds	r3, #2
 8000eb8:	4a38      	ldr	r2, [pc, #224]	; (8000f9c <setTrafficLight+0x1d8>)
 8000eba:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000ebe:	4a3a      	ldr	r2, [pc, #232]	; (8000fa8 <setTrafficLight+0x1e4>)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	4619      	mov	r1, r3
 8000eca:	f000 fe54 	bl	8001b76 <HAL_GPIO_WritePin>
		break;
 8000ece:	e060      	b.n	8000f92 <setTrafficLight+0x1ce>
	case GREEN:
		HAL_GPIO_WritePin(GPIO_Port[lane*3], REDLIGHT[lane], SET);
 8000ed0:	687a      	ldr	r2, [r7, #4]
 8000ed2:	4613      	mov	r3, r2
 8000ed4:	005b      	lsls	r3, r3, #1
 8000ed6:	4413      	add	r3, r2
 8000ed8:	4a30      	ldr	r2, [pc, #192]	; (8000f9c <setTrafficLight+0x1d8>)
 8000eda:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000ede:	4a30      	ldr	r2, [pc, #192]	; (8000fa0 <setTrafficLight+0x1dc>)
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ee6:	2201      	movs	r2, #1
 8000ee8:	4619      	mov	r1, r3
 8000eea:	f000 fe44 	bl	8001b76 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_Port[lane*3+1], GREENLIGHT[lane], RESET);
 8000eee:	687a      	ldr	r2, [r7, #4]
 8000ef0:	4613      	mov	r3, r2
 8000ef2:	005b      	lsls	r3, r3, #1
 8000ef4:	4413      	add	r3, r2
 8000ef6:	3301      	adds	r3, #1
 8000ef8:	4a28      	ldr	r2, [pc, #160]	; (8000f9c <setTrafficLight+0x1d8>)
 8000efa:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000efe:	4a29      	ldr	r2, [pc, #164]	; (8000fa4 <setTrafficLight+0x1e0>)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f06:	2200      	movs	r2, #0
 8000f08:	4619      	mov	r1, r3
 8000f0a:	f000 fe34 	bl	8001b76 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_Port[lane*3+2], AMBERLIGHT[lane], SET);
 8000f0e:	687a      	ldr	r2, [r7, #4]
 8000f10:	4613      	mov	r3, r2
 8000f12:	005b      	lsls	r3, r3, #1
 8000f14:	4413      	add	r3, r2
 8000f16:	3302      	adds	r3, #2
 8000f18:	4a20      	ldr	r2, [pc, #128]	; (8000f9c <setTrafficLight+0x1d8>)
 8000f1a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000f1e:	4a22      	ldr	r2, [pc, #136]	; (8000fa8 <setTrafficLight+0x1e4>)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f26:	2201      	movs	r2, #1
 8000f28:	4619      	mov	r1, r3
 8000f2a:	f000 fe24 	bl	8001b76 <HAL_GPIO_WritePin>
		break;
 8000f2e:	e030      	b.n	8000f92 <setTrafficLight+0x1ce>
	case OFF:
		HAL_GPIO_WritePin(GPIO_Port[lane*3], REDLIGHT[lane], SET);
 8000f30:	687a      	ldr	r2, [r7, #4]
 8000f32:	4613      	mov	r3, r2
 8000f34:	005b      	lsls	r3, r3, #1
 8000f36:	4413      	add	r3, r2
 8000f38:	4a18      	ldr	r2, [pc, #96]	; (8000f9c <setTrafficLight+0x1d8>)
 8000f3a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000f3e:	4a18      	ldr	r2, [pc, #96]	; (8000fa0 <setTrafficLight+0x1dc>)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f46:	2201      	movs	r2, #1
 8000f48:	4619      	mov	r1, r3
 8000f4a:	f000 fe14 	bl	8001b76 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_Port[lane*3+1], GREENLIGHT[lane], SET);
 8000f4e:	687a      	ldr	r2, [r7, #4]
 8000f50:	4613      	mov	r3, r2
 8000f52:	005b      	lsls	r3, r3, #1
 8000f54:	4413      	add	r3, r2
 8000f56:	3301      	adds	r3, #1
 8000f58:	4a10      	ldr	r2, [pc, #64]	; (8000f9c <setTrafficLight+0x1d8>)
 8000f5a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000f5e:	4a11      	ldr	r2, [pc, #68]	; (8000fa4 <setTrafficLight+0x1e0>)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f66:	2201      	movs	r2, #1
 8000f68:	4619      	mov	r1, r3
 8000f6a:	f000 fe04 	bl	8001b76 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_Port[lane*3+2], AMBERLIGHT[lane], SET);
 8000f6e:	687a      	ldr	r2, [r7, #4]
 8000f70:	4613      	mov	r3, r2
 8000f72:	005b      	lsls	r3, r3, #1
 8000f74:	4413      	add	r3, r2
 8000f76:	3302      	adds	r3, #2
 8000f78:	4a08      	ldr	r2, [pc, #32]	; (8000f9c <setTrafficLight+0x1d8>)
 8000f7a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000f7e:	4a0a      	ldr	r2, [pc, #40]	; (8000fa8 <setTrafficLight+0x1e4>)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f86:	2201      	movs	r2, #1
 8000f88:	4619      	mov	r1, r3
 8000f8a:	f000 fdf4 	bl	8001b76 <HAL_GPIO_WritePin>
		break;
 8000f8e:	e000      	b.n	8000f92 <setTrafficLight+0x1ce>
	default:
		break;
 8000f90:	bf00      	nop
	}

}
 8000f92:	bf00      	nop
 8000f94:	3708      	adds	r7, #8
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	200000c0 	.word	0x200000c0
 8000fa0:	200000b4 	.word	0x200000b4
 8000fa4:	200000b8 	.word	0x200000b8
 8000fa8:	200000bc 	.word	0x200000bc

08000fac <toggleLight>:

void toggleLight(int lane, int light){
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
 8000fb4:	6039      	str	r1, [r7, #0]
	switch (light){
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	2b17      	cmp	r3, #23
 8000fba:	d06a      	beq.n	8001092 <toggleLight+0xe6>
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	2b17      	cmp	r3, #23
 8000fc0:	f300 8097 	bgt.w	80010f2 <toggleLight+0x146>
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	2b15      	cmp	r3, #21
 8000fc8:	d003      	beq.n	8000fd2 <toggleLight+0x26>
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	2b16      	cmp	r3, #22
 8000fce:	d030      	beq.n	8001032 <toggleLight+0x86>
			HAL_GPIO_WritePin(GPIO_Port[lane*3], REDLIGHT[lane], SET);
			HAL_GPIO_TogglePin(GPIO_Port[lane*3+1], GREENLIGHT[lane]);
			HAL_GPIO_WritePin(GPIO_Port[lane*3+2], AMBERLIGHT[lane], SET);
			break;
		default:
			break;
 8000fd0:	e08f      	b.n	80010f2 <toggleLight+0x146>
			HAL_GPIO_TogglePin(GPIO_Port[lane*3], REDLIGHT[lane]);
 8000fd2:	687a      	ldr	r2, [r7, #4]
 8000fd4:	4613      	mov	r3, r2
 8000fd6:	005b      	lsls	r3, r3, #1
 8000fd8:	4413      	add	r3, r2
 8000fda:	4a48      	ldr	r2, [pc, #288]	; (80010fc <toggleLight+0x150>)
 8000fdc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000fe0:	4947      	ldr	r1, [pc, #284]	; (8001100 <toggleLight+0x154>)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000fe8:	4619      	mov	r1, r3
 8000fea:	4610      	mov	r0, r2
 8000fec:	f000 fddb 	bl	8001ba6 <HAL_GPIO_TogglePin>
			HAL_GPIO_WritePin(GPIO_Port[lane*3+1], GREENLIGHT[lane], SET);
 8000ff0:	687a      	ldr	r2, [r7, #4]
 8000ff2:	4613      	mov	r3, r2
 8000ff4:	005b      	lsls	r3, r3, #1
 8000ff6:	4413      	add	r3, r2
 8000ff8:	3301      	adds	r3, #1
 8000ffa:	4a40      	ldr	r2, [pc, #256]	; (80010fc <toggleLight+0x150>)
 8000ffc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001000:	4a40      	ldr	r2, [pc, #256]	; (8001104 <toggleLight+0x158>)
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001008:	2201      	movs	r2, #1
 800100a:	4619      	mov	r1, r3
 800100c:	f000 fdb3 	bl	8001b76 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO_Port[lane*3+2], AMBERLIGHT[lane], SET);
 8001010:	687a      	ldr	r2, [r7, #4]
 8001012:	4613      	mov	r3, r2
 8001014:	005b      	lsls	r3, r3, #1
 8001016:	4413      	add	r3, r2
 8001018:	3302      	adds	r3, #2
 800101a:	4a38      	ldr	r2, [pc, #224]	; (80010fc <toggleLight+0x150>)
 800101c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001020:	4a39      	ldr	r2, [pc, #228]	; (8001108 <toggleLight+0x15c>)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001028:	2201      	movs	r2, #1
 800102a:	4619      	mov	r1, r3
 800102c:	f000 fda3 	bl	8001b76 <HAL_GPIO_WritePin>
			break;
 8001030:	e060      	b.n	80010f4 <toggleLight+0x148>
			HAL_GPIO_WritePin(GPIO_Port[lane*3], REDLIGHT[lane], SET);
 8001032:	687a      	ldr	r2, [r7, #4]
 8001034:	4613      	mov	r3, r2
 8001036:	005b      	lsls	r3, r3, #1
 8001038:	4413      	add	r3, r2
 800103a:	4a30      	ldr	r2, [pc, #192]	; (80010fc <toggleLight+0x150>)
 800103c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001040:	4a2f      	ldr	r2, [pc, #188]	; (8001100 <toggleLight+0x154>)
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001048:	2201      	movs	r2, #1
 800104a:	4619      	mov	r1, r3
 800104c:	f000 fd93 	bl	8001b76 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIO_Port[lane*3+1], GREENLIGHT[lane], SET);
 8001050:	687a      	ldr	r2, [r7, #4]
 8001052:	4613      	mov	r3, r2
 8001054:	005b      	lsls	r3, r3, #1
 8001056:	4413      	add	r3, r2
 8001058:	3301      	adds	r3, #1
 800105a:	4a28      	ldr	r2, [pc, #160]	; (80010fc <toggleLight+0x150>)
 800105c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001060:	4a28      	ldr	r2, [pc, #160]	; (8001104 <toggleLight+0x158>)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001068:	2201      	movs	r2, #1
 800106a:	4619      	mov	r1, r3
 800106c:	f000 fd83 	bl	8001b76 <HAL_GPIO_WritePin>
			HAL_GPIO_TogglePin(GPIO_Port[lane*3+2], AMBERLIGHT[lane]);
 8001070:	687a      	ldr	r2, [r7, #4]
 8001072:	4613      	mov	r3, r2
 8001074:	005b      	lsls	r3, r3, #1
 8001076:	4413      	add	r3, r2
 8001078:	3302      	adds	r3, #2
 800107a:	4a20      	ldr	r2, [pc, #128]	; (80010fc <toggleLight+0x150>)
 800107c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001080:	4921      	ldr	r1, [pc, #132]	; (8001108 <toggleLight+0x15c>)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001088:	4619      	mov	r1, r3
 800108a:	4610      	mov	r0, r2
 800108c:	f000 fd8b 	bl	8001ba6 <HAL_GPIO_TogglePin>
			break;
 8001090:	e030      	b.n	80010f4 <toggleLight+0x148>
			HAL_GPIO_WritePin(GPIO_Port[lane*3], REDLIGHT[lane], SET);
 8001092:	687a      	ldr	r2, [r7, #4]
 8001094:	4613      	mov	r3, r2
 8001096:	005b      	lsls	r3, r3, #1
 8001098:	4413      	add	r3, r2
 800109a:	4a18      	ldr	r2, [pc, #96]	; (80010fc <toggleLight+0x150>)
 800109c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80010a0:	4a17      	ldr	r2, [pc, #92]	; (8001100 <toggleLight+0x154>)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80010a8:	2201      	movs	r2, #1
 80010aa:	4619      	mov	r1, r3
 80010ac:	f000 fd63 	bl	8001b76 <HAL_GPIO_WritePin>
			HAL_GPIO_TogglePin(GPIO_Port[lane*3+1], GREENLIGHT[lane]);
 80010b0:	687a      	ldr	r2, [r7, #4]
 80010b2:	4613      	mov	r3, r2
 80010b4:	005b      	lsls	r3, r3, #1
 80010b6:	4413      	add	r3, r2
 80010b8:	3301      	adds	r3, #1
 80010ba:	4a10      	ldr	r2, [pc, #64]	; (80010fc <toggleLight+0x150>)
 80010bc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80010c0:	4910      	ldr	r1, [pc, #64]	; (8001104 <toggleLight+0x158>)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80010c8:	4619      	mov	r1, r3
 80010ca:	4610      	mov	r0, r2
 80010cc:	f000 fd6b 	bl	8001ba6 <HAL_GPIO_TogglePin>
			HAL_GPIO_WritePin(GPIO_Port[lane*3+2], AMBERLIGHT[lane], SET);
 80010d0:	687a      	ldr	r2, [r7, #4]
 80010d2:	4613      	mov	r3, r2
 80010d4:	005b      	lsls	r3, r3, #1
 80010d6:	4413      	add	r3, r2
 80010d8:	3302      	adds	r3, #2
 80010da:	4a08      	ldr	r2, [pc, #32]	; (80010fc <toggleLight+0x150>)
 80010dc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80010e0:	4a09      	ldr	r2, [pc, #36]	; (8001108 <toggleLight+0x15c>)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80010e8:	2201      	movs	r2, #1
 80010ea:	4619      	mov	r1, r3
 80010ec:	f000 fd43 	bl	8001b76 <HAL_GPIO_WritePin>
			break;
 80010f0:	e000      	b.n	80010f4 <toggleLight+0x148>
			break;
 80010f2:	bf00      	nop
	}
}
 80010f4:	bf00      	nop
 80010f6:	3708      	adds	r7, #8
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	200000c0 	.word	0x200000c0
 8001100:	200000b4 	.word	0x200000b4
 8001104:	200000b8 	.word	0x200000b8
 8001108:	200000bc 	.word	0x200000bc

0800110c <display7SEG>:



void display7SEG(int num){
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  switch(num){
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	2b0e      	cmp	r3, #14
 8001118:	f200 81f0 	bhi.w	80014fc <display7SEG+0x3f0>
 800111c:	a201      	add	r2, pc, #4	; (adr r2, 8001124 <display7SEG+0x18>)
 800111e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001122:	bf00      	nop
 8001124:	08001161 	.word	0x08001161
 8001128:	080011ad 	.word	0x080011ad
 800112c:	080011f9 	.word	0x080011f9
 8001130:	08001245 	.word	0x08001245
 8001134:	08001291 	.word	0x08001291
 8001138:	080012dd 	.word	0x080012dd
 800113c:	08001329 	.word	0x08001329
 8001140:	08001375 	.word	0x08001375
 8001144:	080013c1 	.word	0x080013c1
 8001148:	0800140d 	.word	0x0800140d
 800114c:	080014fd 	.word	0x080014fd
 8001150:	080014fd 	.word	0x080014fd
 8001154:	08001459 	.word	0x08001459
 8001158:	080014fd 	.word	0x080014fd
 800115c:	080014b1 	.word	0x080014b1
	case 0:
	  HAL_GPIO_WritePin(GPIOA, SEG0_Pin, RESET);
 8001160:	2200      	movs	r2, #0
 8001162:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001166:	48cf      	ldr	r0, [pc, #828]	; (80014a4 <display7SEG+0x398>)
 8001168:	f000 fd05 	bl	8001b76 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, SEG1_Pin, RESET);
 800116c:	2200      	movs	r2, #0
 800116e:	2180      	movs	r1, #128	; 0x80
 8001170:	48cd      	ldr	r0, [pc, #820]	; (80014a8 <display7SEG+0x39c>)
 8001172:	f000 fd00 	bl	8001b76 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, SEG2_Pin, RESET);
 8001176:	2200      	movs	r2, #0
 8001178:	2140      	movs	r1, #64	; 0x40
 800117a:	48cc      	ldr	r0, [pc, #816]	; (80014ac <display7SEG+0x3a0>)
 800117c:	f000 fcfb 	bl	8001b76 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, SEG3_Pin, RESET);
 8001180:	2200      	movs	r2, #0
 8001182:	2180      	movs	r1, #128	; 0x80
 8001184:	48c7      	ldr	r0, [pc, #796]	; (80014a4 <display7SEG+0x398>)
 8001186:	f000 fcf6 	bl	8001b76 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, SEG4_Pin, RESET);
 800118a:	2200      	movs	r2, #0
 800118c:	2140      	movs	r1, #64	; 0x40
 800118e:	48c5      	ldr	r0, [pc, #788]	; (80014a4 <display7SEG+0x398>)
 8001190:	f000 fcf1 	bl	8001b76 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, SEG5_Pin, RESET);
 8001194:	2200      	movs	r2, #0
 8001196:	2120      	movs	r1, #32
 8001198:	48c2      	ldr	r0, [pc, #776]	; (80014a4 <display7SEG+0x398>)
 800119a:	f000 fcec 	bl	8001b76 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, SEG6_Pin, SET);
 800119e:	2201      	movs	r2, #1
 80011a0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011a4:	48c1      	ldr	r0, [pc, #772]	; (80014ac <display7SEG+0x3a0>)
 80011a6:	f000 fce6 	bl	8001b76 <HAL_GPIO_WritePin>
	  break;
 80011aa:	e1a8      	b.n	80014fe <display7SEG+0x3f2>
	case 1:
	  HAL_GPIO_WritePin(GPIOA, SEG0_Pin, SET);
 80011ac:	2201      	movs	r2, #1
 80011ae:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011b2:	48bc      	ldr	r0, [pc, #752]	; (80014a4 <display7SEG+0x398>)
 80011b4:	f000 fcdf 	bl	8001b76 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, SEG1_Pin, RESET);
 80011b8:	2200      	movs	r2, #0
 80011ba:	2180      	movs	r1, #128	; 0x80
 80011bc:	48ba      	ldr	r0, [pc, #744]	; (80014a8 <display7SEG+0x39c>)
 80011be:	f000 fcda 	bl	8001b76 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, SEG2_Pin, RESET);
 80011c2:	2200      	movs	r2, #0
 80011c4:	2140      	movs	r1, #64	; 0x40
 80011c6:	48b9      	ldr	r0, [pc, #740]	; (80014ac <display7SEG+0x3a0>)
 80011c8:	f000 fcd5 	bl	8001b76 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, SEG3_Pin, SET);
 80011cc:	2201      	movs	r2, #1
 80011ce:	2180      	movs	r1, #128	; 0x80
 80011d0:	48b4      	ldr	r0, [pc, #720]	; (80014a4 <display7SEG+0x398>)
 80011d2:	f000 fcd0 	bl	8001b76 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, SEG4_Pin, SET);
 80011d6:	2201      	movs	r2, #1
 80011d8:	2140      	movs	r1, #64	; 0x40
 80011da:	48b2      	ldr	r0, [pc, #712]	; (80014a4 <display7SEG+0x398>)
 80011dc:	f000 fccb 	bl	8001b76 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, SEG5_Pin, SET);
 80011e0:	2201      	movs	r2, #1
 80011e2:	2120      	movs	r1, #32
 80011e4:	48af      	ldr	r0, [pc, #700]	; (80014a4 <display7SEG+0x398>)
 80011e6:	f000 fcc6 	bl	8001b76 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, SEG6_Pin, SET);
 80011ea:	2201      	movs	r2, #1
 80011ec:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011f0:	48ae      	ldr	r0, [pc, #696]	; (80014ac <display7SEG+0x3a0>)
 80011f2:	f000 fcc0 	bl	8001b76 <HAL_GPIO_WritePin>
	  break;
 80011f6:	e182      	b.n	80014fe <display7SEG+0x3f2>
	case 2:
	  HAL_GPIO_WritePin(GPIOA, SEG0_Pin, RESET);
 80011f8:	2200      	movs	r2, #0
 80011fa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011fe:	48a9      	ldr	r0, [pc, #676]	; (80014a4 <display7SEG+0x398>)
 8001200:	f000 fcb9 	bl	8001b76 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, SEG1_Pin, RESET);
 8001204:	2200      	movs	r2, #0
 8001206:	2180      	movs	r1, #128	; 0x80
 8001208:	48a7      	ldr	r0, [pc, #668]	; (80014a8 <display7SEG+0x39c>)
 800120a:	f000 fcb4 	bl	8001b76 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, SEG2_Pin, SET);
 800120e:	2201      	movs	r2, #1
 8001210:	2140      	movs	r1, #64	; 0x40
 8001212:	48a6      	ldr	r0, [pc, #664]	; (80014ac <display7SEG+0x3a0>)
 8001214:	f000 fcaf 	bl	8001b76 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, SEG3_Pin, RESET);
 8001218:	2200      	movs	r2, #0
 800121a:	2180      	movs	r1, #128	; 0x80
 800121c:	48a1      	ldr	r0, [pc, #644]	; (80014a4 <display7SEG+0x398>)
 800121e:	f000 fcaa 	bl	8001b76 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, SEG4_Pin, RESET);
 8001222:	2200      	movs	r2, #0
 8001224:	2140      	movs	r1, #64	; 0x40
 8001226:	489f      	ldr	r0, [pc, #636]	; (80014a4 <display7SEG+0x398>)
 8001228:	f000 fca5 	bl	8001b76 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, SEG5_Pin, SET);
 800122c:	2201      	movs	r2, #1
 800122e:	2120      	movs	r1, #32
 8001230:	489c      	ldr	r0, [pc, #624]	; (80014a4 <display7SEG+0x398>)
 8001232:	f000 fca0 	bl	8001b76 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, SEG6_Pin, RESET);
 8001236:	2200      	movs	r2, #0
 8001238:	f44f 7100 	mov.w	r1, #512	; 0x200
 800123c:	489b      	ldr	r0, [pc, #620]	; (80014ac <display7SEG+0x3a0>)
 800123e:	f000 fc9a 	bl	8001b76 <HAL_GPIO_WritePin>
	  break;
 8001242:	e15c      	b.n	80014fe <display7SEG+0x3f2>
	case 3:
	  HAL_GPIO_WritePin(GPIOA, SEG0_Pin, RESET);
 8001244:	2200      	movs	r2, #0
 8001246:	f44f 7100 	mov.w	r1, #512	; 0x200
 800124a:	4896      	ldr	r0, [pc, #600]	; (80014a4 <display7SEG+0x398>)
 800124c:	f000 fc93 	bl	8001b76 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, SEG1_Pin, RESET);
 8001250:	2200      	movs	r2, #0
 8001252:	2180      	movs	r1, #128	; 0x80
 8001254:	4894      	ldr	r0, [pc, #592]	; (80014a8 <display7SEG+0x39c>)
 8001256:	f000 fc8e 	bl	8001b76 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, SEG2_Pin, RESET);
 800125a:	2200      	movs	r2, #0
 800125c:	2140      	movs	r1, #64	; 0x40
 800125e:	4893      	ldr	r0, [pc, #588]	; (80014ac <display7SEG+0x3a0>)
 8001260:	f000 fc89 	bl	8001b76 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, SEG3_Pin, RESET);
 8001264:	2200      	movs	r2, #0
 8001266:	2180      	movs	r1, #128	; 0x80
 8001268:	488e      	ldr	r0, [pc, #568]	; (80014a4 <display7SEG+0x398>)
 800126a:	f000 fc84 	bl	8001b76 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, SEG4_Pin, SET);
 800126e:	2201      	movs	r2, #1
 8001270:	2140      	movs	r1, #64	; 0x40
 8001272:	488c      	ldr	r0, [pc, #560]	; (80014a4 <display7SEG+0x398>)
 8001274:	f000 fc7f 	bl	8001b76 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, SEG5_Pin, SET);
 8001278:	2201      	movs	r2, #1
 800127a:	2120      	movs	r1, #32
 800127c:	4889      	ldr	r0, [pc, #548]	; (80014a4 <display7SEG+0x398>)
 800127e:	f000 fc7a 	bl	8001b76 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, SEG6_Pin, RESET);
 8001282:	2200      	movs	r2, #0
 8001284:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001288:	4888      	ldr	r0, [pc, #544]	; (80014ac <display7SEG+0x3a0>)
 800128a:	f000 fc74 	bl	8001b76 <HAL_GPIO_WritePin>
	  break;
 800128e:	e136      	b.n	80014fe <display7SEG+0x3f2>
	case 4:
	  HAL_GPIO_WritePin(GPIOA, SEG0_Pin, SET);
 8001290:	2201      	movs	r2, #1
 8001292:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001296:	4883      	ldr	r0, [pc, #524]	; (80014a4 <display7SEG+0x398>)
 8001298:	f000 fc6d 	bl	8001b76 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, SEG1_Pin, RESET);
 800129c:	2200      	movs	r2, #0
 800129e:	2180      	movs	r1, #128	; 0x80
 80012a0:	4881      	ldr	r0, [pc, #516]	; (80014a8 <display7SEG+0x39c>)
 80012a2:	f000 fc68 	bl	8001b76 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, SEG2_Pin, RESET);
 80012a6:	2200      	movs	r2, #0
 80012a8:	2140      	movs	r1, #64	; 0x40
 80012aa:	4880      	ldr	r0, [pc, #512]	; (80014ac <display7SEG+0x3a0>)
 80012ac:	f000 fc63 	bl	8001b76 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, SEG3_Pin, SET);
 80012b0:	2201      	movs	r2, #1
 80012b2:	2180      	movs	r1, #128	; 0x80
 80012b4:	487b      	ldr	r0, [pc, #492]	; (80014a4 <display7SEG+0x398>)
 80012b6:	f000 fc5e 	bl	8001b76 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, SEG4_Pin, SET);
 80012ba:	2201      	movs	r2, #1
 80012bc:	2140      	movs	r1, #64	; 0x40
 80012be:	4879      	ldr	r0, [pc, #484]	; (80014a4 <display7SEG+0x398>)
 80012c0:	f000 fc59 	bl	8001b76 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, SEG5_Pin, RESET);
 80012c4:	2200      	movs	r2, #0
 80012c6:	2120      	movs	r1, #32
 80012c8:	4876      	ldr	r0, [pc, #472]	; (80014a4 <display7SEG+0x398>)
 80012ca:	f000 fc54 	bl	8001b76 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, SEG6_Pin, RESET);
 80012ce:	2200      	movs	r2, #0
 80012d0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012d4:	4875      	ldr	r0, [pc, #468]	; (80014ac <display7SEG+0x3a0>)
 80012d6:	f000 fc4e 	bl	8001b76 <HAL_GPIO_WritePin>
	  break;
 80012da:	e110      	b.n	80014fe <display7SEG+0x3f2>
	case 5:
	  HAL_GPIO_WritePin(GPIOA, SEG0_Pin, RESET);
 80012dc:	2200      	movs	r2, #0
 80012de:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012e2:	4870      	ldr	r0, [pc, #448]	; (80014a4 <display7SEG+0x398>)
 80012e4:	f000 fc47 	bl	8001b76 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, SEG1_Pin, SET);
 80012e8:	2201      	movs	r2, #1
 80012ea:	2180      	movs	r1, #128	; 0x80
 80012ec:	486e      	ldr	r0, [pc, #440]	; (80014a8 <display7SEG+0x39c>)
 80012ee:	f000 fc42 	bl	8001b76 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, SEG2_Pin, RESET);
 80012f2:	2200      	movs	r2, #0
 80012f4:	2140      	movs	r1, #64	; 0x40
 80012f6:	486d      	ldr	r0, [pc, #436]	; (80014ac <display7SEG+0x3a0>)
 80012f8:	f000 fc3d 	bl	8001b76 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, SEG3_Pin, RESET);
 80012fc:	2200      	movs	r2, #0
 80012fe:	2180      	movs	r1, #128	; 0x80
 8001300:	4868      	ldr	r0, [pc, #416]	; (80014a4 <display7SEG+0x398>)
 8001302:	f000 fc38 	bl	8001b76 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, SEG4_Pin, SET);
 8001306:	2201      	movs	r2, #1
 8001308:	2140      	movs	r1, #64	; 0x40
 800130a:	4866      	ldr	r0, [pc, #408]	; (80014a4 <display7SEG+0x398>)
 800130c:	f000 fc33 	bl	8001b76 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, SEG5_Pin, RESET);
 8001310:	2200      	movs	r2, #0
 8001312:	2120      	movs	r1, #32
 8001314:	4863      	ldr	r0, [pc, #396]	; (80014a4 <display7SEG+0x398>)
 8001316:	f000 fc2e 	bl	8001b76 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, SEG6_Pin, RESET);
 800131a:	2200      	movs	r2, #0
 800131c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001320:	4862      	ldr	r0, [pc, #392]	; (80014ac <display7SEG+0x3a0>)
 8001322:	f000 fc28 	bl	8001b76 <HAL_GPIO_WritePin>
	  break;
 8001326:	e0ea      	b.n	80014fe <display7SEG+0x3f2>
	case 6:
	  HAL_GPIO_WritePin(GPIOA, SEG0_Pin, RESET);
 8001328:	2200      	movs	r2, #0
 800132a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800132e:	485d      	ldr	r0, [pc, #372]	; (80014a4 <display7SEG+0x398>)
 8001330:	f000 fc21 	bl	8001b76 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, SEG1_Pin, SET);
 8001334:	2201      	movs	r2, #1
 8001336:	2180      	movs	r1, #128	; 0x80
 8001338:	485b      	ldr	r0, [pc, #364]	; (80014a8 <display7SEG+0x39c>)
 800133a:	f000 fc1c 	bl	8001b76 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, SEG2_Pin, RESET);
 800133e:	2200      	movs	r2, #0
 8001340:	2140      	movs	r1, #64	; 0x40
 8001342:	485a      	ldr	r0, [pc, #360]	; (80014ac <display7SEG+0x3a0>)
 8001344:	f000 fc17 	bl	8001b76 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, SEG3_Pin, RESET);
 8001348:	2200      	movs	r2, #0
 800134a:	2180      	movs	r1, #128	; 0x80
 800134c:	4855      	ldr	r0, [pc, #340]	; (80014a4 <display7SEG+0x398>)
 800134e:	f000 fc12 	bl	8001b76 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, SEG4_Pin, RESET);
 8001352:	2200      	movs	r2, #0
 8001354:	2140      	movs	r1, #64	; 0x40
 8001356:	4853      	ldr	r0, [pc, #332]	; (80014a4 <display7SEG+0x398>)
 8001358:	f000 fc0d 	bl	8001b76 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, SEG5_Pin, RESET);
 800135c:	2200      	movs	r2, #0
 800135e:	2120      	movs	r1, #32
 8001360:	4850      	ldr	r0, [pc, #320]	; (80014a4 <display7SEG+0x398>)
 8001362:	f000 fc08 	bl	8001b76 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, SEG6_Pin, RESET);
 8001366:	2200      	movs	r2, #0
 8001368:	f44f 7100 	mov.w	r1, #512	; 0x200
 800136c:	484f      	ldr	r0, [pc, #316]	; (80014ac <display7SEG+0x3a0>)
 800136e:	f000 fc02 	bl	8001b76 <HAL_GPIO_WritePin>
	  break;
 8001372:	e0c4      	b.n	80014fe <display7SEG+0x3f2>
	case 7:
	  HAL_GPIO_WritePin(GPIOA, SEG0_Pin, RESET);
 8001374:	2200      	movs	r2, #0
 8001376:	f44f 7100 	mov.w	r1, #512	; 0x200
 800137a:	484a      	ldr	r0, [pc, #296]	; (80014a4 <display7SEG+0x398>)
 800137c:	f000 fbfb 	bl	8001b76 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, SEG1_Pin, RESET);
 8001380:	2200      	movs	r2, #0
 8001382:	2180      	movs	r1, #128	; 0x80
 8001384:	4848      	ldr	r0, [pc, #288]	; (80014a8 <display7SEG+0x39c>)
 8001386:	f000 fbf6 	bl	8001b76 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, SEG2_Pin, RESET);
 800138a:	2200      	movs	r2, #0
 800138c:	2140      	movs	r1, #64	; 0x40
 800138e:	4847      	ldr	r0, [pc, #284]	; (80014ac <display7SEG+0x3a0>)
 8001390:	f000 fbf1 	bl	8001b76 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, SEG3_Pin, SET);
 8001394:	2201      	movs	r2, #1
 8001396:	2180      	movs	r1, #128	; 0x80
 8001398:	4842      	ldr	r0, [pc, #264]	; (80014a4 <display7SEG+0x398>)
 800139a:	f000 fbec 	bl	8001b76 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, SEG4_Pin, SET);
 800139e:	2201      	movs	r2, #1
 80013a0:	2140      	movs	r1, #64	; 0x40
 80013a2:	4840      	ldr	r0, [pc, #256]	; (80014a4 <display7SEG+0x398>)
 80013a4:	f000 fbe7 	bl	8001b76 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, SEG5_Pin, SET);
 80013a8:	2201      	movs	r2, #1
 80013aa:	2120      	movs	r1, #32
 80013ac:	483d      	ldr	r0, [pc, #244]	; (80014a4 <display7SEG+0x398>)
 80013ae:	f000 fbe2 	bl	8001b76 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, SEG6_Pin, SET);
 80013b2:	2201      	movs	r2, #1
 80013b4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013b8:	483c      	ldr	r0, [pc, #240]	; (80014ac <display7SEG+0x3a0>)
 80013ba:	f000 fbdc 	bl	8001b76 <HAL_GPIO_WritePin>
	  break;
 80013be:	e09e      	b.n	80014fe <display7SEG+0x3f2>
	case 8:
	  HAL_GPIO_WritePin(GPIOA, SEG0_Pin, RESET);
 80013c0:	2200      	movs	r2, #0
 80013c2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80013c6:	4837      	ldr	r0, [pc, #220]	; (80014a4 <display7SEG+0x398>)
 80013c8:	f000 fbd5 	bl	8001b76 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, SEG1_Pin, RESET);
 80013cc:	2200      	movs	r2, #0
 80013ce:	2180      	movs	r1, #128	; 0x80
 80013d0:	4835      	ldr	r0, [pc, #212]	; (80014a8 <display7SEG+0x39c>)
 80013d2:	f000 fbd0 	bl	8001b76 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, SEG2_Pin, RESET);
 80013d6:	2200      	movs	r2, #0
 80013d8:	2140      	movs	r1, #64	; 0x40
 80013da:	4834      	ldr	r0, [pc, #208]	; (80014ac <display7SEG+0x3a0>)
 80013dc:	f000 fbcb 	bl	8001b76 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, SEG3_Pin, RESET);
 80013e0:	2200      	movs	r2, #0
 80013e2:	2180      	movs	r1, #128	; 0x80
 80013e4:	482f      	ldr	r0, [pc, #188]	; (80014a4 <display7SEG+0x398>)
 80013e6:	f000 fbc6 	bl	8001b76 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, SEG4_Pin, RESET);
 80013ea:	2200      	movs	r2, #0
 80013ec:	2140      	movs	r1, #64	; 0x40
 80013ee:	482d      	ldr	r0, [pc, #180]	; (80014a4 <display7SEG+0x398>)
 80013f0:	f000 fbc1 	bl	8001b76 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, SEG5_Pin, RESET);
 80013f4:	2200      	movs	r2, #0
 80013f6:	2120      	movs	r1, #32
 80013f8:	482a      	ldr	r0, [pc, #168]	; (80014a4 <display7SEG+0x398>)
 80013fa:	f000 fbbc 	bl	8001b76 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, SEG6_Pin, RESET);
 80013fe:	2200      	movs	r2, #0
 8001400:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001404:	4829      	ldr	r0, [pc, #164]	; (80014ac <display7SEG+0x3a0>)
 8001406:	f000 fbb6 	bl	8001b76 <HAL_GPIO_WritePin>
	  break;
 800140a:	e078      	b.n	80014fe <display7SEG+0x3f2>
	case 9:
	  HAL_GPIO_WritePin(GPIOA, SEG0_Pin, RESET);
 800140c:	2200      	movs	r2, #0
 800140e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001412:	4824      	ldr	r0, [pc, #144]	; (80014a4 <display7SEG+0x398>)
 8001414:	f000 fbaf 	bl	8001b76 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, SEG1_Pin, RESET);
 8001418:	2200      	movs	r2, #0
 800141a:	2180      	movs	r1, #128	; 0x80
 800141c:	4822      	ldr	r0, [pc, #136]	; (80014a8 <display7SEG+0x39c>)
 800141e:	f000 fbaa 	bl	8001b76 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, SEG2_Pin, RESET);
 8001422:	2200      	movs	r2, #0
 8001424:	2140      	movs	r1, #64	; 0x40
 8001426:	4821      	ldr	r0, [pc, #132]	; (80014ac <display7SEG+0x3a0>)
 8001428:	f000 fba5 	bl	8001b76 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, SEG3_Pin, RESET);
 800142c:	2200      	movs	r2, #0
 800142e:	2180      	movs	r1, #128	; 0x80
 8001430:	481c      	ldr	r0, [pc, #112]	; (80014a4 <display7SEG+0x398>)
 8001432:	f000 fba0 	bl	8001b76 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, SEG4_Pin, SET);
 8001436:	2201      	movs	r2, #1
 8001438:	2140      	movs	r1, #64	; 0x40
 800143a:	481a      	ldr	r0, [pc, #104]	; (80014a4 <display7SEG+0x398>)
 800143c:	f000 fb9b 	bl	8001b76 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, SEG5_Pin, RESET);
 8001440:	2200      	movs	r2, #0
 8001442:	2120      	movs	r1, #32
 8001444:	4817      	ldr	r0, [pc, #92]	; (80014a4 <display7SEG+0x398>)
 8001446:	f000 fb96 	bl	8001b76 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, SEG6_Pin, RESET);
 800144a:	2200      	movs	r2, #0
 800144c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001450:	4816      	ldr	r0, [pc, #88]	; (80014ac <display7SEG+0x3a0>)
 8001452:	f000 fb90 	bl	8001b76 <HAL_GPIO_WritePin>
	  break;
 8001456:	e052      	b.n	80014fe <display7SEG+0x3f2>
	case OFF:
	  HAL_GPIO_WritePin(GPIOA, SEG0_Pin, SET);
 8001458:	2201      	movs	r2, #1
 800145a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800145e:	4811      	ldr	r0, [pc, #68]	; (80014a4 <display7SEG+0x398>)
 8001460:	f000 fb89 	bl	8001b76 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, SEG1_Pin, SET);
 8001464:	2201      	movs	r2, #1
 8001466:	2180      	movs	r1, #128	; 0x80
 8001468:	480f      	ldr	r0, [pc, #60]	; (80014a8 <display7SEG+0x39c>)
 800146a:	f000 fb84 	bl	8001b76 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, SEG2_Pin, SET);
 800146e:	2201      	movs	r2, #1
 8001470:	2140      	movs	r1, #64	; 0x40
 8001472:	480e      	ldr	r0, [pc, #56]	; (80014ac <display7SEG+0x3a0>)
 8001474:	f000 fb7f 	bl	8001b76 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, SEG3_Pin, SET);
 8001478:	2201      	movs	r2, #1
 800147a:	2180      	movs	r1, #128	; 0x80
 800147c:	4809      	ldr	r0, [pc, #36]	; (80014a4 <display7SEG+0x398>)
 800147e:	f000 fb7a 	bl	8001b76 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, SEG4_Pin, SET);
 8001482:	2201      	movs	r2, #1
 8001484:	2140      	movs	r1, #64	; 0x40
 8001486:	4807      	ldr	r0, [pc, #28]	; (80014a4 <display7SEG+0x398>)
 8001488:	f000 fb75 	bl	8001b76 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, SEG5_Pin, SET);
 800148c:	2201      	movs	r2, #1
 800148e:	2120      	movs	r1, #32
 8001490:	4804      	ldr	r0, [pc, #16]	; (80014a4 <display7SEG+0x398>)
 8001492:	f000 fb70 	bl	8001b76 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, SEG6_Pin, SET);
 8001496:	2201      	movs	r2, #1
 8001498:	f44f 7100 	mov.w	r1, #512	; 0x200
 800149c:	4803      	ldr	r0, [pc, #12]	; (80014ac <display7SEG+0x3a0>)
 800149e:	f000 fb6a 	bl	8001b76 <HAL_GPIO_WritePin>
	  break;
 80014a2:	e02c      	b.n	80014fe <display7SEG+0x3f2>
 80014a4:	40010800 	.word	0x40010800
 80014a8:	40011000 	.word	0x40011000
 80014ac:	40010c00 	.word	0x40010c00
	case USER:
	  HAL_GPIO_WritePin(GPIOA, SEG0_Pin, SET);
 80014b0:	2201      	movs	r2, #1
 80014b2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014b6:	4814      	ldr	r0, [pc, #80]	; (8001508 <display7SEG+0x3fc>)
 80014b8:	f000 fb5d 	bl	8001b76 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, SEG1_Pin, RESET);
 80014bc:	2200      	movs	r2, #0
 80014be:	2180      	movs	r1, #128	; 0x80
 80014c0:	4812      	ldr	r0, [pc, #72]	; (800150c <display7SEG+0x400>)
 80014c2:	f000 fb58 	bl	8001b76 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, SEG2_Pin, RESET);
 80014c6:	2200      	movs	r2, #0
 80014c8:	2140      	movs	r1, #64	; 0x40
 80014ca:	4811      	ldr	r0, [pc, #68]	; (8001510 <display7SEG+0x404>)
 80014cc:	f000 fb53 	bl	8001b76 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, SEG3_Pin, RESET);
 80014d0:	2200      	movs	r2, #0
 80014d2:	2180      	movs	r1, #128	; 0x80
 80014d4:	480c      	ldr	r0, [pc, #48]	; (8001508 <display7SEG+0x3fc>)
 80014d6:	f000 fb4e 	bl	8001b76 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, SEG4_Pin, RESET);
 80014da:	2200      	movs	r2, #0
 80014dc:	2140      	movs	r1, #64	; 0x40
 80014de:	480a      	ldr	r0, [pc, #40]	; (8001508 <display7SEG+0x3fc>)
 80014e0:	f000 fb49 	bl	8001b76 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, SEG5_Pin, RESET);
 80014e4:	2200      	movs	r2, #0
 80014e6:	2120      	movs	r1, #32
 80014e8:	4807      	ldr	r0, [pc, #28]	; (8001508 <display7SEG+0x3fc>)
 80014ea:	f000 fb44 	bl	8001b76 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, SEG6_Pin, SET);
 80014ee:	2201      	movs	r2, #1
 80014f0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80014f4:	4806      	ldr	r0, [pc, #24]	; (8001510 <display7SEG+0x404>)
 80014f6:	f000 fb3e 	bl	8001b76 <HAL_GPIO_WritePin>
	  break;
 80014fa:	e000      	b.n	80014fe <display7SEG+0x3f2>
	default:
	  break;
 80014fc:	bf00      	nop
  }
}
 80014fe:	bf00      	nop
 8001500:	3708      	adds	r7, #8
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	40010800 	.word	0x40010800
 800150c:	40011000 	.word	0x40011000
 8001510:	40010c00 	.word	0x40010c00

08001514 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001514:	f7ff fc50 	bl	8000db8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001518:	480b      	ldr	r0, [pc, #44]	; (8001548 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800151a:	490c      	ldr	r1, [pc, #48]	; (800154c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800151c:	4a0c      	ldr	r2, [pc, #48]	; (8001550 <LoopFillZerobss+0x16>)
  movs r3, #0
 800151e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001520:	e002      	b.n	8001528 <LoopCopyDataInit>

08001522 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001522:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001524:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001526:	3304      	adds	r3, #4

08001528 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001528:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800152a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800152c:	d3f9      	bcc.n	8001522 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800152e:	4a09      	ldr	r2, [pc, #36]	; (8001554 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001530:	4c09      	ldr	r4, [pc, #36]	; (8001558 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001532:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001534:	e001      	b.n	800153a <LoopFillZerobss>

08001536 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001536:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001538:	3204      	adds	r2, #4

0800153a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800153a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800153c:	d3fb      	bcc.n	8001536 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800153e:	f001 fb2f 	bl	8002ba0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001542:	f7ff fa19 	bl	8000978 <main>
  bx lr
 8001546:	4770      	bx	lr
  ldr r0, =_sdata
 8001548:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800154c:	200000e0 	.word	0x200000e0
  ldr r2, =_sidata
 8001550:	08002c2c 	.word	0x08002c2c
  ldr r2, =_sbss
 8001554:	200000e0 	.word	0x200000e0
  ldr r4, =_ebss
 8001558:	2000018c 	.word	0x2000018c

0800155c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800155c:	e7fe      	b.n	800155c <ADC1_2_IRQHandler>
	...

08001560 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001564:	4b08      	ldr	r3, [pc, #32]	; (8001588 <HAL_Init+0x28>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a07      	ldr	r2, [pc, #28]	; (8001588 <HAL_Init+0x28>)
 800156a:	f043 0310 	orr.w	r3, r3, #16
 800156e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001570:	2003      	movs	r0, #3
 8001572:	f000 f923 	bl	80017bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001576:	200f      	movs	r0, #15
 8001578:	f000 f808 	bl	800158c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800157c:	f7ff fb94 	bl	8000ca8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001580:	2300      	movs	r3, #0
}
 8001582:	4618      	mov	r0, r3
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	40022000 	.word	0x40022000

0800158c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b082      	sub	sp, #8
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001594:	4b12      	ldr	r3, [pc, #72]	; (80015e0 <HAL_InitTick+0x54>)
 8001596:	681a      	ldr	r2, [r3, #0]
 8001598:	4b12      	ldr	r3, [pc, #72]	; (80015e4 <HAL_InitTick+0x58>)
 800159a:	781b      	ldrb	r3, [r3, #0]
 800159c:	4619      	mov	r1, r3
 800159e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80015a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80015aa:	4618      	mov	r0, r3
 80015ac:	f000 f93b 	bl	8001826 <HAL_SYSTICK_Config>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d001      	beq.n	80015ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015b6:	2301      	movs	r3, #1
 80015b8:	e00e      	b.n	80015d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	2b0f      	cmp	r3, #15
 80015be:	d80a      	bhi.n	80015d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015c0:	2200      	movs	r2, #0
 80015c2:	6879      	ldr	r1, [r7, #4]
 80015c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80015c8:	f000 f903 	bl	80017d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015cc:	4a06      	ldr	r2, [pc, #24]	; (80015e8 <HAL_InitTick+0x5c>)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015d2:	2300      	movs	r3, #0
 80015d4:	e000      	b.n	80015d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015d6:	2301      	movs	r3, #1
}
 80015d8:	4618      	mov	r0, r3
 80015da:	3708      	adds	r7, #8
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	200000b0 	.word	0x200000b0
 80015e4:	200000dc 	.word	0x200000dc
 80015e8:	200000d8 	.word	0x200000d8

080015ec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015f0:	4b05      	ldr	r3, [pc, #20]	; (8001608 <HAL_IncTick+0x1c>)
 80015f2:	781b      	ldrb	r3, [r3, #0]
 80015f4:	461a      	mov	r2, r3
 80015f6:	4b05      	ldr	r3, [pc, #20]	; (800160c <HAL_IncTick+0x20>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4413      	add	r3, r2
 80015fc:	4a03      	ldr	r2, [pc, #12]	; (800160c <HAL_IncTick+0x20>)
 80015fe:	6013      	str	r3, [r2, #0]
}
 8001600:	bf00      	nop
 8001602:	46bd      	mov	sp, r7
 8001604:	bc80      	pop	{r7}
 8001606:	4770      	bx	lr
 8001608:	200000dc 	.word	0x200000dc
 800160c:	20000188 	.word	0x20000188

08001610 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0
  return uwTick;
 8001614:	4b02      	ldr	r3, [pc, #8]	; (8001620 <HAL_GetTick+0x10>)
 8001616:	681b      	ldr	r3, [r3, #0]
}
 8001618:	4618      	mov	r0, r3
 800161a:	46bd      	mov	sp, r7
 800161c:	bc80      	pop	{r7}
 800161e:	4770      	bx	lr
 8001620:	20000188 	.word	0x20000188

08001624 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001624:	b480      	push	{r7}
 8001626:	b085      	sub	sp, #20
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	f003 0307 	and.w	r3, r3, #7
 8001632:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001634:	4b0c      	ldr	r3, [pc, #48]	; (8001668 <__NVIC_SetPriorityGrouping+0x44>)
 8001636:	68db      	ldr	r3, [r3, #12]
 8001638:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800163a:	68ba      	ldr	r2, [r7, #8]
 800163c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001640:	4013      	ands	r3, r2
 8001642:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001648:	68bb      	ldr	r3, [r7, #8]
 800164a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800164c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001650:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001654:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001656:	4a04      	ldr	r2, [pc, #16]	; (8001668 <__NVIC_SetPriorityGrouping+0x44>)
 8001658:	68bb      	ldr	r3, [r7, #8]
 800165a:	60d3      	str	r3, [r2, #12]
}
 800165c:	bf00      	nop
 800165e:	3714      	adds	r7, #20
 8001660:	46bd      	mov	sp, r7
 8001662:	bc80      	pop	{r7}
 8001664:	4770      	bx	lr
 8001666:	bf00      	nop
 8001668:	e000ed00 	.word	0xe000ed00

0800166c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001670:	4b04      	ldr	r3, [pc, #16]	; (8001684 <__NVIC_GetPriorityGrouping+0x18>)
 8001672:	68db      	ldr	r3, [r3, #12]
 8001674:	0a1b      	lsrs	r3, r3, #8
 8001676:	f003 0307 	and.w	r3, r3, #7
}
 800167a:	4618      	mov	r0, r3
 800167c:	46bd      	mov	sp, r7
 800167e:	bc80      	pop	{r7}
 8001680:	4770      	bx	lr
 8001682:	bf00      	nop
 8001684:	e000ed00 	.word	0xe000ed00

08001688 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001688:	b480      	push	{r7}
 800168a:	b083      	sub	sp, #12
 800168c:	af00      	add	r7, sp, #0
 800168e:	4603      	mov	r3, r0
 8001690:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001692:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001696:	2b00      	cmp	r3, #0
 8001698:	db0b      	blt.n	80016b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800169a:	79fb      	ldrb	r3, [r7, #7]
 800169c:	f003 021f 	and.w	r2, r3, #31
 80016a0:	4906      	ldr	r1, [pc, #24]	; (80016bc <__NVIC_EnableIRQ+0x34>)
 80016a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a6:	095b      	lsrs	r3, r3, #5
 80016a8:	2001      	movs	r0, #1
 80016aa:	fa00 f202 	lsl.w	r2, r0, r2
 80016ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80016b2:	bf00      	nop
 80016b4:	370c      	adds	r7, #12
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bc80      	pop	{r7}
 80016ba:	4770      	bx	lr
 80016bc:	e000e100 	.word	0xe000e100

080016c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b083      	sub	sp, #12
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	4603      	mov	r3, r0
 80016c8:	6039      	str	r1, [r7, #0]
 80016ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	db0a      	blt.n	80016ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	b2da      	uxtb	r2, r3
 80016d8:	490c      	ldr	r1, [pc, #48]	; (800170c <__NVIC_SetPriority+0x4c>)
 80016da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016de:	0112      	lsls	r2, r2, #4
 80016e0:	b2d2      	uxtb	r2, r2
 80016e2:	440b      	add	r3, r1
 80016e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016e8:	e00a      	b.n	8001700 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	b2da      	uxtb	r2, r3
 80016ee:	4908      	ldr	r1, [pc, #32]	; (8001710 <__NVIC_SetPriority+0x50>)
 80016f0:	79fb      	ldrb	r3, [r7, #7]
 80016f2:	f003 030f 	and.w	r3, r3, #15
 80016f6:	3b04      	subs	r3, #4
 80016f8:	0112      	lsls	r2, r2, #4
 80016fa:	b2d2      	uxtb	r2, r2
 80016fc:	440b      	add	r3, r1
 80016fe:	761a      	strb	r2, [r3, #24]
}
 8001700:	bf00      	nop
 8001702:	370c      	adds	r7, #12
 8001704:	46bd      	mov	sp, r7
 8001706:	bc80      	pop	{r7}
 8001708:	4770      	bx	lr
 800170a:	bf00      	nop
 800170c:	e000e100 	.word	0xe000e100
 8001710:	e000ed00 	.word	0xe000ed00

08001714 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001714:	b480      	push	{r7}
 8001716:	b089      	sub	sp, #36	; 0x24
 8001718:	af00      	add	r7, sp, #0
 800171a:	60f8      	str	r0, [r7, #12]
 800171c:	60b9      	str	r1, [r7, #8]
 800171e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	f003 0307 	and.w	r3, r3, #7
 8001726:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001728:	69fb      	ldr	r3, [r7, #28]
 800172a:	f1c3 0307 	rsb	r3, r3, #7
 800172e:	2b04      	cmp	r3, #4
 8001730:	bf28      	it	cs
 8001732:	2304      	movcs	r3, #4
 8001734:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001736:	69fb      	ldr	r3, [r7, #28]
 8001738:	3304      	adds	r3, #4
 800173a:	2b06      	cmp	r3, #6
 800173c:	d902      	bls.n	8001744 <NVIC_EncodePriority+0x30>
 800173e:	69fb      	ldr	r3, [r7, #28]
 8001740:	3b03      	subs	r3, #3
 8001742:	e000      	b.n	8001746 <NVIC_EncodePriority+0x32>
 8001744:	2300      	movs	r3, #0
 8001746:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001748:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800174c:	69bb      	ldr	r3, [r7, #24]
 800174e:	fa02 f303 	lsl.w	r3, r2, r3
 8001752:	43da      	mvns	r2, r3
 8001754:	68bb      	ldr	r3, [r7, #8]
 8001756:	401a      	ands	r2, r3
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800175c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	fa01 f303 	lsl.w	r3, r1, r3
 8001766:	43d9      	mvns	r1, r3
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800176c:	4313      	orrs	r3, r2
         );
}
 800176e:	4618      	mov	r0, r3
 8001770:	3724      	adds	r7, #36	; 0x24
 8001772:	46bd      	mov	sp, r7
 8001774:	bc80      	pop	{r7}
 8001776:	4770      	bx	lr

08001778 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b082      	sub	sp, #8
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	3b01      	subs	r3, #1
 8001784:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001788:	d301      	bcc.n	800178e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800178a:	2301      	movs	r3, #1
 800178c:	e00f      	b.n	80017ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800178e:	4a0a      	ldr	r2, [pc, #40]	; (80017b8 <SysTick_Config+0x40>)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	3b01      	subs	r3, #1
 8001794:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001796:	210f      	movs	r1, #15
 8001798:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800179c:	f7ff ff90 	bl	80016c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017a0:	4b05      	ldr	r3, [pc, #20]	; (80017b8 <SysTick_Config+0x40>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017a6:	4b04      	ldr	r3, [pc, #16]	; (80017b8 <SysTick_Config+0x40>)
 80017a8:	2207      	movs	r2, #7
 80017aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017ac:	2300      	movs	r3, #0
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	3708      	adds	r7, #8
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	e000e010 	.word	0xe000e010

080017bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b082      	sub	sp, #8
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017c4:	6878      	ldr	r0, [r7, #4]
 80017c6:	f7ff ff2d 	bl	8001624 <__NVIC_SetPriorityGrouping>
}
 80017ca:	bf00      	nop
 80017cc:	3708      	adds	r7, #8
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}

080017d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017d2:	b580      	push	{r7, lr}
 80017d4:	b086      	sub	sp, #24
 80017d6:	af00      	add	r7, sp, #0
 80017d8:	4603      	mov	r3, r0
 80017da:	60b9      	str	r1, [r7, #8]
 80017dc:	607a      	str	r2, [r7, #4]
 80017de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017e0:	2300      	movs	r3, #0
 80017e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017e4:	f7ff ff42 	bl	800166c <__NVIC_GetPriorityGrouping>
 80017e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017ea:	687a      	ldr	r2, [r7, #4]
 80017ec:	68b9      	ldr	r1, [r7, #8]
 80017ee:	6978      	ldr	r0, [r7, #20]
 80017f0:	f7ff ff90 	bl	8001714 <NVIC_EncodePriority>
 80017f4:	4602      	mov	r2, r0
 80017f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017fa:	4611      	mov	r1, r2
 80017fc:	4618      	mov	r0, r3
 80017fe:	f7ff ff5f 	bl	80016c0 <__NVIC_SetPriority>
}
 8001802:	bf00      	nop
 8001804:	3718      	adds	r7, #24
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}

0800180a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800180a:	b580      	push	{r7, lr}
 800180c:	b082      	sub	sp, #8
 800180e:	af00      	add	r7, sp, #0
 8001810:	4603      	mov	r3, r0
 8001812:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001814:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001818:	4618      	mov	r0, r3
 800181a:	f7ff ff35 	bl	8001688 <__NVIC_EnableIRQ>
}
 800181e:	bf00      	nop
 8001820:	3708      	adds	r7, #8
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}

08001826 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001826:	b580      	push	{r7, lr}
 8001828:	b082      	sub	sp, #8
 800182a:	af00      	add	r7, sp, #0
 800182c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800182e:	6878      	ldr	r0, [r7, #4]
 8001830:	f7ff ffa2 	bl	8001778 <SysTick_Config>
 8001834:	4603      	mov	r3, r0
}
 8001836:	4618      	mov	r0, r3
 8001838:	3708      	adds	r7, #8
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
	...

08001840 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001840:	b480      	push	{r7}
 8001842:	b08b      	sub	sp, #44	; 0x2c
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
 8001848:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800184a:	2300      	movs	r3, #0
 800184c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800184e:	2300      	movs	r3, #0
 8001850:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001852:	e169      	b.n	8001b28 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001854:	2201      	movs	r2, #1
 8001856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001858:	fa02 f303 	lsl.w	r3, r2, r3
 800185c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	69fa      	ldr	r2, [r7, #28]
 8001864:	4013      	ands	r3, r2
 8001866:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001868:	69ba      	ldr	r2, [r7, #24]
 800186a:	69fb      	ldr	r3, [r7, #28]
 800186c:	429a      	cmp	r2, r3
 800186e:	f040 8158 	bne.w	8001b22 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	4a9a      	ldr	r2, [pc, #616]	; (8001ae0 <HAL_GPIO_Init+0x2a0>)
 8001878:	4293      	cmp	r3, r2
 800187a:	d05e      	beq.n	800193a <HAL_GPIO_Init+0xfa>
 800187c:	4a98      	ldr	r2, [pc, #608]	; (8001ae0 <HAL_GPIO_Init+0x2a0>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d875      	bhi.n	800196e <HAL_GPIO_Init+0x12e>
 8001882:	4a98      	ldr	r2, [pc, #608]	; (8001ae4 <HAL_GPIO_Init+0x2a4>)
 8001884:	4293      	cmp	r3, r2
 8001886:	d058      	beq.n	800193a <HAL_GPIO_Init+0xfa>
 8001888:	4a96      	ldr	r2, [pc, #600]	; (8001ae4 <HAL_GPIO_Init+0x2a4>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d86f      	bhi.n	800196e <HAL_GPIO_Init+0x12e>
 800188e:	4a96      	ldr	r2, [pc, #600]	; (8001ae8 <HAL_GPIO_Init+0x2a8>)
 8001890:	4293      	cmp	r3, r2
 8001892:	d052      	beq.n	800193a <HAL_GPIO_Init+0xfa>
 8001894:	4a94      	ldr	r2, [pc, #592]	; (8001ae8 <HAL_GPIO_Init+0x2a8>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d869      	bhi.n	800196e <HAL_GPIO_Init+0x12e>
 800189a:	4a94      	ldr	r2, [pc, #592]	; (8001aec <HAL_GPIO_Init+0x2ac>)
 800189c:	4293      	cmp	r3, r2
 800189e:	d04c      	beq.n	800193a <HAL_GPIO_Init+0xfa>
 80018a0:	4a92      	ldr	r2, [pc, #584]	; (8001aec <HAL_GPIO_Init+0x2ac>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d863      	bhi.n	800196e <HAL_GPIO_Init+0x12e>
 80018a6:	4a92      	ldr	r2, [pc, #584]	; (8001af0 <HAL_GPIO_Init+0x2b0>)
 80018a8:	4293      	cmp	r3, r2
 80018aa:	d046      	beq.n	800193a <HAL_GPIO_Init+0xfa>
 80018ac:	4a90      	ldr	r2, [pc, #576]	; (8001af0 <HAL_GPIO_Init+0x2b0>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d85d      	bhi.n	800196e <HAL_GPIO_Init+0x12e>
 80018b2:	2b12      	cmp	r3, #18
 80018b4:	d82a      	bhi.n	800190c <HAL_GPIO_Init+0xcc>
 80018b6:	2b12      	cmp	r3, #18
 80018b8:	d859      	bhi.n	800196e <HAL_GPIO_Init+0x12e>
 80018ba:	a201      	add	r2, pc, #4	; (adr r2, 80018c0 <HAL_GPIO_Init+0x80>)
 80018bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018c0:	0800193b 	.word	0x0800193b
 80018c4:	08001915 	.word	0x08001915
 80018c8:	08001927 	.word	0x08001927
 80018cc:	08001969 	.word	0x08001969
 80018d0:	0800196f 	.word	0x0800196f
 80018d4:	0800196f 	.word	0x0800196f
 80018d8:	0800196f 	.word	0x0800196f
 80018dc:	0800196f 	.word	0x0800196f
 80018e0:	0800196f 	.word	0x0800196f
 80018e4:	0800196f 	.word	0x0800196f
 80018e8:	0800196f 	.word	0x0800196f
 80018ec:	0800196f 	.word	0x0800196f
 80018f0:	0800196f 	.word	0x0800196f
 80018f4:	0800196f 	.word	0x0800196f
 80018f8:	0800196f 	.word	0x0800196f
 80018fc:	0800196f 	.word	0x0800196f
 8001900:	0800196f 	.word	0x0800196f
 8001904:	0800191d 	.word	0x0800191d
 8001908:	08001931 	.word	0x08001931
 800190c:	4a79      	ldr	r2, [pc, #484]	; (8001af4 <HAL_GPIO_Init+0x2b4>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d013      	beq.n	800193a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001912:	e02c      	b.n	800196e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	68db      	ldr	r3, [r3, #12]
 8001918:	623b      	str	r3, [r7, #32]
          break;
 800191a:	e029      	b.n	8001970 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	68db      	ldr	r3, [r3, #12]
 8001920:	3304      	adds	r3, #4
 8001922:	623b      	str	r3, [r7, #32]
          break;
 8001924:	e024      	b.n	8001970 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	68db      	ldr	r3, [r3, #12]
 800192a:	3308      	adds	r3, #8
 800192c:	623b      	str	r3, [r7, #32]
          break;
 800192e:	e01f      	b.n	8001970 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	68db      	ldr	r3, [r3, #12]
 8001934:	330c      	adds	r3, #12
 8001936:	623b      	str	r3, [r7, #32]
          break;
 8001938:	e01a      	b.n	8001970 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	689b      	ldr	r3, [r3, #8]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d102      	bne.n	8001948 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001942:	2304      	movs	r3, #4
 8001944:	623b      	str	r3, [r7, #32]
          break;
 8001946:	e013      	b.n	8001970 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	689b      	ldr	r3, [r3, #8]
 800194c:	2b01      	cmp	r3, #1
 800194e:	d105      	bne.n	800195c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001950:	2308      	movs	r3, #8
 8001952:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	69fa      	ldr	r2, [r7, #28]
 8001958:	611a      	str	r2, [r3, #16]
          break;
 800195a:	e009      	b.n	8001970 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800195c:	2308      	movs	r3, #8
 800195e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	69fa      	ldr	r2, [r7, #28]
 8001964:	615a      	str	r2, [r3, #20]
          break;
 8001966:	e003      	b.n	8001970 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001968:	2300      	movs	r3, #0
 800196a:	623b      	str	r3, [r7, #32]
          break;
 800196c:	e000      	b.n	8001970 <HAL_GPIO_Init+0x130>
          break;
 800196e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001970:	69bb      	ldr	r3, [r7, #24]
 8001972:	2bff      	cmp	r3, #255	; 0xff
 8001974:	d801      	bhi.n	800197a <HAL_GPIO_Init+0x13a>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	e001      	b.n	800197e <HAL_GPIO_Init+0x13e>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	3304      	adds	r3, #4
 800197e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001980:	69bb      	ldr	r3, [r7, #24]
 8001982:	2bff      	cmp	r3, #255	; 0xff
 8001984:	d802      	bhi.n	800198c <HAL_GPIO_Init+0x14c>
 8001986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001988:	009b      	lsls	r3, r3, #2
 800198a:	e002      	b.n	8001992 <HAL_GPIO_Init+0x152>
 800198c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800198e:	3b08      	subs	r3, #8
 8001990:	009b      	lsls	r3, r3, #2
 8001992:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	681a      	ldr	r2, [r3, #0]
 8001998:	210f      	movs	r1, #15
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	fa01 f303 	lsl.w	r3, r1, r3
 80019a0:	43db      	mvns	r3, r3
 80019a2:	401a      	ands	r2, r3
 80019a4:	6a39      	ldr	r1, [r7, #32]
 80019a6:	693b      	ldr	r3, [r7, #16]
 80019a8:	fa01 f303 	lsl.w	r3, r1, r3
 80019ac:	431a      	orrs	r2, r3
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	f000 80b1 	beq.w	8001b22 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80019c0:	4b4d      	ldr	r3, [pc, #308]	; (8001af8 <HAL_GPIO_Init+0x2b8>)
 80019c2:	699b      	ldr	r3, [r3, #24]
 80019c4:	4a4c      	ldr	r2, [pc, #304]	; (8001af8 <HAL_GPIO_Init+0x2b8>)
 80019c6:	f043 0301 	orr.w	r3, r3, #1
 80019ca:	6193      	str	r3, [r2, #24]
 80019cc:	4b4a      	ldr	r3, [pc, #296]	; (8001af8 <HAL_GPIO_Init+0x2b8>)
 80019ce:	699b      	ldr	r3, [r3, #24]
 80019d0:	f003 0301 	and.w	r3, r3, #1
 80019d4:	60bb      	str	r3, [r7, #8]
 80019d6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80019d8:	4a48      	ldr	r2, [pc, #288]	; (8001afc <HAL_GPIO_Init+0x2bc>)
 80019da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019dc:	089b      	lsrs	r3, r3, #2
 80019de:	3302      	adds	r3, #2
 80019e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019e4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80019e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e8:	f003 0303 	and.w	r3, r3, #3
 80019ec:	009b      	lsls	r3, r3, #2
 80019ee:	220f      	movs	r2, #15
 80019f0:	fa02 f303 	lsl.w	r3, r2, r3
 80019f4:	43db      	mvns	r3, r3
 80019f6:	68fa      	ldr	r2, [r7, #12]
 80019f8:	4013      	ands	r3, r2
 80019fa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	4a40      	ldr	r2, [pc, #256]	; (8001b00 <HAL_GPIO_Init+0x2c0>)
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d013      	beq.n	8001a2c <HAL_GPIO_Init+0x1ec>
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	4a3f      	ldr	r2, [pc, #252]	; (8001b04 <HAL_GPIO_Init+0x2c4>)
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d00d      	beq.n	8001a28 <HAL_GPIO_Init+0x1e8>
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	4a3e      	ldr	r2, [pc, #248]	; (8001b08 <HAL_GPIO_Init+0x2c8>)
 8001a10:	4293      	cmp	r3, r2
 8001a12:	d007      	beq.n	8001a24 <HAL_GPIO_Init+0x1e4>
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	4a3d      	ldr	r2, [pc, #244]	; (8001b0c <HAL_GPIO_Init+0x2cc>)
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d101      	bne.n	8001a20 <HAL_GPIO_Init+0x1e0>
 8001a1c:	2303      	movs	r3, #3
 8001a1e:	e006      	b.n	8001a2e <HAL_GPIO_Init+0x1ee>
 8001a20:	2304      	movs	r3, #4
 8001a22:	e004      	b.n	8001a2e <HAL_GPIO_Init+0x1ee>
 8001a24:	2302      	movs	r3, #2
 8001a26:	e002      	b.n	8001a2e <HAL_GPIO_Init+0x1ee>
 8001a28:	2301      	movs	r3, #1
 8001a2a:	e000      	b.n	8001a2e <HAL_GPIO_Init+0x1ee>
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a30:	f002 0203 	and.w	r2, r2, #3
 8001a34:	0092      	lsls	r2, r2, #2
 8001a36:	4093      	lsls	r3, r2
 8001a38:	68fa      	ldr	r2, [r7, #12]
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001a3e:	492f      	ldr	r1, [pc, #188]	; (8001afc <HAL_GPIO_Init+0x2bc>)
 8001a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a42:	089b      	lsrs	r3, r3, #2
 8001a44:	3302      	adds	r3, #2
 8001a46:	68fa      	ldr	r2, [r7, #12]
 8001a48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d006      	beq.n	8001a66 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001a58:	4b2d      	ldr	r3, [pc, #180]	; (8001b10 <HAL_GPIO_Init+0x2d0>)
 8001a5a:	689a      	ldr	r2, [r3, #8]
 8001a5c:	492c      	ldr	r1, [pc, #176]	; (8001b10 <HAL_GPIO_Init+0x2d0>)
 8001a5e:	69bb      	ldr	r3, [r7, #24]
 8001a60:	4313      	orrs	r3, r2
 8001a62:	608b      	str	r3, [r1, #8]
 8001a64:	e006      	b.n	8001a74 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001a66:	4b2a      	ldr	r3, [pc, #168]	; (8001b10 <HAL_GPIO_Init+0x2d0>)
 8001a68:	689a      	ldr	r2, [r3, #8]
 8001a6a:	69bb      	ldr	r3, [r7, #24]
 8001a6c:	43db      	mvns	r3, r3
 8001a6e:	4928      	ldr	r1, [pc, #160]	; (8001b10 <HAL_GPIO_Init+0x2d0>)
 8001a70:	4013      	ands	r3, r2
 8001a72:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d006      	beq.n	8001a8e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001a80:	4b23      	ldr	r3, [pc, #140]	; (8001b10 <HAL_GPIO_Init+0x2d0>)
 8001a82:	68da      	ldr	r2, [r3, #12]
 8001a84:	4922      	ldr	r1, [pc, #136]	; (8001b10 <HAL_GPIO_Init+0x2d0>)
 8001a86:	69bb      	ldr	r3, [r7, #24]
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	60cb      	str	r3, [r1, #12]
 8001a8c:	e006      	b.n	8001a9c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001a8e:	4b20      	ldr	r3, [pc, #128]	; (8001b10 <HAL_GPIO_Init+0x2d0>)
 8001a90:	68da      	ldr	r2, [r3, #12]
 8001a92:	69bb      	ldr	r3, [r7, #24]
 8001a94:	43db      	mvns	r3, r3
 8001a96:	491e      	ldr	r1, [pc, #120]	; (8001b10 <HAL_GPIO_Init+0x2d0>)
 8001a98:	4013      	ands	r3, r2
 8001a9a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d006      	beq.n	8001ab6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001aa8:	4b19      	ldr	r3, [pc, #100]	; (8001b10 <HAL_GPIO_Init+0x2d0>)
 8001aaa:	685a      	ldr	r2, [r3, #4]
 8001aac:	4918      	ldr	r1, [pc, #96]	; (8001b10 <HAL_GPIO_Init+0x2d0>)
 8001aae:	69bb      	ldr	r3, [r7, #24]
 8001ab0:	4313      	orrs	r3, r2
 8001ab2:	604b      	str	r3, [r1, #4]
 8001ab4:	e006      	b.n	8001ac4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001ab6:	4b16      	ldr	r3, [pc, #88]	; (8001b10 <HAL_GPIO_Init+0x2d0>)
 8001ab8:	685a      	ldr	r2, [r3, #4]
 8001aba:	69bb      	ldr	r3, [r7, #24]
 8001abc:	43db      	mvns	r3, r3
 8001abe:	4914      	ldr	r1, [pc, #80]	; (8001b10 <HAL_GPIO_Init+0x2d0>)
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d021      	beq.n	8001b14 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001ad0:	4b0f      	ldr	r3, [pc, #60]	; (8001b10 <HAL_GPIO_Init+0x2d0>)
 8001ad2:	681a      	ldr	r2, [r3, #0]
 8001ad4:	490e      	ldr	r1, [pc, #56]	; (8001b10 <HAL_GPIO_Init+0x2d0>)
 8001ad6:	69bb      	ldr	r3, [r7, #24]
 8001ad8:	4313      	orrs	r3, r2
 8001ada:	600b      	str	r3, [r1, #0]
 8001adc:	e021      	b.n	8001b22 <HAL_GPIO_Init+0x2e2>
 8001ade:	bf00      	nop
 8001ae0:	10320000 	.word	0x10320000
 8001ae4:	10310000 	.word	0x10310000
 8001ae8:	10220000 	.word	0x10220000
 8001aec:	10210000 	.word	0x10210000
 8001af0:	10120000 	.word	0x10120000
 8001af4:	10110000 	.word	0x10110000
 8001af8:	40021000 	.word	0x40021000
 8001afc:	40010000 	.word	0x40010000
 8001b00:	40010800 	.word	0x40010800
 8001b04:	40010c00 	.word	0x40010c00
 8001b08:	40011000 	.word	0x40011000
 8001b0c:	40011400 	.word	0x40011400
 8001b10:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001b14:	4b0b      	ldr	r3, [pc, #44]	; (8001b44 <HAL_GPIO_Init+0x304>)
 8001b16:	681a      	ldr	r2, [r3, #0]
 8001b18:	69bb      	ldr	r3, [r7, #24]
 8001b1a:	43db      	mvns	r3, r3
 8001b1c:	4909      	ldr	r1, [pc, #36]	; (8001b44 <HAL_GPIO_Init+0x304>)
 8001b1e:	4013      	ands	r3, r2
 8001b20:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b24:	3301      	adds	r3, #1
 8001b26:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	681a      	ldr	r2, [r3, #0]
 8001b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b2e:	fa22 f303 	lsr.w	r3, r2, r3
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	f47f ae8e 	bne.w	8001854 <HAL_GPIO_Init+0x14>
  }
}
 8001b38:	bf00      	nop
 8001b3a:	bf00      	nop
 8001b3c:	372c      	adds	r7, #44	; 0x2c
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bc80      	pop	{r7}
 8001b42:	4770      	bx	lr
 8001b44:	40010400 	.word	0x40010400

08001b48 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b085      	sub	sp, #20
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
 8001b50:	460b      	mov	r3, r1
 8001b52:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	689a      	ldr	r2, [r3, #8]
 8001b58:	887b      	ldrh	r3, [r7, #2]
 8001b5a:	4013      	ands	r3, r2
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d002      	beq.n	8001b66 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001b60:	2301      	movs	r3, #1
 8001b62:	73fb      	strb	r3, [r7, #15]
 8001b64:	e001      	b.n	8001b6a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001b66:	2300      	movs	r3, #0
 8001b68:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001b6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	3714      	adds	r7, #20
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bc80      	pop	{r7}
 8001b74:	4770      	bx	lr

08001b76 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b76:	b480      	push	{r7}
 8001b78:	b083      	sub	sp, #12
 8001b7a:	af00      	add	r7, sp, #0
 8001b7c:	6078      	str	r0, [r7, #4]
 8001b7e:	460b      	mov	r3, r1
 8001b80:	807b      	strh	r3, [r7, #2]
 8001b82:	4613      	mov	r3, r2
 8001b84:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b86:	787b      	ldrb	r3, [r7, #1]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d003      	beq.n	8001b94 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b8c:	887a      	ldrh	r2, [r7, #2]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001b92:	e003      	b.n	8001b9c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001b94:	887b      	ldrh	r3, [r7, #2]
 8001b96:	041a      	lsls	r2, r3, #16
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	611a      	str	r2, [r3, #16]
}
 8001b9c:	bf00      	nop
 8001b9e:	370c      	adds	r7, #12
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bc80      	pop	{r7}
 8001ba4:	4770      	bx	lr

08001ba6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001ba6:	b480      	push	{r7}
 8001ba8:	b085      	sub	sp, #20
 8001baa:	af00      	add	r7, sp, #0
 8001bac:	6078      	str	r0, [r7, #4]
 8001bae:	460b      	mov	r3, r1
 8001bb0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	68db      	ldr	r3, [r3, #12]
 8001bb6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001bb8:	887a      	ldrh	r2, [r7, #2]
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	041a      	lsls	r2, r3, #16
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	43d9      	mvns	r1, r3
 8001bc4:	887b      	ldrh	r3, [r7, #2]
 8001bc6:	400b      	ands	r3, r1
 8001bc8:	431a      	orrs	r2, r3
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	611a      	str	r2, [r3, #16]
}
 8001bce:	bf00      	nop
 8001bd0:	3714      	adds	r7, #20
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bc80      	pop	{r7}
 8001bd6:	4770      	bx	lr

08001bd8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b086      	sub	sp, #24
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d101      	bne.n	8001bea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001be6:	2301      	movs	r3, #1
 8001be8:	e272      	b.n	80020d0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f003 0301 	and.w	r3, r3, #1
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	f000 8087 	beq.w	8001d06 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001bf8:	4b92      	ldr	r3, [pc, #584]	; (8001e44 <HAL_RCC_OscConfig+0x26c>)
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	f003 030c 	and.w	r3, r3, #12
 8001c00:	2b04      	cmp	r3, #4
 8001c02:	d00c      	beq.n	8001c1e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001c04:	4b8f      	ldr	r3, [pc, #572]	; (8001e44 <HAL_RCC_OscConfig+0x26c>)
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	f003 030c 	and.w	r3, r3, #12
 8001c0c:	2b08      	cmp	r3, #8
 8001c0e:	d112      	bne.n	8001c36 <HAL_RCC_OscConfig+0x5e>
 8001c10:	4b8c      	ldr	r3, [pc, #560]	; (8001e44 <HAL_RCC_OscConfig+0x26c>)
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c1c:	d10b      	bne.n	8001c36 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c1e:	4b89      	ldr	r3, [pc, #548]	; (8001e44 <HAL_RCC_OscConfig+0x26c>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d06c      	beq.n	8001d04 <HAL_RCC_OscConfig+0x12c>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d168      	bne.n	8001d04 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
 8001c34:	e24c      	b.n	80020d0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c3e:	d106      	bne.n	8001c4e <HAL_RCC_OscConfig+0x76>
 8001c40:	4b80      	ldr	r3, [pc, #512]	; (8001e44 <HAL_RCC_OscConfig+0x26c>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a7f      	ldr	r2, [pc, #508]	; (8001e44 <HAL_RCC_OscConfig+0x26c>)
 8001c46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c4a:	6013      	str	r3, [r2, #0]
 8001c4c:	e02e      	b.n	8001cac <HAL_RCC_OscConfig+0xd4>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d10c      	bne.n	8001c70 <HAL_RCC_OscConfig+0x98>
 8001c56:	4b7b      	ldr	r3, [pc, #492]	; (8001e44 <HAL_RCC_OscConfig+0x26c>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a7a      	ldr	r2, [pc, #488]	; (8001e44 <HAL_RCC_OscConfig+0x26c>)
 8001c5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c60:	6013      	str	r3, [r2, #0]
 8001c62:	4b78      	ldr	r3, [pc, #480]	; (8001e44 <HAL_RCC_OscConfig+0x26c>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4a77      	ldr	r2, [pc, #476]	; (8001e44 <HAL_RCC_OscConfig+0x26c>)
 8001c68:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c6c:	6013      	str	r3, [r2, #0]
 8001c6e:	e01d      	b.n	8001cac <HAL_RCC_OscConfig+0xd4>
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c78:	d10c      	bne.n	8001c94 <HAL_RCC_OscConfig+0xbc>
 8001c7a:	4b72      	ldr	r3, [pc, #456]	; (8001e44 <HAL_RCC_OscConfig+0x26c>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4a71      	ldr	r2, [pc, #452]	; (8001e44 <HAL_RCC_OscConfig+0x26c>)
 8001c80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c84:	6013      	str	r3, [r2, #0]
 8001c86:	4b6f      	ldr	r3, [pc, #444]	; (8001e44 <HAL_RCC_OscConfig+0x26c>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4a6e      	ldr	r2, [pc, #440]	; (8001e44 <HAL_RCC_OscConfig+0x26c>)
 8001c8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c90:	6013      	str	r3, [r2, #0]
 8001c92:	e00b      	b.n	8001cac <HAL_RCC_OscConfig+0xd4>
 8001c94:	4b6b      	ldr	r3, [pc, #428]	; (8001e44 <HAL_RCC_OscConfig+0x26c>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a6a      	ldr	r2, [pc, #424]	; (8001e44 <HAL_RCC_OscConfig+0x26c>)
 8001c9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c9e:	6013      	str	r3, [r2, #0]
 8001ca0:	4b68      	ldr	r3, [pc, #416]	; (8001e44 <HAL_RCC_OscConfig+0x26c>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a67      	ldr	r2, [pc, #412]	; (8001e44 <HAL_RCC_OscConfig+0x26c>)
 8001ca6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001caa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d013      	beq.n	8001cdc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cb4:	f7ff fcac 	bl	8001610 <HAL_GetTick>
 8001cb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cba:	e008      	b.n	8001cce <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cbc:	f7ff fca8 	bl	8001610 <HAL_GetTick>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	693b      	ldr	r3, [r7, #16]
 8001cc4:	1ad3      	subs	r3, r2, r3
 8001cc6:	2b64      	cmp	r3, #100	; 0x64
 8001cc8:	d901      	bls.n	8001cce <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001cca:	2303      	movs	r3, #3
 8001ccc:	e200      	b.n	80020d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cce:	4b5d      	ldr	r3, [pc, #372]	; (8001e44 <HAL_RCC_OscConfig+0x26c>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d0f0      	beq.n	8001cbc <HAL_RCC_OscConfig+0xe4>
 8001cda:	e014      	b.n	8001d06 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cdc:	f7ff fc98 	bl	8001610 <HAL_GetTick>
 8001ce0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ce2:	e008      	b.n	8001cf6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ce4:	f7ff fc94 	bl	8001610 <HAL_GetTick>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	1ad3      	subs	r3, r2, r3
 8001cee:	2b64      	cmp	r3, #100	; 0x64
 8001cf0:	d901      	bls.n	8001cf6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001cf2:	2303      	movs	r3, #3
 8001cf4:	e1ec      	b.n	80020d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cf6:	4b53      	ldr	r3, [pc, #332]	; (8001e44 <HAL_RCC_OscConfig+0x26c>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d1f0      	bne.n	8001ce4 <HAL_RCC_OscConfig+0x10c>
 8001d02:	e000      	b.n	8001d06 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f003 0302 	and.w	r3, r3, #2
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d063      	beq.n	8001dda <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d12:	4b4c      	ldr	r3, [pc, #304]	; (8001e44 <HAL_RCC_OscConfig+0x26c>)
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	f003 030c 	and.w	r3, r3, #12
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d00b      	beq.n	8001d36 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001d1e:	4b49      	ldr	r3, [pc, #292]	; (8001e44 <HAL_RCC_OscConfig+0x26c>)
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	f003 030c 	and.w	r3, r3, #12
 8001d26:	2b08      	cmp	r3, #8
 8001d28:	d11c      	bne.n	8001d64 <HAL_RCC_OscConfig+0x18c>
 8001d2a:	4b46      	ldr	r3, [pc, #280]	; (8001e44 <HAL_RCC_OscConfig+0x26c>)
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d116      	bne.n	8001d64 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d36:	4b43      	ldr	r3, [pc, #268]	; (8001e44 <HAL_RCC_OscConfig+0x26c>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f003 0302 	and.w	r3, r3, #2
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d005      	beq.n	8001d4e <HAL_RCC_OscConfig+0x176>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	691b      	ldr	r3, [r3, #16]
 8001d46:	2b01      	cmp	r3, #1
 8001d48:	d001      	beq.n	8001d4e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e1c0      	b.n	80020d0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d4e:	4b3d      	ldr	r3, [pc, #244]	; (8001e44 <HAL_RCC_OscConfig+0x26c>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	695b      	ldr	r3, [r3, #20]
 8001d5a:	00db      	lsls	r3, r3, #3
 8001d5c:	4939      	ldr	r1, [pc, #228]	; (8001e44 <HAL_RCC_OscConfig+0x26c>)
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d62:	e03a      	b.n	8001dda <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	691b      	ldr	r3, [r3, #16]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d020      	beq.n	8001dae <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d6c:	4b36      	ldr	r3, [pc, #216]	; (8001e48 <HAL_RCC_OscConfig+0x270>)
 8001d6e:	2201      	movs	r2, #1
 8001d70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d72:	f7ff fc4d 	bl	8001610 <HAL_GetTick>
 8001d76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d78:	e008      	b.n	8001d8c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d7a:	f7ff fc49 	bl	8001610 <HAL_GetTick>
 8001d7e:	4602      	mov	r2, r0
 8001d80:	693b      	ldr	r3, [r7, #16]
 8001d82:	1ad3      	subs	r3, r2, r3
 8001d84:	2b02      	cmp	r3, #2
 8001d86:	d901      	bls.n	8001d8c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001d88:	2303      	movs	r3, #3
 8001d8a:	e1a1      	b.n	80020d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d8c:	4b2d      	ldr	r3, [pc, #180]	; (8001e44 <HAL_RCC_OscConfig+0x26c>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f003 0302 	and.w	r3, r3, #2
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d0f0      	beq.n	8001d7a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d98:	4b2a      	ldr	r3, [pc, #168]	; (8001e44 <HAL_RCC_OscConfig+0x26c>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	695b      	ldr	r3, [r3, #20]
 8001da4:	00db      	lsls	r3, r3, #3
 8001da6:	4927      	ldr	r1, [pc, #156]	; (8001e44 <HAL_RCC_OscConfig+0x26c>)
 8001da8:	4313      	orrs	r3, r2
 8001daa:	600b      	str	r3, [r1, #0]
 8001dac:	e015      	b.n	8001dda <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001dae:	4b26      	ldr	r3, [pc, #152]	; (8001e48 <HAL_RCC_OscConfig+0x270>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001db4:	f7ff fc2c 	bl	8001610 <HAL_GetTick>
 8001db8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dba:	e008      	b.n	8001dce <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dbc:	f7ff fc28 	bl	8001610 <HAL_GetTick>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	693b      	ldr	r3, [r7, #16]
 8001dc4:	1ad3      	subs	r3, r2, r3
 8001dc6:	2b02      	cmp	r3, #2
 8001dc8:	d901      	bls.n	8001dce <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001dca:	2303      	movs	r3, #3
 8001dcc:	e180      	b.n	80020d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dce:	4b1d      	ldr	r3, [pc, #116]	; (8001e44 <HAL_RCC_OscConfig+0x26c>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f003 0302 	and.w	r3, r3, #2
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d1f0      	bne.n	8001dbc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f003 0308 	and.w	r3, r3, #8
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d03a      	beq.n	8001e5c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	699b      	ldr	r3, [r3, #24]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d019      	beq.n	8001e22 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001dee:	4b17      	ldr	r3, [pc, #92]	; (8001e4c <HAL_RCC_OscConfig+0x274>)
 8001df0:	2201      	movs	r2, #1
 8001df2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001df4:	f7ff fc0c 	bl	8001610 <HAL_GetTick>
 8001df8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dfa:	e008      	b.n	8001e0e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001dfc:	f7ff fc08 	bl	8001610 <HAL_GetTick>
 8001e00:	4602      	mov	r2, r0
 8001e02:	693b      	ldr	r3, [r7, #16]
 8001e04:	1ad3      	subs	r3, r2, r3
 8001e06:	2b02      	cmp	r3, #2
 8001e08:	d901      	bls.n	8001e0e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001e0a:	2303      	movs	r3, #3
 8001e0c:	e160      	b.n	80020d0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e0e:	4b0d      	ldr	r3, [pc, #52]	; (8001e44 <HAL_RCC_OscConfig+0x26c>)
 8001e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e12:	f003 0302 	and.w	r3, r3, #2
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d0f0      	beq.n	8001dfc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001e1a:	2001      	movs	r0, #1
 8001e1c:	f000 fa9c 	bl	8002358 <RCC_Delay>
 8001e20:	e01c      	b.n	8001e5c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e22:	4b0a      	ldr	r3, [pc, #40]	; (8001e4c <HAL_RCC_OscConfig+0x274>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e28:	f7ff fbf2 	bl	8001610 <HAL_GetTick>
 8001e2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e2e:	e00f      	b.n	8001e50 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e30:	f7ff fbee 	bl	8001610 <HAL_GetTick>
 8001e34:	4602      	mov	r2, r0
 8001e36:	693b      	ldr	r3, [r7, #16]
 8001e38:	1ad3      	subs	r3, r2, r3
 8001e3a:	2b02      	cmp	r3, #2
 8001e3c:	d908      	bls.n	8001e50 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001e3e:	2303      	movs	r3, #3
 8001e40:	e146      	b.n	80020d0 <HAL_RCC_OscConfig+0x4f8>
 8001e42:	bf00      	nop
 8001e44:	40021000 	.word	0x40021000
 8001e48:	42420000 	.word	0x42420000
 8001e4c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e50:	4b92      	ldr	r3, [pc, #584]	; (800209c <HAL_RCC_OscConfig+0x4c4>)
 8001e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e54:	f003 0302 	and.w	r3, r3, #2
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d1e9      	bne.n	8001e30 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f003 0304 	and.w	r3, r3, #4
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	f000 80a6 	beq.w	8001fb6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e6e:	4b8b      	ldr	r3, [pc, #556]	; (800209c <HAL_RCC_OscConfig+0x4c4>)
 8001e70:	69db      	ldr	r3, [r3, #28]
 8001e72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d10d      	bne.n	8001e96 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e7a:	4b88      	ldr	r3, [pc, #544]	; (800209c <HAL_RCC_OscConfig+0x4c4>)
 8001e7c:	69db      	ldr	r3, [r3, #28]
 8001e7e:	4a87      	ldr	r2, [pc, #540]	; (800209c <HAL_RCC_OscConfig+0x4c4>)
 8001e80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e84:	61d3      	str	r3, [r2, #28]
 8001e86:	4b85      	ldr	r3, [pc, #532]	; (800209c <HAL_RCC_OscConfig+0x4c4>)
 8001e88:	69db      	ldr	r3, [r3, #28]
 8001e8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e8e:	60bb      	str	r3, [r7, #8]
 8001e90:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e92:	2301      	movs	r3, #1
 8001e94:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e96:	4b82      	ldr	r3, [pc, #520]	; (80020a0 <HAL_RCC_OscConfig+0x4c8>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d118      	bne.n	8001ed4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ea2:	4b7f      	ldr	r3, [pc, #508]	; (80020a0 <HAL_RCC_OscConfig+0x4c8>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4a7e      	ldr	r2, [pc, #504]	; (80020a0 <HAL_RCC_OscConfig+0x4c8>)
 8001ea8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001eac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001eae:	f7ff fbaf 	bl	8001610 <HAL_GetTick>
 8001eb2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eb4:	e008      	b.n	8001ec8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001eb6:	f7ff fbab 	bl	8001610 <HAL_GetTick>
 8001eba:	4602      	mov	r2, r0
 8001ebc:	693b      	ldr	r3, [r7, #16]
 8001ebe:	1ad3      	subs	r3, r2, r3
 8001ec0:	2b64      	cmp	r3, #100	; 0x64
 8001ec2:	d901      	bls.n	8001ec8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001ec4:	2303      	movs	r3, #3
 8001ec6:	e103      	b.n	80020d0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ec8:	4b75      	ldr	r3, [pc, #468]	; (80020a0 <HAL_RCC_OscConfig+0x4c8>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d0f0      	beq.n	8001eb6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	68db      	ldr	r3, [r3, #12]
 8001ed8:	2b01      	cmp	r3, #1
 8001eda:	d106      	bne.n	8001eea <HAL_RCC_OscConfig+0x312>
 8001edc:	4b6f      	ldr	r3, [pc, #444]	; (800209c <HAL_RCC_OscConfig+0x4c4>)
 8001ede:	6a1b      	ldr	r3, [r3, #32]
 8001ee0:	4a6e      	ldr	r2, [pc, #440]	; (800209c <HAL_RCC_OscConfig+0x4c4>)
 8001ee2:	f043 0301 	orr.w	r3, r3, #1
 8001ee6:	6213      	str	r3, [r2, #32]
 8001ee8:	e02d      	b.n	8001f46 <HAL_RCC_OscConfig+0x36e>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	68db      	ldr	r3, [r3, #12]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d10c      	bne.n	8001f0c <HAL_RCC_OscConfig+0x334>
 8001ef2:	4b6a      	ldr	r3, [pc, #424]	; (800209c <HAL_RCC_OscConfig+0x4c4>)
 8001ef4:	6a1b      	ldr	r3, [r3, #32]
 8001ef6:	4a69      	ldr	r2, [pc, #420]	; (800209c <HAL_RCC_OscConfig+0x4c4>)
 8001ef8:	f023 0301 	bic.w	r3, r3, #1
 8001efc:	6213      	str	r3, [r2, #32]
 8001efe:	4b67      	ldr	r3, [pc, #412]	; (800209c <HAL_RCC_OscConfig+0x4c4>)
 8001f00:	6a1b      	ldr	r3, [r3, #32]
 8001f02:	4a66      	ldr	r2, [pc, #408]	; (800209c <HAL_RCC_OscConfig+0x4c4>)
 8001f04:	f023 0304 	bic.w	r3, r3, #4
 8001f08:	6213      	str	r3, [r2, #32]
 8001f0a:	e01c      	b.n	8001f46 <HAL_RCC_OscConfig+0x36e>
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	68db      	ldr	r3, [r3, #12]
 8001f10:	2b05      	cmp	r3, #5
 8001f12:	d10c      	bne.n	8001f2e <HAL_RCC_OscConfig+0x356>
 8001f14:	4b61      	ldr	r3, [pc, #388]	; (800209c <HAL_RCC_OscConfig+0x4c4>)
 8001f16:	6a1b      	ldr	r3, [r3, #32]
 8001f18:	4a60      	ldr	r2, [pc, #384]	; (800209c <HAL_RCC_OscConfig+0x4c4>)
 8001f1a:	f043 0304 	orr.w	r3, r3, #4
 8001f1e:	6213      	str	r3, [r2, #32]
 8001f20:	4b5e      	ldr	r3, [pc, #376]	; (800209c <HAL_RCC_OscConfig+0x4c4>)
 8001f22:	6a1b      	ldr	r3, [r3, #32]
 8001f24:	4a5d      	ldr	r2, [pc, #372]	; (800209c <HAL_RCC_OscConfig+0x4c4>)
 8001f26:	f043 0301 	orr.w	r3, r3, #1
 8001f2a:	6213      	str	r3, [r2, #32]
 8001f2c:	e00b      	b.n	8001f46 <HAL_RCC_OscConfig+0x36e>
 8001f2e:	4b5b      	ldr	r3, [pc, #364]	; (800209c <HAL_RCC_OscConfig+0x4c4>)
 8001f30:	6a1b      	ldr	r3, [r3, #32]
 8001f32:	4a5a      	ldr	r2, [pc, #360]	; (800209c <HAL_RCC_OscConfig+0x4c4>)
 8001f34:	f023 0301 	bic.w	r3, r3, #1
 8001f38:	6213      	str	r3, [r2, #32]
 8001f3a:	4b58      	ldr	r3, [pc, #352]	; (800209c <HAL_RCC_OscConfig+0x4c4>)
 8001f3c:	6a1b      	ldr	r3, [r3, #32]
 8001f3e:	4a57      	ldr	r2, [pc, #348]	; (800209c <HAL_RCC_OscConfig+0x4c4>)
 8001f40:	f023 0304 	bic.w	r3, r3, #4
 8001f44:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	68db      	ldr	r3, [r3, #12]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d015      	beq.n	8001f7a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f4e:	f7ff fb5f 	bl	8001610 <HAL_GetTick>
 8001f52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f54:	e00a      	b.n	8001f6c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f56:	f7ff fb5b 	bl	8001610 <HAL_GetTick>
 8001f5a:	4602      	mov	r2, r0
 8001f5c:	693b      	ldr	r3, [r7, #16]
 8001f5e:	1ad3      	subs	r3, r2, r3
 8001f60:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d901      	bls.n	8001f6c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001f68:	2303      	movs	r3, #3
 8001f6a:	e0b1      	b.n	80020d0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f6c:	4b4b      	ldr	r3, [pc, #300]	; (800209c <HAL_RCC_OscConfig+0x4c4>)
 8001f6e:	6a1b      	ldr	r3, [r3, #32]
 8001f70:	f003 0302 	and.w	r3, r3, #2
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d0ee      	beq.n	8001f56 <HAL_RCC_OscConfig+0x37e>
 8001f78:	e014      	b.n	8001fa4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f7a:	f7ff fb49 	bl	8001610 <HAL_GetTick>
 8001f7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f80:	e00a      	b.n	8001f98 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f82:	f7ff fb45 	bl	8001610 <HAL_GetTick>
 8001f86:	4602      	mov	r2, r0
 8001f88:	693b      	ldr	r3, [r7, #16]
 8001f8a:	1ad3      	subs	r3, r2, r3
 8001f8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d901      	bls.n	8001f98 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001f94:	2303      	movs	r3, #3
 8001f96:	e09b      	b.n	80020d0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f98:	4b40      	ldr	r3, [pc, #256]	; (800209c <HAL_RCC_OscConfig+0x4c4>)
 8001f9a:	6a1b      	ldr	r3, [r3, #32]
 8001f9c:	f003 0302 	and.w	r3, r3, #2
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d1ee      	bne.n	8001f82 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001fa4:	7dfb      	ldrb	r3, [r7, #23]
 8001fa6:	2b01      	cmp	r3, #1
 8001fa8:	d105      	bne.n	8001fb6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001faa:	4b3c      	ldr	r3, [pc, #240]	; (800209c <HAL_RCC_OscConfig+0x4c4>)
 8001fac:	69db      	ldr	r3, [r3, #28]
 8001fae:	4a3b      	ldr	r2, [pc, #236]	; (800209c <HAL_RCC_OscConfig+0x4c4>)
 8001fb0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fb4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	69db      	ldr	r3, [r3, #28]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	f000 8087 	beq.w	80020ce <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001fc0:	4b36      	ldr	r3, [pc, #216]	; (800209c <HAL_RCC_OscConfig+0x4c4>)
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	f003 030c 	and.w	r3, r3, #12
 8001fc8:	2b08      	cmp	r3, #8
 8001fca:	d061      	beq.n	8002090 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	69db      	ldr	r3, [r3, #28]
 8001fd0:	2b02      	cmp	r3, #2
 8001fd2:	d146      	bne.n	8002062 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fd4:	4b33      	ldr	r3, [pc, #204]	; (80020a4 <HAL_RCC_OscConfig+0x4cc>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fda:	f7ff fb19 	bl	8001610 <HAL_GetTick>
 8001fde:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fe0:	e008      	b.n	8001ff4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fe2:	f7ff fb15 	bl	8001610 <HAL_GetTick>
 8001fe6:	4602      	mov	r2, r0
 8001fe8:	693b      	ldr	r3, [r7, #16]
 8001fea:	1ad3      	subs	r3, r2, r3
 8001fec:	2b02      	cmp	r3, #2
 8001fee:	d901      	bls.n	8001ff4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001ff0:	2303      	movs	r3, #3
 8001ff2:	e06d      	b.n	80020d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ff4:	4b29      	ldr	r3, [pc, #164]	; (800209c <HAL_RCC_OscConfig+0x4c4>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d1f0      	bne.n	8001fe2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6a1b      	ldr	r3, [r3, #32]
 8002004:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002008:	d108      	bne.n	800201c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800200a:	4b24      	ldr	r3, [pc, #144]	; (800209c <HAL_RCC_OscConfig+0x4c4>)
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	689b      	ldr	r3, [r3, #8]
 8002016:	4921      	ldr	r1, [pc, #132]	; (800209c <HAL_RCC_OscConfig+0x4c4>)
 8002018:	4313      	orrs	r3, r2
 800201a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800201c:	4b1f      	ldr	r3, [pc, #124]	; (800209c <HAL_RCC_OscConfig+0x4c4>)
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6a19      	ldr	r1, [r3, #32]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800202c:	430b      	orrs	r3, r1
 800202e:	491b      	ldr	r1, [pc, #108]	; (800209c <HAL_RCC_OscConfig+0x4c4>)
 8002030:	4313      	orrs	r3, r2
 8002032:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002034:	4b1b      	ldr	r3, [pc, #108]	; (80020a4 <HAL_RCC_OscConfig+0x4cc>)
 8002036:	2201      	movs	r2, #1
 8002038:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800203a:	f7ff fae9 	bl	8001610 <HAL_GetTick>
 800203e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002040:	e008      	b.n	8002054 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002042:	f7ff fae5 	bl	8001610 <HAL_GetTick>
 8002046:	4602      	mov	r2, r0
 8002048:	693b      	ldr	r3, [r7, #16]
 800204a:	1ad3      	subs	r3, r2, r3
 800204c:	2b02      	cmp	r3, #2
 800204e:	d901      	bls.n	8002054 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002050:	2303      	movs	r3, #3
 8002052:	e03d      	b.n	80020d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002054:	4b11      	ldr	r3, [pc, #68]	; (800209c <HAL_RCC_OscConfig+0x4c4>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800205c:	2b00      	cmp	r3, #0
 800205e:	d0f0      	beq.n	8002042 <HAL_RCC_OscConfig+0x46a>
 8002060:	e035      	b.n	80020ce <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002062:	4b10      	ldr	r3, [pc, #64]	; (80020a4 <HAL_RCC_OscConfig+0x4cc>)
 8002064:	2200      	movs	r2, #0
 8002066:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002068:	f7ff fad2 	bl	8001610 <HAL_GetTick>
 800206c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800206e:	e008      	b.n	8002082 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002070:	f7ff face 	bl	8001610 <HAL_GetTick>
 8002074:	4602      	mov	r2, r0
 8002076:	693b      	ldr	r3, [r7, #16]
 8002078:	1ad3      	subs	r3, r2, r3
 800207a:	2b02      	cmp	r3, #2
 800207c:	d901      	bls.n	8002082 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800207e:	2303      	movs	r3, #3
 8002080:	e026      	b.n	80020d0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002082:	4b06      	ldr	r3, [pc, #24]	; (800209c <HAL_RCC_OscConfig+0x4c4>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800208a:	2b00      	cmp	r3, #0
 800208c:	d1f0      	bne.n	8002070 <HAL_RCC_OscConfig+0x498>
 800208e:	e01e      	b.n	80020ce <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	69db      	ldr	r3, [r3, #28]
 8002094:	2b01      	cmp	r3, #1
 8002096:	d107      	bne.n	80020a8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002098:	2301      	movs	r3, #1
 800209a:	e019      	b.n	80020d0 <HAL_RCC_OscConfig+0x4f8>
 800209c:	40021000 	.word	0x40021000
 80020a0:	40007000 	.word	0x40007000
 80020a4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80020a8:	4b0b      	ldr	r3, [pc, #44]	; (80020d8 <HAL_RCC_OscConfig+0x500>)
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6a1b      	ldr	r3, [r3, #32]
 80020b8:	429a      	cmp	r2, r3
 80020ba:	d106      	bne.n	80020ca <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020c6:	429a      	cmp	r2, r3
 80020c8:	d001      	beq.n	80020ce <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80020ca:	2301      	movs	r3, #1
 80020cc:	e000      	b.n	80020d0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80020ce:	2300      	movs	r3, #0
}
 80020d0:	4618      	mov	r0, r3
 80020d2:	3718      	adds	r7, #24
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd80      	pop	{r7, pc}
 80020d8:	40021000 	.word	0x40021000

080020dc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b084      	sub	sp, #16
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
 80020e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d101      	bne.n	80020f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020ec:	2301      	movs	r3, #1
 80020ee:	e0d0      	b.n	8002292 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80020f0:	4b6a      	ldr	r3, [pc, #424]	; (800229c <HAL_RCC_ClockConfig+0x1c0>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f003 0307 	and.w	r3, r3, #7
 80020f8:	683a      	ldr	r2, [r7, #0]
 80020fa:	429a      	cmp	r2, r3
 80020fc:	d910      	bls.n	8002120 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020fe:	4b67      	ldr	r3, [pc, #412]	; (800229c <HAL_RCC_ClockConfig+0x1c0>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f023 0207 	bic.w	r2, r3, #7
 8002106:	4965      	ldr	r1, [pc, #404]	; (800229c <HAL_RCC_ClockConfig+0x1c0>)
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	4313      	orrs	r3, r2
 800210c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800210e:	4b63      	ldr	r3, [pc, #396]	; (800229c <HAL_RCC_ClockConfig+0x1c0>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f003 0307 	and.w	r3, r3, #7
 8002116:	683a      	ldr	r2, [r7, #0]
 8002118:	429a      	cmp	r2, r3
 800211a:	d001      	beq.n	8002120 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800211c:	2301      	movs	r3, #1
 800211e:	e0b8      	b.n	8002292 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f003 0302 	and.w	r3, r3, #2
 8002128:	2b00      	cmp	r3, #0
 800212a:	d020      	beq.n	800216e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f003 0304 	and.w	r3, r3, #4
 8002134:	2b00      	cmp	r3, #0
 8002136:	d005      	beq.n	8002144 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002138:	4b59      	ldr	r3, [pc, #356]	; (80022a0 <HAL_RCC_ClockConfig+0x1c4>)
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	4a58      	ldr	r2, [pc, #352]	; (80022a0 <HAL_RCC_ClockConfig+0x1c4>)
 800213e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002142:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f003 0308 	and.w	r3, r3, #8
 800214c:	2b00      	cmp	r3, #0
 800214e:	d005      	beq.n	800215c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002150:	4b53      	ldr	r3, [pc, #332]	; (80022a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	4a52      	ldr	r2, [pc, #328]	; (80022a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002156:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800215a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800215c:	4b50      	ldr	r3, [pc, #320]	; (80022a0 <HAL_RCC_ClockConfig+0x1c4>)
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	689b      	ldr	r3, [r3, #8]
 8002168:	494d      	ldr	r1, [pc, #308]	; (80022a0 <HAL_RCC_ClockConfig+0x1c4>)
 800216a:	4313      	orrs	r3, r2
 800216c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f003 0301 	and.w	r3, r3, #1
 8002176:	2b00      	cmp	r3, #0
 8002178:	d040      	beq.n	80021fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	2b01      	cmp	r3, #1
 8002180:	d107      	bne.n	8002192 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002182:	4b47      	ldr	r3, [pc, #284]	; (80022a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800218a:	2b00      	cmp	r3, #0
 800218c:	d115      	bne.n	80021ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800218e:	2301      	movs	r3, #1
 8002190:	e07f      	b.n	8002292 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	2b02      	cmp	r3, #2
 8002198:	d107      	bne.n	80021aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800219a:	4b41      	ldr	r3, [pc, #260]	; (80022a0 <HAL_RCC_ClockConfig+0x1c4>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d109      	bne.n	80021ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021a6:	2301      	movs	r3, #1
 80021a8:	e073      	b.n	8002292 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021aa:	4b3d      	ldr	r3, [pc, #244]	; (80022a0 <HAL_RCC_ClockConfig+0x1c4>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f003 0302 	and.w	r3, r3, #2
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d101      	bne.n	80021ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021b6:	2301      	movs	r3, #1
 80021b8:	e06b      	b.n	8002292 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021ba:	4b39      	ldr	r3, [pc, #228]	; (80022a0 <HAL_RCC_ClockConfig+0x1c4>)
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	f023 0203 	bic.w	r2, r3, #3
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	4936      	ldr	r1, [pc, #216]	; (80022a0 <HAL_RCC_ClockConfig+0x1c4>)
 80021c8:	4313      	orrs	r3, r2
 80021ca:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021cc:	f7ff fa20 	bl	8001610 <HAL_GetTick>
 80021d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021d2:	e00a      	b.n	80021ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021d4:	f7ff fa1c 	bl	8001610 <HAL_GetTick>
 80021d8:	4602      	mov	r2, r0
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	1ad3      	subs	r3, r2, r3
 80021de:	f241 3288 	movw	r2, #5000	; 0x1388
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d901      	bls.n	80021ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80021e6:	2303      	movs	r3, #3
 80021e8:	e053      	b.n	8002292 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021ea:	4b2d      	ldr	r3, [pc, #180]	; (80022a0 <HAL_RCC_ClockConfig+0x1c4>)
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	f003 020c 	and.w	r2, r3, #12
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	009b      	lsls	r3, r3, #2
 80021f8:	429a      	cmp	r2, r3
 80021fa:	d1eb      	bne.n	80021d4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80021fc:	4b27      	ldr	r3, [pc, #156]	; (800229c <HAL_RCC_ClockConfig+0x1c0>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f003 0307 	and.w	r3, r3, #7
 8002204:	683a      	ldr	r2, [r7, #0]
 8002206:	429a      	cmp	r2, r3
 8002208:	d210      	bcs.n	800222c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800220a:	4b24      	ldr	r3, [pc, #144]	; (800229c <HAL_RCC_ClockConfig+0x1c0>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f023 0207 	bic.w	r2, r3, #7
 8002212:	4922      	ldr	r1, [pc, #136]	; (800229c <HAL_RCC_ClockConfig+0x1c0>)
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	4313      	orrs	r3, r2
 8002218:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800221a:	4b20      	ldr	r3, [pc, #128]	; (800229c <HAL_RCC_ClockConfig+0x1c0>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f003 0307 	and.w	r3, r3, #7
 8002222:	683a      	ldr	r2, [r7, #0]
 8002224:	429a      	cmp	r2, r3
 8002226:	d001      	beq.n	800222c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002228:	2301      	movs	r3, #1
 800222a:	e032      	b.n	8002292 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f003 0304 	and.w	r3, r3, #4
 8002234:	2b00      	cmp	r3, #0
 8002236:	d008      	beq.n	800224a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002238:	4b19      	ldr	r3, [pc, #100]	; (80022a0 <HAL_RCC_ClockConfig+0x1c4>)
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	68db      	ldr	r3, [r3, #12]
 8002244:	4916      	ldr	r1, [pc, #88]	; (80022a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002246:	4313      	orrs	r3, r2
 8002248:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f003 0308 	and.w	r3, r3, #8
 8002252:	2b00      	cmp	r3, #0
 8002254:	d009      	beq.n	800226a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002256:	4b12      	ldr	r3, [pc, #72]	; (80022a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	691b      	ldr	r3, [r3, #16]
 8002262:	00db      	lsls	r3, r3, #3
 8002264:	490e      	ldr	r1, [pc, #56]	; (80022a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002266:	4313      	orrs	r3, r2
 8002268:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800226a:	f000 f821 	bl	80022b0 <HAL_RCC_GetSysClockFreq>
 800226e:	4602      	mov	r2, r0
 8002270:	4b0b      	ldr	r3, [pc, #44]	; (80022a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	091b      	lsrs	r3, r3, #4
 8002276:	f003 030f 	and.w	r3, r3, #15
 800227a:	490a      	ldr	r1, [pc, #40]	; (80022a4 <HAL_RCC_ClockConfig+0x1c8>)
 800227c:	5ccb      	ldrb	r3, [r1, r3]
 800227e:	fa22 f303 	lsr.w	r3, r2, r3
 8002282:	4a09      	ldr	r2, [pc, #36]	; (80022a8 <HAL_RCC_ClockConfig+0x1cc>)
 8002284:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002286:	4b09      	ldr	r3, [pc, #36]	; (80022ac <HAL_RCC_ClockConfig+0x1d0>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4618      	mov	r0, r3
 800228c:	f7ff f97e 	bl	800158c <HAL_InitTick>

  return HAL_OK;
 8002290:	2300      	movs	r3, #0
}
 8002292:	4618      	mov	r0, r3
 8002294:	3710      	adds	r7, #16
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}
 800229a:	bf00      	nop
 800229c:	40022000 	.word	0x40022000
 80022a0:	40021000 	.word	0x40021000
 80022a4:	08002c00 	.word	0x08002c00
 80022a8:	200000b0 	.word	0x200000b0
 80022ac:	200000d8 	.word	0x200000d8

080022b0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b087      	sub	sp, #28
 80022b4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80022b6:	2300      	movs	r3, #0
 80022b8:	60fb      	str	r3, [r7, #12]
 80022ba:	2300      	movs	r3, #0
 80022bc:	60bb      	str	r3, [r7, #8]
 80022be:	2300      	movs	r3, #0
 80022c0:	617b      	str	r3, [r7, #20]
 80022c2:	2300      	movs	r3, #0
 80022c4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80022c6:	2300      	movs	r3, #0
 80022c8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80022ca:	4b1e      	ldr	r3, [pc, #120]	; (8002344 <HAL_RCC_GetSysClockFreq+0x94>)
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	f003 030c 	and.w	r3, r3, #12
 80022d6:	2b04      	cmp	r3, #4
 80022d8:	d002      	beq.n	80022e0 <HAL_RCC_GetSysClockFreq+0x30>
 80022da:	2b08      	cmp	r3, #8
 80022dc:	d003      	beq.n	80022e6 <HAL_RCC_GetSysClockFreq+0x36>
 80022de:	e027      	b.n	8002330 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80022e0:	4b19      	ldr	r3, [pc, #100]	; (8002348 <HAL_RCC_GetSysClockFreq+0x98>)
 80022e2:	613b      	str	r3, [r7, #16]
      break;
 80022e4:	e027      	b.n	8002336 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	0c9b      	lsrs	r3, r3, #18
 80022ea:	f003 030f 	and.w	r3, r3, #15
 80022ee:	4a17      	ldr	r2, [pc, #92]	; (800234c <HAL_RCC_GetSysClockFreq+0x9c>)
 80022f0:	5cd3      	ldrb	r3, [r2, r3]
 80022f2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d010      	beq.n	8002320 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80022fe:	4b11      	ldr	r3, [pc, #68]	; (8002344 <HAL_RCC_GetSysClockFreq+0x94>)
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	0c5b      	lsrs	r3, r3, #17
 8002304:	f003 0301 	and.w	r3, r3, #1
 8002308:	4a11      	ldr	r2, [pc, #68]	; (8002350 <HAL_RCC_GetSysClockFreq+0xa0>)
 800230a:	5cd3      	ldrb	r3, [r2, r3]
 800230c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	4a0d      	ldr	r2, [pc, #52]	; (8002348 <HAL_RCC_GetSysClockFreq+0x98>)
 8002312:	fb03 f202 	mul.w	r2, r3, r2
 8002316:	68bb      	ldr	r3, [r7, #8]
 8002318:	fbb2 f3f3 	udiv	r3, r2, r3
 800231c:	617b      	str	r3, [r7, #20]
 800231e:	e004      	b.n	800232a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	4a0c      	ldr	r2, [pc, #48]	; (8002354 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002324:	fb02 f303 	mul.w	r3, r2, r3
 8002328:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	613b      	str	r3, [r7, #16]
      break;
 800232e:	e002      	b.n	8002336 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002330:	4b05      	ldr	r3, [pc, #20]	; (8002348 <HAL_RCC_GetSysClockFreq+0x98>)
 8002332:	613b      	str	r3, [r7, #16]
      break;
 8002334:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002336:	693b      	ldr	r3, [r7, #16]
}
 8002338:	4618      	mov	r0, r3
 800233a:	371c      	adds	r7, #28
 800233c:	46bd      	mov	sp, r7
 800233e:	bc80      	pop	{r7}
 8002340:	4770      	bx	lr
 8002342:	bf00      	nop
 8002344:	40021000 	.word	0x40021000
 8002348:	007a1200 	.word	0x007a1200
 800234c:	08002c10 	.word	0x08002c10
 8002350:	08002c20 	.word	0x08002c20
 8002354:	003d0900 	.word	0x003d0900

08002358 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002358:	b480      	push	{r7}
 800235a:	b085      	sub	sp, #20
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002360:	4b0a      	ldr	r3, [pc, #40]	; (800238c <RCC_Delay+0x34>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a0a      	ldr	r2, [pc, #40]	; (8002390 <RCC_Delay+0x38>)
 8002366:	fba2 2303 	umull	r2, r3, r2, r3
 800236a:	0a5b      	lsrs	r3, r3, #9
 800236c:	687a      	ldr	r2, [r7, #4]
 800236e:	fb02 f303 	mul.w	r3, r2, r3
 8002372:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002374:	bf00      	nop
  }
  while (Delay --);
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	1e5a      	subs	r2, r3, #1
 800237a:	60fa      	str	r2, [r7, #12]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d1f9      	bne.n	8002374 <RCC_Delay+0x1c>
}
 8002380:	bf00      	nop
 8002382:	bf00      	nop
 8002384:	3714      	adds	r7, #20
 8002386:	46bd      	mov	sp, r7
 8002388:	bc80      	pop	{r7}
 800238a:	4770      	bx	lr
 800238c:	200000b0 	.word	0x200000b0
 8002390:	10624dd3 	.word	0x10624dd3

08002394 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b082      	sub	sp, #8
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d101      	bne.n	80023a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	e041      	b.n	800242a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023ac:	b2db      	uxtb	r3, r3
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d106      	bne.n	80023c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2200      	movs	r2, #0
 80023b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80023ba:	6878      	ldr	r0, [r7, #4]
 80023bc:	f7fe fca6 	bl	8000d0c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2202      	movs	r2, #2
 80023c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681a      	ldr	r2, [r3, #0]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	3304      	adds	r3, #4
 80023d0:	4619      	mov	r1, r3
 80023d2:	4610      	mov	r0, r2
 80023d4:	f000 fa74 	bl	80028c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2201      	movs	r2, #1
 80023dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2201      	movs	r2, #1
 80023e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2201      	movs	r2, #1
 80023ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2201      	movs	r2, #1
 80023f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2201      	movs	r2, #1
 80023fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2201      	movs	r2, #1
 8002404:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2201      	movs	r2, #1
 800240c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2201      	movs	r2, #1
 8002414:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2201      	movs	r2, #1
 800241c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2201      	movs	r2, #1
 8002424:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002428:	2300      	movs	r3, #0
}
 800242a:	4618      	mov	r0, r3
 800242c:	3708      	adds	r7, #8
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}
	...

08002434 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002434:	b480      	push	{r7}
 8002436:	b085      	sub	sp, #20
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002442:	b2db      	uxtb	r3, r3
 8002444:	2b01      	cmp	r3, #1
 8002446:	d001      	beq.n	800244c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002448:	2301      	movs	r3, #1
 800244a:	e03a      	b.n	80024c2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2202      	movs	r2, #2
 8002450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	68da      	ldr	r2, [r3, #12]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f042 0201 	orr.w	r2, r2, #1
 8002462:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a18      	ldr	r2, [pc, #96]	; (80024cc <HAL_TIM_Base_Start_IT+0x98>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d00e      	beq.n	800248c <HAL_TIM_Base_Start_IT+0x58>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002476:	d009      	beq.n	800248c <HAL_TIM_Base_Start_IT+0x58>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a14      	ldr	r2, [pc, #80]	; (80024d0 <HAL_TIM_Base_Start_IT+0x9c>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d004      	beq.n	800248c <HAL_TIM_Base_Start_IT+0x58>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4a13      	ldr	r2, [pc, #76]	; (80024d4 <HAL_TIM_Base_Start_IT+0xa0>)
 8002488:	4293      	cmp	r3, r2
 800248a:	d111      	bne.n	80024b0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	f003 0307 	and.w	r3, r3, #7
 8002496:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	2b06      	cmp	r3, #6
 800249c:	d010      	beq.n	80024c0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	681a      	ldr	r2, [r3, #0]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f042 0201 	orr.w	r2, r2, #1
 80024ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024ae:	e007      	b.n	80024c0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	681a      	ldr	r2, [r3, #0]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f042 0201 	orr.w	r2, r2, #1
 80024be:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80024c0:	2300      	movs	r3, #0
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	3714      	adds	r7, #20
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bc80      	pop	{r7}
 80024ca:	4770      	bx	lr
 80024cc:	40012c00 	.word	0x40012c00
 80024d0:	40000400 	.word	0x40000400
 80024d4:	40000800 	.word	0x40000800

080024d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b082      	sub	sp, #8
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	691b      	ldr	r3, [r3, #16]
 80024e6:	f003 0302 	and.w	r3, r3, #2
 80024ea:	2b02      	cmp	r3, #2
 80024ec:	d122      	bne.n	8002534 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	68db      	ldr	r3, [r3, #12]
 80024f4:	f003 0302 	and.w	r3, r3, #2
 80024f8:	2b02      	cmp	r3, #2
 80024fa:	d11b      	bne.n	8002534 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f06f 0202 	mvn.w	r2, #2
 8002504:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2201      	movs	r2, #1
 800250a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	699b      	ldr	r3, [r3, #24]
 8002512:	f003 0303 	and.w	r3, r3, #3
 8002516:	2b00      	cmp	r3, #0
 8002518:	d003      	beq.n	8002522 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800251a:	6878      	ldr	r0, [r7, #4]
 800251c:	f000 f9b4 	bl	8002888 <HAL_TIM_IC_CaptureCallback>
 8002520:	e005      	b.n	800252e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002522:	6878      	ldr	r0, [r7, #4]
 8002524:	f000 f9a7 	bl	8002876 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002528:	6878      	ldr	r0, [r7, #4]
 800252a:	f000 f9b6 	bl	800289a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2200      	movs	r2, #0
 8002532:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	691b      	ldr	r3, [r3, #16]
 800253a:	f003 0304 	and.w	r3, r3, #4
 800253e:	2b04      	cmp	r3, #4
 8002540:	d122      	bne.n	8002588 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	68db      	ldr	r3, [r3, #12]
 8002548:	f003 0304 	and.w	r3, r3, #4
 800254c:	2b04      	cmp	r3, #4
 800254e:	d11b      	bne.n	8002588 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f06f 0204 	mvn.w	r2, #4
 8002558:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2202      	movs	r2, #2
 800255e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	699b      	ldr	r3, [r3, #24]
 8002566:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800256a:	2b00      	cmp	r3, #0
 800256c:	d003      	beq.n	8002576 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800256e:	6878      	ldr	r0, [r7, #4]
 8002570:	f000 f98a 	bl	8002888 <HAL_TIM_IC_CaptureCallback>
 8002574:	e005      	b.n	8002582 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002576:	6878      	ldr	r0, [r7, #4]
 8002578:	f000 f97d 	bl	8002876 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800257c:	6878      	ldr	r0, [r7, #4]
 800257e:	f000 f98c 	bl	800289a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2200      	movs	r2, #0
 8002586:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	691b      	ldr	r3, [r3, #16]
 800258e:	f003 0308 	and.w	r3, r3, #8
 8002592:	2b08      	cmp	r3, #8
 8002594:	d122      	bne.n	80025dc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	68db      	ldr	r3, [r3, #12]
 800259c:	f003 0308 	and.w	r3, r3, #8
 80025a0:	2b08      	cmp	r3, #8
 80025a2:	d11b      	bne.n	80025dc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f06f 0208 	mvn.w	r2, #8
 80025ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2204      	movs	r2, #4
 80025b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	69db      	ldr	r3, [r3, #28]
 80025ba:	f003 0303 	and.w	r3, r3, #3
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d003      	beq.n	80025ca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025c2:	6878      	ldr	r0, [r7, #4]
 80025c4:	f000 f960 	bl	8002888 <HAL_TIM_IC_CaptureCallback>
 80025c8:	e005      	b.n	80025d6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025ca:	6878      	ldr	r0, [r7, #4]
 80025cc:	f000 f953 	bl	8002876 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025d0:	6878      	ldr	r0, [r7, #4]
 80025d2:	f000 f962 	bl	800289a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2200      	movs	r2, #0
 80025da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	691b      	ldr	r3, [r3, #16]
 80025e2:	f003 0310 	and.w	r3, r3, #16
 80025e6:	2b10      	cmp	r3, #16
 80025e8:	d122      	bne.n	8002630 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	68db      	ldr	r3, [r3, #12]
 80025f0:	f003 0310 	and.w	r3, r3, #16
 80025f4:	2b10      	cmp	r3, #16
 80025f6:	d11b      	bne.n	8002630 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f06f 0210 	mvn.w	r2, #16
 8002600:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2208      	movs	r2, #8
 8002606:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	69db      	ldr	r3, [r3, #28]
 800260e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002612:	2b00      	cmp	r3, #0
 8002614:	d003      	beq.n	800261e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002616:	6878      	ldr	r0, [r7, #4]
 8002618:	f000 f936 	bl	8002888 <HAL_TIM_IC_CaptureCallback>
 800261c:	e005      	b.n	800262a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800261e:	6878      	ldr	r0, [r7, #4]
 8002620:	f000 f929 	bl	8002876 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002624:	6878      	ldr	r0, [r7, #4]
 8002626:	f000 f938 	bl	800289a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2200      	movs	r2, #0
 800262e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	691b      	ldr	r3, [r3, #16]
 8002636:	f003 0301 	and.w	r3, r3, #1
 800263a:	2b01      	cmp	r3, #1
 800263c:	d10e      	bne.n	800265c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	68db      	ldr	r3, [r3, #12]
 8002644:	f003 0301 	and.w	r3, r3, #1
 8002648:	2b01      	cmp	r3, #1
 800264a:	d107      	bne.n	800265c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f06f 0201 	mvn.w	r2, #1
 8002654:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002656:	6878      	ldr	r0, [r7, #4]
 8002658:	f7fe fad4 	bl	8000c04 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	691b      	ldr	r3, [r3, #16]
 8002662:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002666:	2b80      	cmp	r3, #128	; 0x80
 8002668:	d10e      	bne.n	8002688 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	68db      	ldr	r3, [r3, #12]
 8002670:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002674:	2b80      	cmp	r3, #128	; 0x80
 8002676:	d107      	bne.n	8002688 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002680:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002682:	6878      	ldr	r0, [r7, #4]
 8002684:	f000 fa7b 	bl	8002b7e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	691b      	ldr	r3, [r3, #16]
 800268e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002692:	2b40      	cmp	r3, #64	; 0x40
 8002694:	d10e      	bne.n	80026b4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	68db      	ldr	r3, [r3, #12]
 800269c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026a0:	2b40      	cmp	r3, #64	; 0x40
 80026a2:	d107      	bne.n	80026b4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80026ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80026ae:	6878      	ldr	r0, [r7, #4]
 80026b0:	f000 f8fc 	bl	80028ac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	691b      	ldr	r3, [r3, #16]
 80026ba:	f003 0320 	and.w	r3, r3, #32
 80026be:	2b20      	cmp	r3, #32
 80026c0:	d10e      	bne.n	80026e0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	68db      	ldr	r3, [r3, #12]
 80026c8:	f003 0320 	and.w	r3, r3, #32
 80026cc:	2b20      	cmp	r3, #32
 80026ce:	d107      	bne.n	80026e0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f06f 0220 	mvn.w	r2, #32
 80026d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80026da:	6878      	ldr	r0, [r7, #4]
 80026dc:	f000 fa46 	bl	8002b6c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80026e0:	bf00      	nop
 80026e2:	3708      	adds	r7, #8
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bd80      	pop	{r7, pc}

080026e8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b084      	sub	sp, #16
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
 80026f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80026f2:	2300      	movs	r3, #0
 80026f4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026fc:	2b01      	cmp	r3, #1
 80026fe:	d101      	bne.n	8002704 <HAL_TIM_ConfigClockSource+0x1c>
 8002700:	2302      	movs	r3, #2
 8002702:	e0b4      	b.n	800286e <HAL_TIM_ConfigClockSource+0x186>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2201      	movs	r2, #1
 8002708:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2202      	movs	r2, #2
 8002710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	689b      	ldr	r3, [r3, #8]
 800271a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002722:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800272a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	68ba      	ldr	r2, [r7, #8]
 8002732:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800273c:	d03e      	beq.n	80027bc <HAL_TIM_ConfigClockSource+0xd4>
 800273e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002742:	f200 8087 	bhi.w	8002854 <HAL_TIM_ConfigClockSource+0x16c>
 8002746:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800274a:	f000 8086 	beq.w	800285a <HAL_TIM_ConfigClockSource+0x172>
 800274e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002752:	d87f      	bhi.n	8002854 <HAL_TIM_ConfigClockSource+0x16c>
 8002754:	2b70      	cmp	r3, #112	; 0x70
 8002756:	d01a      	beq.n	800278e <HAL_TIM_ConfigClockSource+0xa6>
 8002758:	2b70      	cmp	r3, #112	; 0x70
 800275a:	d87b      	bhi.n	8002854 <HAL_TIM_ConfigClockSource+0x16c>
 800275c:	2b60      	cmp	r3, #96	; 0x60
 800275e:	d050      	beq.n	8002802 <HAL_TIM_ConfigClockSource+0x11a>
 8002760:	2b60      	cmp	r3, #96	; 0x60
 8002762:	d877      	bhi.n	8002854 <HAL_TIM_ConfigClockSource+0x16c>
 8002764:	2b50      	cmp	r3, #80	; 0x50
 8002766:	d03c      	beq.n	80027e2 <HAL_TIM_ConfigClockSource+0xfa>
 8002768:	2b50      	cmp	r3, #80	; 0x50
 800276a:	d873      	bhi.n	8002854 <HAL_TIM_ConfigClockSource+0x16c>
 800276c:	2b40      	cmp	r3, #64	; 0x40
 800276e:	d058      	beq.n	8002822 <HAL_TIM_ConfigClockSource+0x13a>
 8002770:	2b40      	cmp	r3, #64	; 0x40
 8002772:	d86f      	bhi.n	8002854 <HAL_TIM_ConfigClockSource+0x16c>
 8002774:	2b30      	cmp	r3, #48	; 0x30
 8002776:	d064      	beq.n	8002842 <HAL_TIM_ConfigClockSource+0x15a>
 8002778:	2b30      	cmp	r3, #48	; 0x30
 800277a:	d86b      	bhi.n	8002854 <HAL_TIM_ConfigClockSource+0x16c>
 800277c:	2b20      	cmp	r3, #32
 800277e:	d060      	beq.n	8002842 <HAL_TIM_ConfigClockSource+0x15a>
 8002780:	2b20      	cmp	r3, #32
 8002782:	d867      	bhi.n	8002854 <HAL_TIM_ConfigClockSource+0x16c>
 8002784:	2b00      	cmp	r3, #0
 8002786:	d05c      	beq.n	8002842 <HAL_TIM_ConfigClockSource+0x15a>
 8002788:	2b10      	cmp	r3, #16
 800278a:	d05a      	beq.n	8002842 <HAL_TIM_ConfigClockSource+0x15a>
 800278c:	e062      	b.n	8002854 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800279e:	f000 f968 	bl	8002a72 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80027aa:	68bb      	ldr	r3, [r7, #8]
 80027ac:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80027b0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	68ba      	ldr	r2, [r7, #8]
 80027b8:	609a      	str	r2, [r3, #8]
      break;
 80027ba:	e04f      	b.n	800285c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80027cc:	f000 f951 	bl	8002a72 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	689a      	ldr	r2, [r3, #8]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80027de:	609a      	str	r2, [r3, #8]
      break;
 80027e0:	e03c      	b.n	800285c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80027ee:	461a      	mov	r2, r3
 80027f0:	f000 f8c8 	bl	8002984 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	2150      	movs	r1, #80	; 0x50
 80027fa:	4618      	mov	r0, r3
 80027fc:	f000 f91f 	bl	8002a3e <TIM_ITRx_SetConfig>
      break;
 8002800:	e02c      	b.n	800285c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800280e:	461a      	mov	r2, r3
 8002810:	f000 f8e6 	bl	80029e0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	2160      	movs	r1, #96	; 0x60
 800281a:	4618      	mov	r0, r3
 800281c:	f000 f90f 	bl	8002a3e <TIM_ITRx_SetConfig>
      break;
 8002820:	e01c      	b.n	800285c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800282e:	461a      	mov	r2, r3
 8002830:	f000 f8a8 	bl	8002984 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	2140      	movs	r1, #64	; 0x40
 800283a:	4618      	mov	r0, r3
 800283c:	f000 f8ff 	bl	8002a3e <TIM_ITRx_SetConfig>
      break;
 8002840:	e00c      	b.n	800285c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681a      	ldr	r2, [r3, #0]
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4619      	mov	r1, r3
 800284c:	4610      	mov	r0, r2
 800284e:	f000 f8f6 	bl	8002a3e <TIM_ITRx_SetConfig>
      break;
 8002852:	e003      	b.n	800285c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002854:	2301      	movs	r3, #1
 8002856:	73fb      	strb	r3, [r7, #15]
      break;
 8002858:	e000      	b.n	800285c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800285a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2201      	movs	r2, #1
 8002860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2200      	movs	r2, #0
 8002868:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800286c:	7bfb      	ldrb	r3, [r7, #15]
}
 800286e:	4618      	mov	r0, r3
 8002870:	3710      	adds	r7, #16
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}

08002876 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002876:	b480      	push	{r7}
 8002878:	b083      	sub	sp, #12
 800287a:	af00      	add	r7, sp, #0
 800287c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800287e:	bf00      	nop
 8002880:	370c      	adds	r7, #12
 8002882:	46bd      	mov	sp, r7
 8002884:	bc80      	pop	{r7}
 8002886:	4770      	bx	lr

08002888 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002888:	b480      	push	{r7}
 800288a:	b083      	sub	sp, #12
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002890:	bf00      	nop
 8002892:	370c      	adds	r7, #12
 8002894:	46bd      	mov	sp, r7
 8002896:	bc80      	pop	{r7}
 8002898:	4770      	bx	lr

0800289a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800289a:	b480      	push	{r7}
 800289c:	b083      	sub	sp, #12
 800289e:	af00      	add	r7, sp, #0
 80028a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80028a2:	bf00      	nop
 80028a4:	370c      	adds	r7, #12
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bc80      	pop	{r7}
 80028aa:	4770      	bx	lr

080028ac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b083      	sub	sp, #12
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80028b4:	bf00      	nop
 80028b6:	370c      	adds	r7, #12
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bc80      	pop	{r7}
 80028bc:	4770      	bx	lr
	...

080028c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b085      	sub	sp, #20
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
 80028c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	4a29      	ldr	r2, [pc, #164]	; (8002978 <TIM_Base_SetConfig+0xb8>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d00b      	beq.n	80028f0 <TIM_Base_SetConfig+0x30>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028de:	d007      	beq.n	80028f0 <TIM_Base_SetConfig+0x30>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	4a26      	ldr	r2, [pc, #152]	; (800297c <TIM_Base_SetConfig+0xbc>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d003      	beq.n	80028f0 <TIM_Base_SetConfig+0x30>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	4a25      	ldr	r2, [pc, #148]	; (8002980 <TIM_Base_SetConfig+0xc0>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d108      	bne.n	8002902 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	68fa      	ldr	r2, [r7, #12]
 80028fe:	4313      	orrs	r3, r2
 8002900:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	4a1c      	ldr	r2, [pc, #112]	; (8002978 <TIM_Base_SetConfig+0xb8>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d00b      	beq.n	8002922 <TIM_Base_SetConfig+0x62>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002910:	d007      	beq.n	8002922 <TIM_Base_SetConfig+0x62>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	4a19      	ldr	r2, [pc, #100]	; (800297c <TIM_Base_SetConfig+0xbc>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d003      	beq.n	8002922 <TIM_Base_SetConfig+0x62>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	4a18      	ldr	r2, [pc, #96]	; (8002980 <TIM_Base_SetConfig+0xc0>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d108      	bne.n	8002934 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002928:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	68db      	ldr	r3, [r3, #12]
 800292e:	68fa      	ldr	r2, [r7, #12]
 8002930:	4313      	orrs	r3, r2
 8002932:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	695b      	ldr	r3, [r3, #20]
 800293e:	4313      	orrs	r3, r2
 8002940:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	68fa      	ldr	r2, [r7, #12]
 8002946:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	689a      	ldr	r2, [r3, #8]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	681a      	ldr	r2, [r3, #0]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	4a07      	ldr	r2, [pc, #28]	; (8002978 <TIM_Base_SetConfig+0xb8>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d103      	bne.n	8002968 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	691a      	ldr	r2, [r3, #16]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2201      	movs	r2, #1
 800296c:	615a      	str	r2, [r3, #20]
}
 800296e:	bf00      	nop
 8002970:	3714      	adds	r7, #20
 8002972:	46bd      	mov	sp, r7
 8002974:	bc80      	pop	{r7}
 8002976:	4770      	bx	lr
 8002978:	40012c00 	.word	0x40012c00
 800297c:	40000400 	.word	0x40000400
 8002980:	40000800 	.word	0x40000800

08002984 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002984:	b480      	push	{r7}
 8002986:	b087      	sub	sp, #28
 8002988:	af00      	add	r7, sp, #0
 800298a:	60f8      	str	r0, [r7, #12]
 800298c:	60b9      	str	r1, [r7, #8]
 800298e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	6a1b      	ldr	r3, [r3, #32]
 8002994:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	6a1b      	ldr	r3, [r3, #32]
 800299a:	f023 0201 	bic.w	r2, r3, #1
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	699b      	ldr	r3, [r3, #24]
 80029a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80029a8:	693b      	ldr	r3, [r7, #16]
 80029aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80029ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	011b      	lsls	r3, r3, #4
 80029b4:	693a      	ldr	r2, [r7, #16]
 80029b6:	4313      	orrs	r3, r2
 80029b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	f023 030a 	bic.w	r3, r3, #10
 80029c0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80029c2:	697a      	ldr	r2, [r7, #20]
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	4313      	orrs	r3, r2
 80029c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	693a      	ldr	r2, [r7, #16]
 80029ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	697a      	ldr	r2, [r7, #20]
 80029d4:	621a      	str	r2, [r3, #32]
}
 80029d6:	bf00      	nop
 80029d8:	371c      	adds	r7, #28
 80029da:	46bd      	mov	sp, r7
 80029dc:	bc80      	pop	{r7}
 80029de:	4770      	bx	lr

080029e0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b087      	sub	sp, #28
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	60f8      	str	r0, [r7, #12]
 80029e8:	60b9      	str	r1, [r7, #8]
 80029ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	6a1b      	ldr	r3, [r3, #32]
 80029f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	6a1b      	ldr	r3, [r3, #32]
 80029f6:	f023 0210 	bic.w	r2, r3, #16
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	699b      	ldr	r3, [r3, #24]
 8002a02:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002a04:	693b      	ldr	r3, [r7, #16]
 8002a06:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002a0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	031b      	lsls	r3, r3, #12
 8002a10:	693a      	ldr	r2, [r7, #16]
 8002a12:	4313      	orrs	r3, r2
 8002a14:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002a16:	697b      	ldr	r3, [r7, #20]
 8002a18:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002a1c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002a1e:	68bb      	ldr	r3, [r7, #8]
 8002a20:	011b      	lsls	r3, r3, #4
 8002a22:	697a      	ldr	r2, [r7, #20]
 8002a24:	4313      	orrs	r3, r2
 8002a26:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	693a      	ldr	r2, [r7, #16]
 8002a2c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	697a      	ldr	r2, [r7, #20]
 8002a32:	621a      	str	r2, [r3, #32]
}
 8002a34:	bf00      	nop
 8002a36:	371c      	adds	r7, #28
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bc80      	pop	{r7}
 8002a3c:	4770      	bx	lr

08002a3e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002a3e:	b480      	push	{r7}
 8002a40:	b085      	sub	sp, #20
 8002a42:	af00      	add	r7, sp, #0
 8002a44:	6078      	str	r0, [r7, #4]
 8002a46:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a54:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002a56:	683a      	ldr	r2, [r7, #0]
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	f043 0307 	orr.w	r3, r3, #7
 8002a60:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	68fa      	ldr	r2, [r7, #12]
 8002a66:	609a      	str	r2, [r3, #8]
}
 8002a68:	bf00      	nop
 8002a6a:	3714      	adds	r7, #20
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bc80      	pop	{r7}
 8002a70:	4770      	bx	lr

08002a72 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002a72:	b480      	push	{r7}
 8002a74:	b087      	sub	sp, #28
 8002a76:	af00      	add	r7, sp, #0
 8002a78:	60f8      	str	r0, [r7, #12]
 8002a7a:	60b9      	str	r1, [r7, #8]
 8002a7c:	607a      	str	r2, [r7, #4]
 8002a7e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a86:	697b      	ldr	r3, [r7, #20]
 8002a88:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002a8c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	021a      	lsls	r2, r3, #8
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	431a      	orrs	r2, r3
 8002a96:	68bb      	ldr	r3, [r7, #8]
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	697a      	ldr	r2, [r7, #20]
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	697a      	ldr	r2, [r7, #20]
 8002aa4:	609a      	str	r2, [r3, #8]
}
 8002aa6:	bf00      	nop
 8002aa8:	371c      	adds	r7, #28
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bc80      	pop	{r7}
 8002aae:	4770      	bx	lr

08002ab0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b085      	sub	sp, #20
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
 8002ab8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ac0:	2b01      	cmp	r3, #1
 8002ac2:	d101      	bne.n	8002ac8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002ac4:	2302      	movs	r3, #2
 8002ac6:	e046      	b.n	8002b56 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2201      	movs	r2, #1
 8002acc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2202      	movs	r2, #2
 8002ad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	689b      	ldr	r3, [r3, #8]
 8002ae6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002aee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	68fa      	ldr	r2, [r7, #12]
 8002af6:	4313      	orrs	r3, r2
 8002af8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	68fa      	ldr	r2, [r7, #12]
 8002b00:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a16      	ldr	r2, [pc, #88]	; (8002b60 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d00e      	beq.n	8002b2a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b14:	d009      	beq.n	8002b2a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a12      	ldr	r2, [pc, #72]	; (8002b64 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d004      	beq.n	8002b2a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a10      	ldr	r2, [pc, #64]	; (8002b68 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d10c      	bne.n	8002b44 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002b2a:	68bb      	ldr	r3, [r7, #8]
 8002b2c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b30:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	68ba      	ldr	r2, [r7, #8]
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	68ba      	ldr	r2, [r7, #8]
 8002b42:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2201      	movs	r2, #1
 8002b48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002b54:	2300      	movs	r3, #0
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	3714      	adds	r7, #20
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bc80      	pop	{r7}
 8002b5e:	4770      	bx	lr
 8002b60:	40012c00 	.word	0x40012c00
 8002b64:	40000400 	.word	0x40000400
 8002b68:	40000800 	.word	0x40000800

08002b6c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	b083      	sub	sp, #12
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002b74:	bf00      	nop
 8002b76:	370c      	adds	r7, #12
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bc80      	pop	{r7}
 8002b7c:	4770      	bx	lr

08002b7e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002b7e:	b480      	push	{r7}
 8002b80:	b083      	sub	sp, #12
 8002b82:	af00      	add	r7, sp, #0
 8002b84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002b86:	bf00      	nop
 8002b88:	370c      	adds	r7, #12
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bc80      	pop	{r7}
 8002b8e:	4770      	bx	lr

08002b90 <memset>:
 8002b90:	4603      	mov	r3, r0
 8002b92:	4402      	add	r2, r0
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d100      	bne.n	8002b9a <memset+0xa>
 8002b98:	4770      	bx	lr
 8002b9a:	f803 1b01 	strb.w	r1, [r3], #1
 8002b9e:	e7f9      	b.n	8002b94 <memset+0x4>

08002ba0 <__libc_init_array>:
 8002ba0:	b570      	push	{r4, r5, r6, lr}
 8002ba2:	2600      	movs	r6, #0
 8002ba4:	4d0c      	ldr	r5, [pc, #48]	; (8002bd8 <__libc_init_array+0x38>)
 8002ba6:	4c0d      	ldr	r4, [pc, #52]	; (8002bdc <__libc_init_array+0x3c>)
 8002ba8:	1b64      	subs	r4, r4, r5
 8002baa:	10a4      	asrs	r4, r4, #2
 8002bac:	42a6      	cmp	r6, r4
 8002bae:	d109      	bne.n	8002bc4 <__libc_init_array+0x24>
 8002bb0:	f000 f81a 	bl	8002be8 <_init>
 8002bb4:	2600      	movs	r6, #0
 8002bb6:	4d0a      	ldr	r5, [pc, #40]	; (8002be0 <__libc_init_array+0x40>)
 8002bb8:	4c0a      	ldr	r4, [pc, #40]	; (8002be4 <__libc_init_array+0x44>)
 8002bba:	1b64      	subs	r4, r4, r5
 8002bbc:	10a4      	asrs	r4, r4, #2
 8002bbe:	42a6      	cmp	r6, r4
 8002bc0:	d105      	bne.n	8002bce <__libc_init_array+0x2e>
 8002bc2:	bd70      	pop	{r4, r5, r6, pc}
 8002bc4:	f855 3b04 	ldr.w	r3, [r5], #4
 8002bc8:	4798      	blx	r3
 8002bca:	3601      	adds	r6, #1
 8002bcc:	e7ee      	b.n	8002bac <__libc_init_array+0xc>
 8002bce:	f855 3b04 	ldr.w	r3, [r5], #4
 8002bd2:	4798      	blx	r3
 8002bd4:	3601      	adds	r6, #1
 8002bd6:	e7f2      	b.n	8002bbe <__libc_init_array+0x1e>
 8002bd8:	08002c24 	.word	0x08002c24
 8002bdc:	08002c24 	.word	0x08002c24
 8002be0:	08002c24 	.word	0x08002c24
 8002be4:	08002c28 	.word	0x08002c28

08002be8 <_init>:
 8002be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bea:	bf00      	nop
 8002bec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bee:	bc08      	pop	{r3}
 8002bf0:	469e      	mov	lr, r3
 8002bf2:	4770      	bx	lr

08002bf4 <_fini>:
 8002bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bf6:	bf00      	nop
 8002bf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bfa:	bc08      	pop	{r3}
 8002bfc:	469e      	mov	lr, r3
 8002bfe:	4770      	bx	lr
