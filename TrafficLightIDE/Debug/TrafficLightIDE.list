
TrafficLightIDE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000025ac  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  080026b8  080026b8  000126b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080026dc  080026dc  000200a8  2**0
                  CONTENTS
  4 .ARM          00000000  080026dc  080026dc  000200a8  2**0
                  CONTENTS
  5 .preinit_array 00000000  080026dc  080026dc  000200a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080026dc  080026dc  000126dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080026e0  080026e0  000126e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a8  20000000  080026e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000094  200000a8  0800278c  000200a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000013c  0800278c  0002013c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000948c  00000000  00000000  000200d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b73  00000000  00000000  0002955d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a40  00000000  00000000  0002b0d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000930  00000000  00000000  0002bb10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000170a8  00000000  00000000  0002c440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b950  00000000  00000000  000434e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000846d3  00000000  00000000  0004ee38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d350b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002860  00000000  00000000  000d3560  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000a8 	.word	0x200000a8
 8000128:	00000000 	.word	0x00000000
 800012c:	080026a0 	.word	0x080026a0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000ac 	.word	0x200000ac
 8000148:	080026a0 	.word	0x080026a0

0800014c <isButtonPressed>:
int KeyReg1 [4] = {NORMAL_STATE, NORMAL_STATE, NORMAL_STATE, NORMAL_STATE};
int KeyReg2 [4] = {NORMAL_STATE, NORMAL_STATE, NORMAL_STATE, NORMAL_STATE};
int KeyReg3 [4] = {NORMAL_STATE, NORMAL_STATE, NORMAL_STATE, NORMAL_STATE};
int TimerForKeyPress [4] = {500, 500, 500, 500};

int isButtonPressed(int btn){
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	if (btn_flag[btn] == 1){
 8000154:	4a09      	ldr	r2, [pc, #36]	; (800017c <isButtonPressed+0x30>)
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800015c:	2b01      	cmp	r3, #1
 800015e:	d106      	bne.n	800016e <isButtonPressed+0x22>
		btn_flag[btn] = 0;
 8000160:	4a06      	ldr	r2, [pc, #24]	; (800017c <isButtonPressed+0x30>)
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	2100      	movs	r1, #0
 8000166:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 800016a:	2301      	movs	r3, #1
 800016c:	e000      	b.n	8000170 <isButtonPressed+0x24>
	}
	return 0;
 800016e:	2300      	movs	r3, #0
}
 8000170:	4618      	mov	r0, r3
 8000172:	370c      	adds	r7, #12
 8000174:	46bd      	mov	sp, r7
 8000176:	bc80      	pop	{r7}
 8000178:	4770      	bx	lr
 800017a:	bf00      	nop
 800017c:	200000c4 	.word	0x200000c4

08000180 <subKeyProcess>:

void subKeyProcess(int btn){
 8000180:	b480      	push	{r7}
 8000182:	b083      	sub	sp, #12
 8000184:	af00      	add	r7, sp, #0
 8000186:	6078      	str	r0, [r7, #4]
	btn_flag[btn] = 1;
 8000188:	4a04      	ldr	r2, [pc, #16]	; (800019c <subKeyProcess+0x1c>)
 800018a:	687b      	ldr	r3, [r7, #4]
 800018c:	2101      	movs	r1, #1
 800018e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000192:	bf00      	nop
 8000194:	370c      	adds	r7, #12
 8000196:	46bd      	mov	sp, r7
 8000198:	bc80      	pop	{r7}
 800019a:	4770      	bx	lr
 800019c:	200000c4 	.word	0x200000c4

080001a0 <getKeyInput>:


void getKeyInput(int btn){
 80001a0:	b580      	push	{r7, lr}
 80001a2:	b082      	sub	sp, #8
 80001a4:	af00      	add	r7, sp, #0
 80001a6:	6078      	str	r0, [r7, #4]
	KeyReg0[btn] = KeyReg1[btn];
 80001a8:	4a37      	ldr	r2, [pc, #220]	; (8000288 <getKeyInput+0xe8>)
 80001aa:	687b      	ldr	r3, [r7, #4]
 80001ac:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001b0:	4936      	ldr	r1, [pc, #216]	; (800028c <getKeyInput+0xec>)
 80001b2:	687b      	ldr	r3, [r7, #4]
 80001b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	KeyReg1[btn] = KeyReg2[btn];
 80001b8:	4a35      	ldr	r2, [pc, #212]	; (8000290 <getKeyInput+0xf0>)
 80001ba:	687b      	ldr	r3, [r7, #4]
 80001bc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001c0:	4931      	ldr	r1, [pc, #196]	; (8000288 <getKeyInput+0xe8>)
 80001c2:	687b      	ldr	r3, [r7, #4]
 80001c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	KeyReg2[btn] = HAL_GPIO_ReadPin(BTN_PORT[btn], BTN_PIN[btn]);
 80001c8:	4a32      	ldr	r2, [pc, #200]	; (8000294 <getKeyInput+0xf4>)
 80001ca:	687b      	ldr	r3, [r7, #4]
 80001cc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001d0:	4931      	ldr	r1, [pc, #196]	; (8000298 <getKeyInput+0xf8>)
 80001d2:	687b      	ldr	r3, [r7, #4]
 80001d4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80001d8:	4619      	mov	r1, r3
 80001da:	4610      	mov	r0, r2
 80001dc:	f001 fa66 	bl	80016ac <HAL_GPIO_ReadPin>
 80001e0:	4603      	mov	r3, r0
 80001e2:	4619      	mov	r1, r3
 80001e4:	4a2a      	ldr	r2, [pc, #168]	; (8000290 <getKeyInput+0xf0>)
 80001e6:	687b      	ldr	r3, [r7, #4]
 80001e8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	if ((KeyReg0[btn] == KeyReg1[btn]) && (KeyReg1[btn] == KeyReg2[btn])){
 80001ec:	4a27      	ldr	r2, [pc, #156]	; (800028c <getKeyInput+0xec>)
 80001ee:	687b      	ldr	r3, [r7, #4]
 80001f0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001f4:	4924      	ldr	r1, [pc, #144]	; (8000288 <getKeyInput+0xe8>)
 80001f6:	687b      	ldr	r3, [r7, #4]
 80001f8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80001fc:	429a      	cmp	r2, r3
 80001fe:	d13f      	bne.n	8000280 <getKeyInput+0xe0>
 8000200:	4a21      	ldr	r2, [pc, #132]	; (8000288 <getKeyInput+0xe8>)
 8000202:	687b      	ldr	r3, [r7, #4]
 8000204:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000208:	4921      	ldr	r1, [pc, #132]	; (8000290 <getKeyInput+0xf0>)
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000210:	429a      	cmp	r2, r3
 8000212:	d135      	bne.n	8000280 <getKeyInput+0xe0>
		if (KeyReg3[btn] != KeyReg2[btn]){
 8000214:	4a21      	ldr	r2, [pc, #132]	; (800029c <getKeyInput+0xfc>)
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800021c:	491c      	ldr	r1, [pc, #112]	; (8000290 <getKeyInput+0xf0>)
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000224:	429a      	cmp	r2, r3
 8000226:	d017      	beq.n	8000258 <getKeyInput+0xb8>
			KeyReg3[btn] = KeyReg2[btn];
 8000228:	4a19      	ldr	r2, [pc, #100]	; (8000290 <getKeyInput+0xf0>)
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000230:	491a      	ldr	r1, [pc, #104]	; (800029c <getKeyInput+0xfc>)
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if (KeyReg2[btn] == PRESSED_STATE){
 8000238:	4a15      	ldr	r2, [pc, #84]	; (8000290 <getKeyInput+0xf0>)
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000240:	2b00      	cmp	r3, #0
 8000242:	d11d      	bne.n	8000280 <getKeyInput+0xe0>
				subKeyProcess(btn);
 8000244:	6878      	ldr	r0, [r7, #4]
 8000246:	f7ff ff9b 	bl	8000180 <subKeyProcess>
				TimerForKeyPress[btn] = 500;
 800024a:	4a15      	ldr	r2, [pc, #84]	; (80002a0 <getKeyInput+0x100>)
 800024c:	687b      	ldr	r3, [r7, #4]
 800024e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000252:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			if (TimerForKeyPress[btn] <= 0){
				KeyReg3[btn] = NORMAL_STATE;
			}
		}
	}
}
 8000256:	e013      	b.n	8000280 <getKeyInput+0xe0>
			TimerForKeyPress[btn]--;
 8000258:	4a11      	ldr	r2, [pc, #68]	; (80002a0 <getKeyInput+0x100>)
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000260:	1e5a      	subs	r2, r3, #1
 8000262:	490f      	ldr	r1, [pc, #60]	; (80002a0 <getKeyInput+0x100>)
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if (TimerForKeyPress[btn] <= 0){
 800026a:	4a0d      	ldr	r2, [pc, #52]	; (80002a0 <getKeyInput+0x100>)
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000272:	2b00      	cmp	r3, #0
 8000274:	dc04      	bgt.n	8000280 <getKeyInput+0xe0>
				KeyReg3[btn] = NORMAL_STATE;
 8000276:	4a09      	ldr	r2, [pc, #36]	; (800029c <getKeyInput+0xfc>)
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	2101      	movs	r1, #1
 800027c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000280:	bf00      	nop
 8000282:	3708      	adds	r7, #8
 8000284:	46bd      	mov	sp, r7
 8000286:	bd80      	pop	{r7, pc}
 8000288:	20000028 	.word	0x20000028
 800028c:	20000018 	.word	0x20000018
 8000290:	20000038 	.word	0x20000038
 8000294:	20000000 	.word	0x20000000
 8000298:	20000010 	.word	0x20000010
 800029c:	20000048 	.word	0x20000048
 80002a0:	20000058 	.word	0x20000058

080002a4 <fsm_automatic_run>:
 *      Author: minht
 */

#include "fsm_automatic.h"

void fsm_automatic_run(int lane){
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b084      	sub	sp, #16
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	6078      	str	r0, [r7, #4]
	if (timer_counter[lane] % 100 == 0){
 80002ac:	4a5d      	ldr	r2, [pc, #372]	; (8000424 <fsm_automatic_run+0x180>)
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80002b4:	4b5c      	ldr	r3, [pc, #368]	; (8000428 <fsm_automatic_run+0x184>)
 80002b6:	fb83 1302 	smull	r1, r3, r3, r2
 80002ba:	1159      	asrs	r1, r3, #5
 80002bc:	17d3      	asrs	r3, r2, #31
 80002be:	1acb      	subs	r3, r1, r3
 80002c0:	2164      	movs	r1, #100	; 0x64
 80002c2:	fb01 f303 	mul.w	r3, r1, r3
 80002c6:	1ad3      	subs	r3, r2, r3
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d11c      	bne.n	8000306 <fsm_automatic_run+0x62>
		int remaining_time = timer_counter[lane] / 100;
 80002cc:	4a55      	ldr	r2, [pc, #340]	; (8000424 <fsm_automatic_run+0x180>)
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002d4:	4a54      	ldr	r2, [pc, #336]	; (8000428 <fsm_automatic_run+0x184>)
 80002d6:	fb82 1203 	smull	r1, r2, r2, r3
 80002da:	1152      	asrs	r2, r2, #5
 80002dc:	17db      	asrs	r3, r3, #31
 80002de:	1ad3      	subs	r3, r2, r3
 80002e0:	60fb      	str	r3, [r7, #12]
		if (lane == 0) display7SEG(remaining_time % 10);
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	2b00      	cmp	r3, #0
 80002e6:	d10e      	bne.n	8000306 <fsm_automatic_run+0x62>
 80002e8:	68fa      	ldr	r2, [r7, #12]
 80002ea:	4b50      	ldr	r3, [pc, #320]	; (800042c <fsm_automatic_run+0x188>)
 80002ec:	fb83 1302 	smull	r1, r3, r3, r2
 80002f0:	1099      	asrs	r1, r3, #2
 80002f2:	17d3      	asrs	r3, r2, #31
 80002f4:	1ac9      	subs	r1, r1, r3
 80002f6:	460b      	mov	r3, r1
 80002f8:	009b      	lsls	r3, r3, #2
 80002fa:	440b      	add	r3, r1
 80002fc:	005b      	lsls	r3, r3, #1
 80002fe:	1ad1      	subs	r1, r2, r3
 8000300:	4608      	mov	r0, r1
 8000302:	f000 fd11 	bl	8000d28 <display7SEG>
	}
	switch(LED_STATE[lane]){
 8000306:	4a4a      	ldr	r2, [pc, #296]	; (8000430 <fsm_automatic_run+0x18c>)
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800030e:	3b01      	subs	r3, #1
 8000310:	2b03      	cmp	r3, #3
 8000312:	d87a      	bhi.n	800040a <fsm_automatic_run+0x166>
 8000314:	a201      	add	r2, pc, #4	; (adr r2, 800031c <fsm_automatic_run+0x78>)
 8000316:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800031a:	bf00      	nop
 800031c:	0800032d 	.word	0x0800032d
 8000320:	0800037b 	.word	0x0800037b
 8000324:	080003ab 	.word	0x080003ab
 8000328:	080003db 	.word	0x080003db
		case INIT_STATE:
			setTrafficLightDefault(lane);
 800032c:	6878      	ldr	r0, [r7, #4]
 800032e:	f000 fc13 	bl	8000b58 <setTrafficLightDefault>
			if (lane == 0){
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	2b00      	cmp	r3, #0
 8000336:	d10e      	bne.n	8000356 <fsm_automatic_run+0xb2>
				LED_STATE[lane] = RED_STATE;
 8000338:	4a3d      	ldr	r2, [pc, #244]	; (8000430 <fsm_automatic_run+0x18c>)
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	2102      	movs	r1, #2
 800033e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				setTimer(lane, RED_DURATION*100);
 8000342:	4b3c      	ldr	r3, [pc, #240]	; (8000434 <fsm_automatic_run+0x190>)
 8000344:	681b      	ldr	r3, [r3, #0]
 8000346:	2264      	movs	r2, #100	; 0x64
 8000348:	fb02 f303 	mul.w	r3, r2, r3
 800034c:	4619      	mov	r1, r3
 800034e:	6878      	ldr	r0, [r7, #4]
 8000350:	f000 fb22 	bl	8000998 <setTimer>
			}
			else if (lane == 1){
				LED_STATE[lane] = GREEN_STATE;
				setTimer(lane, GREEN_DURATION*100);
			}
			break;
 8000354:	e05b      	b.n	800040e <fsm_automatic_run+0x16a>
			else if (lane == 1){
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	2b01      	cmp	r3, #1
 800035a:	d158      	bne.n	800040e <fsm_automatic_run+0x16a>
				LED_STATE[lane] = GREEN_STATE;
 800035c:	4a34      	ldr	r2, [pc, #208]	; (8000430 <fsm_automatic_run+0x18c>)
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	2103      	movs	r1, #3
 8000362:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				setTimer(lane, GREEN_DURATION*100);
 8000366:	4b34      	ldr	r3, [pc, #208]	; (8000438 <fsm_automatic_run+0x194>)
 8000368:	681b      	ldr	r3, [r3, #0]
 800036a:	2264      	movs	r2, #100	; 0x64
 800036c:	fb02 f303 	mul.w	r3, r2, r3
 8000370:	4619      	mov	r1, r3
 8000372:	6878      	ldr	r0, [r7, #4]
 8000374:	f000 fb10 	bl	8000998 <setTimer>
			break;
 8000378:	e049      	b.n	800040e <fsm_automatic_run+0x16a>
		case RED_STATE:
			setTrafficLightRed(lane);
 800037a:	6878      	ldr	r0, [r7, #4]
 800037c:	f000 fc26 	bl	8000bcc <setTrafficLightRed>
			if(timer_flag[lane] == 1){
 8000380:	4a2e      	ldr	r2, [pc, #184]	; (800043c <fsm_automatic_run+0x198>)
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000388:	2b01      	cmp	r3, #1
 800038a:	d142      	bne.n	8000412 <fsm_automatic_run+0x16e>
				LED_STATE[lane] = GREEN_STATE;
 800038c:	4a28      	ldr	r2, [pc, #160]	; (8000430 <fsm_automatic_run+0x18c>)
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	2103      	movs	r1, #3
 8000392:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				setTimer(lane, GREEN_DURATION*100);
 8000396:	4b28      	ldr	r3, [pc, #160]	; (8000438 <fsm_automatic_run+0x194>)
 8000398:	681b      	ldr	r3, [r3, #0]
 800039a:	2264      	movs	r2, #100	; 0x64
 800039c:	fb02 f303 	mul.w	r3, r2, r3
 80003a0:	4619      	mov	r1, r3
 80003a2:	6878      	ldr	r0, [r7, #4]
 80003a4:	f000 faf8 	bl	8000998 <setTimer>
			}
			break;
 80003a8:	e033      	b.n	8000412 <fsm_automatic_run+0x16e>
		case GREEN_STATE:
			setTrafficLightGreen(lane);
 80003aa:	6878      	ldr	r0, [r7, #4]
 80003ac:	f000 fc48 	bl	8000c40 <setTrafficLightGreen>
			if(timer_flag[lane] == 1){
 80003b0:	4a22      	ldr	r2, [pc, #136]	; (800043c <fsm_automatic_run+0x198>)
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80003b8:	2b01      	cmp	r3, #1
 80003ba:	d12c      	bne.n	8000416 <fsm_automatic_run+0x172>
				LED_STATE[lane] = YELLOW_STATE;
 80003bc:	4a1c      	ldr	r2, [pc, #112]	; (8000430 <fsm_automatic_run+0x18c>)
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	2104      	movs	r1, #4
 80003c2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				setTimer(lane, YELLOW_DURATION*100);
 80003c6:	4b1e      	ldr	r3, [pc, #120]	; (8000440 <fsm_automatic_run+0x19c>)
 80003c8:	681b      	ldr	r3, [r3, #0]
 80003ca:	2264      	movs	r2, #100	; 0x64
 80003cc:	fb02 f303 	mul.w	r3, r2, r3
 80003d0:	4619      	mov	r1, r3
 80003d2:	6878      	ldr	r0, [r7, #4]
 80003d4:	f000 fae0 	bl	8000998 <setTimer>
			}
			break;
 80003d8:	e01d      	b.n	8000416 <fsm_automatic_run+0x172>
		case YELLOW_STATE:
			setTrafficLightAmber(lane);
 80003da:	6878      	ldr	r0, [r7, #4]
 80003dc:	f000 fc6a 	bl	8000cb4 <setTrafficLightAmber>
			if(timer_flag[lane] == 1){
 80003e0:	4a16      	ldr	r2, [pc, #88]	; (800043c <fsm_automatic_run+0x198>)
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80003e8:	2b01      	cmp	r3, #1
 80003ea:	d116      	bne.n	800041a <fsm_automatic_run+0x176>
				LED_STATE[lane] = RED_STATE;
 80003ec:	4a10      	ldr	r2, [pc, #64]	; (8000430 <fsm_automatic_run+0x18c>)
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	2102      	movs	r1, #2
 80003f2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				setTimer(lane, RED_DURATION*100);
 80003f6:	4b0f      	ldr	r3, [pc, #60]	; (8000434 <fsm_automatic_run+0x190>)
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	2264      	movs	r2, #100	; 0x64
 80003fc:	fb02 f303 	mul.w	r3, r2, r3
 8000400:	4619      	mov	r1, r3
 8000402:	6878      	ldr	r0, [r7, #4]
 8000404:	f000 fac8 	bl	8000998 <setTimer>
			}
			break;
 8000408:	e007      	b.n	800041a <fsm_automatic_run+0x176>
		default:
			break;
 800040a:	bf00      	nop
 800040c:	e006      	b.n	800041c <fsm_automatic_run+0x178>
			break;
 800040e:	bf00      	nop
 8000410:	e004      	b.n	800041c <fsm_automatic_run+0x178>
			break;
 8000412:	bf00      	nop
 8000414:	e002      	b.n	800041c <fsm_automatic_run+0x178>
			break;
 8000416:	bf00      	nop
 8000418:	e000      	b.n	800041c <fsm_automatic_run+0x178>
			break;
 800041a:	bf00      	nop
	}
}
 800041c:	bf00      	nop
 800041e:	3710      	adds	r7, #16
 8000420:	46bd      	mov	sp, r7
 8000422:	bd80      	pop	{r7, pc}
 8000424:	200000d8 	.word	0x200000d8
 8000428:	51eb851f 	.word	0x51eb851f
 800042c:	66666667 	.word	0x66666667
 8000430:	20000068 	.word	0x20000068
 8000434:	20000074 	.word	0x20000074
 8000438:	2000007c 	.word	0x2000007c
 800043c:	200000e4 	.word	0x200000e4
 8000440:	20000078 	.word	0x20000078

08000444 <changeMode>:

#include "fsm_manual.h"

int tempDuration = 0;

void changeMode(int mode){
 8000444:	b580      	push	{r7, lr}
 8000446:	b082      	sub	sp, #8
 8000448:	af00      	add	r7, sp, #0
 800044a:	6078      	str	r0, [r7, #4]
	setTrafficLightDefault(0);
 800044c:	2000      	movs	r0, #0
 800044e:	f000 fb83 	bl	8000b58 <setTrafficLightDefault>
	setTrafficLightDefault(1);
 8000452:	2001      	movs	r0, #1
 8000454:	f000 fb80 	bl	8000b58 <setTrafficLightDefault>
	MODE = mode;
 8000458:	4a05      	ldr	r2, [pc, #20]	; (8000470 <changeMode+0x2c>)
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	6013      	str	r3, [r2, #0]
	setTimer(2, 25);
 800045e:	2119      	movs	r1, #25
 8000460:	2002      	movs	r0, #2
 8000462:	f000 fa99 	bl	8000998 <setTimer>
}
 8000466:	bf00      	nop
 8000468:	3708      	adds	r7, #8
 800046a:	46bd      	mov	sp, r7
 800046c:	bd80      	pop	{r7, pc}
 800046e:	bf00      	nop
 8000470:	20000070 	.word	0x20000070

08000474 <displayDuration>:

void displayDuration(int duration){
 8000474:	b580      	push	{r7, lr}
 8000476:	b082      	sub	sp, #8
 8000478:	af00      	add	r7, sp, #0
 800047a:	6078      	str	r0, [r7, #4]
	display7SEG(duration % 10);
 800047c:	687a      	ldr	r2, [r7, #4]
 800047e:	4b09      	ldr	r3, [pc, #36]	; (80004a4 <displayDuration+0x30>)
 8000480:	fb83 1302 	smull	r1, r3, r3, r2
 8000484:	1099      	asrs	r1, r3, #2
 8000486:	17d3      	asrs	r3, r2, #31
 8000488:	1ac9      	subs	r1, r1, r3
 800048a:	460b      	mov	r3, r1
 800048c:	009b      	lsls	r3, r3, #2
 800048e:	440b      	add	r3, r1
 8000490:	005b      	lsls	r3, r3, #1
 8000492:	1ad1      	subs	r1, r2, r3
 8000494:	4608      	mov	r0, r1
 8000496:	f000 fc47 	bl	8000d28 <display7SEG>
}
 800049a:	bf00      	nop
 800049c:	3708      	adds	r7, #8
 800049e:	46bd      	mov	sp, r7
 80004a0:	bd80      	pop	{r7, pc}
 80004a2:	bf00      	nop
 80004a4:	66666667 	.word	0x66666667

080004a8 <fsm_manual_run>:

void fsm_manual_run(){
 80004a8:	b580      	push	{r7, lr}
 80004aa:	af00      	add	r7, sp, #0
	switch(MODE){
 80004ac:	4b93      	ldr	r3, [pc, #588]	; (80006fc <fsm_manual_run+0x254>)
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	3b0b      	subs	r3, #11
 80004b2:	2b03      	cmp	r3, #3
 80004b4:	f200 8117 	bhi.w	80006e6 <fsm_manual_run+0x23e>
 80004b8:	a201      	add	r2, pc, #4	; (adr r2, 80004c0 <fsm_manual_run+0x18>)
 80004ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004be:	bf00      	nop
 80004c0:	080004d1 	.word	0x080004d1
 80004c4:	080004fb 	.word	0x080004fb
 80004c8:	0800059f 	.word	0x0800059f
 80004cc:	08000641 	.word	0x08000641
		case MODE_1:
			fsm_automatic_run(0);
 80004d0:	2000      	movs	r0, #0
 80004d2:	f7ff fee7 	bl	80002a4 <fsm_automatic_run>
		    fsm_automatic_run(1);
 80004d6:	2001      	movs	r0, #1
 80004d8:	f7ff fee4 	bl	80002a4 <fsm_automatic_run>
			if (isButtonPressed(0) == 1){
 80004dc:	2000      	movs	r0, #0
 80004de:	f7ff fe35 	bl	800014c <isButtonPressed>
 80004e2:	4603      	mov	r3, r0
 80004e4:	2b01      	cmp	r3, #1
 80004e6:	f040 8100 	bne.w	80006ea <fsm_manual_run+0x242>
				tempDuration = RED_DURATION;
 80004ea:	4b85      	ldr	r3, [pc, #532]	; (8000700 <fsm_manual_run+0x258>)
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	4a85      	ldr	r2, [pc, #532]	; (8000704 <fsm_manual_run+0x25c>)
 80004f0:	6013      	str	r3, [r2, #0]
				changeMode(MODE_2);
 80004f2:	200c      	movs	r0, #12
 80004f4:	f7ff ffa6 	bl	8000444 <changeMode>
			}
			break;
 80004f8:	e0f7      	b.n	80006ea <fsm_manual_run+0x242>
		case MODE_2:
			displayDuration(tempDuration);
 80004fa:	4b82      	ldr	r3, [pc, #520]	; (8000704 <fsm_manual_run+0x25c>)
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	4618      	mov	r0, r3
 8000500:	f7ff ffb8 	bl	8000474 <displayDuration>
			if (isButtonPressed(0) == 1){
 8000504:	2000      	movs	r0, #0
 8000506:	f7ff fe21 	bl	800014c <isButtonPressed>
 800050a:	4603      	mov	r3, r0
 800050c:	2b01      	cmp	r3, #1
 800050e:	d106      	bne.n	800051e <fsm_manual_run+0x76>
				tempDuration = YELLOW_DURATION;
 8000510:	4b7d      	ldr	r3, [pc, #500]	; (8000708 <fsm_manual_run+0x260>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	4a7b      	ldr	r2, [pc, #492]	; (8000704 <fsm_manual_run+0x25c>)
 8000516:	6013      	str	r3, [r2, #0]
				changeMode(MODE_3);
 8000518:	200d      	movs	r0, #13
 800051a:	f7ff ff93 	bl	8000444 <changeMode>
			}
			if (isButtonPressed(1) == 1){
 800051e:	2001      	movs	r0, #1
 8000520:	f7ff fe14 	bl	800014c <isButtonPressed>
 8000524:	4603      	mov	r3, r0
 8000526:	2b01      	cmp	r3, #1
 8000528:	d10b      	bne.n	8000542 <fsm_manual_run+0x9a>
				tempDuration++;
 800052a:	4b76      	ldr	r3, [pc, #472]	; (8000704 <fsm_manual_run+0x25c>)
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	3301      	adds	r3, #1
 8000530:	4a74      	ldr	r2, [pc, #464]	; (8000704 <fsm_manual_run+0x25c>)
 8000532:	6013      	str	r3, [r2, #0]
				if (tempDuration >= 10) tempDuration = 1;
 8000534:	4b73      	ldr	r3, [pc, #460]	; (8000704 <fsm_manual_run+0x25c>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	2b09      	cmp	r3, #9
 800053a:	dd02      	ble.n	8000542 <fsm_manual_run+0x9a>
 800053c:	4b71      	ldr	r3, [pc, #452]	; (8000704 <fsm_manual_run+0x25c>)
 800053e:	2201      	movs	r2, #1
 8000540:	601a      	str	r2, [r3, #0]
			}
			if (isButtonPressed(2) == 1){
 8000542:	2002      	movs	r0, #2
 8000544:	f7ff fe02 	bl	800014c <isButtonPressed>
 8000548:	4603      	mov	r3, r0
 800054a:	2b01      	cmp	r3, #1
 800054c:	d10b      	bne.n	8000566 <fsm_manual_run+0xbe>
				tempDuration--;
 800054e:	4b6d      	ldr	r3, [pc, #436]	; (8000704 <fsm_manual_run+0x25c>)
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	3b01      	subs	r3, #1
 8000554:	4a6b      	ldr	r2, [pc, #428]	; (8000704 <fsm_manual_run+0x25c>)
 8000556:	6013      	str	r3, [r2, #0]
				if (tempDuration <= 0) tempDuration = 9;
 8000558:	4b6a      	ldr	r3, [pc, #424]	; (8000704 <fsm_manual_run+0x25c>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	2b00      	cmp	r3, #0
 800055e:	dc02      	bgt.n	8000566 <fsm_manual_run+0xbe>
 8000560:	4b68      	ldr	r3, [pc, #416]	; (8000704 <fsm_manual_run+0x25c>)
 8000562:	2209      	movs	r2, #9
 8000564:	601a      	str	r2, [r3, #0]
			}
			if (isButtonPressed(3) == 1){
 8000566:	2003      	movs	r0, #3
 8000568:	f7ff fdf0 	bl	800014c <isButtonPressed>
 800056c:	4603      	mov	r3, r0
 800056e:	2b01      	cmp	r3, #1
 8000570:	d103      	bne.n	800057a <fsm_manual_run+0xd2>
				RED_DURATION = tempDuration;
 8000572:	4b64      	ldr	r3, [pc, #400]	; (8000704 <fsm_manual_run+0x25c>)
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	4a62      	ldr	r2, [pc, #392]	; (8000700 <fsm_manual_run+0x258>)
 8000578:	6013      	str	r3, [r2, #0]
			}
			if (timer_flag[2] == 1){
 800057a:	4b64      	ldr	r3, [pc, #400]	; (800070c <fsm_manual_run+0x264>)
 800057c:	689b      	ldr	r3, [r3, #8]
 800057e:	2b01      	cmp	r3, #1
 8000580:	f040 80b5 	bne.w	80006ee <fsm_manual_run+0x246>
				HAL_GPIO_TogglePin(GPIOA, RED1_Pin);
 8000584:	2101      	movs	r1, #1
 8000586:	4862      	ldr	r0, [pc, #392]	; (8000710 <fsm_manual_run+0x268>)
 8000588:	f001 f8bf 	bl	800170a <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(GPIOC, RED2_Pin);
 800058c:	2101      	movs	r1, #1
 800058e:	4861      	ldr	r0, [pc, #388]	; (8000714 <fsm_manual_run+0x26c>)
 8000590:	f001 f8bb 	bl	800170a <HAL_GPIO_TogglePin>
				setTimer(2, 25);
 8000594:	2119      	movs	r1, #25
 8000596:	2002      	movs	r0, #2
 8000598:	f000 f9fe 	bl	8000998 <setTimer>
			}
			break;
 800059c:	e0a7      	b.n	80006ee <fsm_manual_run+0x246>
		case MODE_3:
			displayDuration(tempDuration);
 800059e:	4b59      	ldr	r3, [pc, #356]	; (8000704 <fsm_manual_run+0x25c>)
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	4618      	mov	r0, r3
 80005a4:	f7ff ff66 	bl	8000474 <displayDuration>
			if (isButtonPressed(0) == 1){
 80005a8:	2000      	movs	r0, #0
 80005aa:	f7ff fdcf 	bl	800014c <isButtonPressed>
 80005ae:	4603      	mov	r3, r0
 80005b0:	2b01      	cmp	r3, #1
 80005b2:	d106      	bne.n	80005c2 <fsm_manual_run+0x11a>
				tempDuration = GREEN_DURATION;
 80005b4:	4b58      	ldr	r3, [pc, #352]	; (8000718 <fsm_manual_run+0x270>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	4a52      	ldr	r2, [pc, #328]	; (8000704 <fsm_manual_run+0x25c>)
 80005ba:	6013      	str	r3, [r2, #0]
				changeMode(MODE_4);
 80005bc:	200e      	movs	r0, #14
 80005be:	f7ff ff41 	bl	8000444 <changeMode>
			}
			if (isButtonPressed(1) == 1){
 80005c2:	2001      	movs	r0, #1
 80005c4:	f7ff fdc2 	bl	800014c <isButtonPressed>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b01      	cmp	r3, #1
 80005cc:	d10b      	bne.n	80005e6 <fsm_manual_run+0x13e>
				tempDuration++;
 80005ce:	4b4d      	ldr	r3, [pc, #308]	; (8000704 <fsm_manual_run+0x25c>)
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	3301      	adds	r3, #1
 80005d4:	4a4b      	ldr	r2, [pc, #300]	; (8000704 <fsm_manual_run+0x25c>)
 80005d6:	6013      	str	r3, [r2, #0]
				if (tempDuration >= 10) tempDuration = 1;
 80005d8:	4b4a      	ldr	r3, [pc, #296]	; (8000704 <fsm_manual_run+0x25c>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	2b09      	cmp	r3, #9
 80005de:	dd02      	ble.n	80005e6 <fsm_manual_run+0x13e>
 80005e0:	4b48      	ldr	r3, [pc, #288]	; (8000704 <fsm_manual_run+0x25c>)
 80005e2:	2201      	movs	r2, #1
 80005e4:	601a      	str	r2, [r3, #0]
			}
			if (isButtonPressed(2) == 1){
 80005e6:	2002      	movs	r0, #2
 80005e8:	f7ff fdb0 	bl	800014c <isButtonPressed>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b01      	cmp	r3, #1
 80005f0:	d10b      	bne.n	800060a <fsm_manual_run+0x162>
				tempDuration--;
 80005f2:	4b44      	ldr	r3, [pc, #272]	; (8000704 <fsm_manual_run+0x25c>)
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	3b01      	subs	r3, #1
 80005f8:	4a42      	ldr	r2, [pc, #264]	; (8000704 <fsm_manual_run+0x25c>)
 80005fa:	6013      	str	r3, [r2, #0]
				if (tempDuration <= 0) tempDuration = 9;
 80005fc:	4b41      	ldr	r3, [pc, #260]	; (8000704 <fsm_manual_run+0x25c>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	2b00      	cmp	r3, #0
 8000602:	dc02      	bgt.n	800060a <fsm_manual_run+0x162>
 8000604:	4b3f      	ldr	r3, [pc, #252]	; (8000704 <fsm_manual_run+0x25c>)
 8000606:	2209      	movs	r2, #9
 8000608:	601a      	str	r2, [r3, #0]
			}
			if (isButtonPressed(3) == 1){
 800060a:	2003      	movs	r0, #3
 800060c:	f7ff fd9e 	bl	800014c <isButtonPressed>
 8000610:	4603      	mov	r3, r0
 8000612:	2b01      	cmp	r3, #1
 8000614:	d103      	bne.n	800061e <fsm_manual_run+0x176>
				YELLOW_DURATION = tempDuration;
 8000616:	4b3b      	ldr	r3, [pc, #236]	; (8000704 <fsm_manual_run+0x25c>)
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	4a3b      	ldr	r2, [pc, #236]	; (8000708 <fsm_manual_run+0x260>)
 800061c:	6013      	str	r3, [r2, #0]
			}
			if (timer_flag[2] == 1){
 800061e:	4b3b      	ldr	r3, [pc, #236]	; (800070c <fsm_manual_run+0x264>)
 8000620:	689b      	ldr	r3, [r3, #8]
 8000622:	2b01      	cmp	r3, #1
 8000624:	d165      	bne.n	80006f2 <fsm_manual_run+0x24a>
				HAL_GPIO_TogglePin(GPIOA, YELLOW1_Pin);
 8000626:	2102      	movs	r1, #2
 8000628:	4839      	ldr	r0, [pc, #228]	; (8000710 <fsm_manual_run+0x268>)
 800062a:	f001 f86e 	bl	800170a <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(GPIOC, YELLOW2_Pin);
 800062e:	2102      	movs	r1, #2
 8000630:	4838      	ldr	r0, [pc, #224]	; (8000714 <fsm_manual_run+0x26c>)
 8000632:	f001 f86a 	bl	800170a <HAL_GPIO_TogglePin>
				setTimer(2, 25);
 8000636:	2119      	movs	r1, #25
 8000638:	2002      	movs	r0, #2
 800063a:	f000 f9ad 	bl	8000998 <setTimer>
			}
			break;
 800063e:	e058      	b.n	80006f2 <fsm_manual_run+0x24a>
		case MODE_4:
			displayDuration(tempDuration);
 8000640:	4b30      	ldr	r3, [pc, #192]	; (8000704 <fsm_manual_run+0x25c>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	4618      	mov	r0, r3
 8000646:	f7ff ff15 	bl	8000474 <displayDuration>
			if (isButtonPressed(0) == 1){
 800064a:	2000      	movs	r0, #0
 800064c:	f7ff fd7e 	bl	800014c <isButtonPressed>
 8000650:	4603      	mov	r3, r0
 8000652:	2b01      	cmp	r3, #1
 8000654:	d108      	bne.n	8000668 <fsm_manual_run+0x1c0>
				LED_STATE [0] = INIT_STATE;
 8000656:	4b31      	ldr	r3, [pc, #196]	; (800071c <fsm_manual_run+0x274>)
 8000658:	2201      	movs	r2, #1
 800065a:	601a      	str	r2, [r3, #0]
				LED_STATE [1] = INIT_STATE;
 800065c:	4b2f      	ldr	r3, [pc, #188]	; (800071c <fsm_manual_run+0x274>)
 800065e:	2201      	movs	r2, #1
 8000660:	605a      	str	r2, [r3, #4]
				changeMode(MODE_1);
 8000662:	200b      	movs	r0, #11
 8000664:	f7ff feee 	bl	8000444 <changeMode>
			}
			if (isButtonPressed(1) == 1){
 8000668:	2001      	movs	r0, #1
 800066a:	f7ff fd6f 	bl	800014c <isButtonPressed>
 800066e:	4603      	mov	r3, r0
 8000670:	2b01      	cmp	r3, #1
 8000672:	d10b      	bne.n	800068c <fsm_manual_run+0x1e4>
				tempDuration++;
 8000674:	4b23      	ldr	r3, [pc, #140]	; (8000704 <fsm_manual_run+0x25c>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	3301      	adds	r3, #1
 800067a:	4a22      	ldr	r2, [pc, #136]	; (8000704 <fsm_manual_run+0x25c>)
 800067c:	6013      	str	r3, [r2, #0]
				if (tempDuration >= 10) tempDuration = 1;
 800067e:	4b21      	ldr	r3, [pc, #132]	; (8000704 <fsm_manual_run+0x25c>)
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	2b09      	cmp	r3, #9
 8000684:	dd02      	ble.n	800068c <fsm_manual_run+0x1e4>
 8000686:	4b1f      	ldr	r3, [pc, #124]	; (8000704 <fsm_manual_run+0x25c>)
 8000688:	2201      	movs	r2, #1
 800068a:	601a      	str	r2, [r3, #0]
			}
			if (isButtonPressed(2) == 1){
 800068c:	2002      	movs	r0, #2
 800068e:	f7ff fd5d 	bl	800014c <isButtonPressed>
 8000692:	4603      	mov	r3, r0
 8000694:	2b01      	cmp	r3, #1
 8000696:	d10b      	bne.n	80006b0 <fsm_manual_run+0x208>
				tempDuration--;
 8000698:	4b1a      	ldr	r3, [pc, #104]	; (8000704 <fsm_manual_run+0x25c>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	3b01      	subs	r3, #1
 800069e:	4a19      	ldr	r2, [pc, #100]	; (8000704 <fsm_manual_run+0x25c>)
 80006a0:	6013      	str	r3, [r2, #0]
				if (tempDuration <= 0) tempDuration = 9;
 80006a2:	4b18      	ldr	r3, [pc, #96]	; (8000704 <fsm_manual_run+0x25c>)
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	dc02      	bgt.n	80006b0 <fsm_manual_run+0x208>
 80006aa:	4b16      	ldr	r3, [pc, #88]	; (8000704 <fsm_manual_run+0x25c>)
 80006ac:	2209      	movs	r2, #9
 80006ae:	601a      	str	r2, [r3, #0]
			}
			if (isButtonPressed(3) == 1){
 80006b0:	2003      	movs	r0, #3
 80006b2:	f7ff fd4b 	bl	800014c <isButtonPressed>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b01      	cmp	r3, #1
 80006ba:	d103      	bne.n	80006c4 <fsm_manual_run+0x21c>
				GREEN_DURATION = tempDuration;
 80006bc:	4b11      	ldr	r3, [pc, #68]	; (8000704 <fsm_manual_run+0x25c>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	4a15      	ldr	r2, [pc, #84]	; (8000718 <fsm_manual_run+0x270>)
 80006c2:	6013      	str	r3, [r2, #0]
			}
			if (timer_flag[2] == 1){
 80006c4:	4b11      	ldr	r3, [pc, #68]	; (800070c <fsm_manual_run+0x264>)
 80006c6:	689b      	ldr	r3, [r3, #8]
 80006c8:	2b01      	cmp	r3, #1
 80006ca:	d114      	bne.n	80006f6 <fsm_manual_run+0x24e>
				HAL_GPIO_TogglePin(GPIOA, GREEN1_Pin);
 80006cc:	2110      	movs	r1, #16
 80006ce:	4810      	ldr	r0, [pc, #64]	; (8000710 <fsm_manual_run+0x268>)
 80006d0:	f001 f81b 	bl	800170a <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(GPIOC, GREEN2_Pin);
 80006d4:	2101      	movs	r1, #1
 80006d6:	480f      	ldr	r0, [pc, #60]	; (8000714 <fsm_manual_run+0x26c>)
 80006d8:	f001 f817 	bl	800170a <HAL_GPIO_TogglePin>
				setTimer(2, 25);
 80006dc:	2119      	movs	r1, #25
 80006de:	2002      	movs	r0, #2
 80006e0:	f000 f95a 	bl	8000998 <setTimer>
			}
			break;
 80006e4:	e007      	b.n	80006f6 <fsm_manual_run+0x24e>
		default:
			 break;
 80006e6:	bf00      	nop
 80006e8:	e006      	b.n	80006f8 <fsm_manual_run+0x250>
			break;
 80006ea:	bf00      	nop
 80006ec:	e004      	b.n	80006f8 <fsm_manual_run+0x250>
			break;
 80006ee:	bf00      	nop
 80006f0:	e002      	b.n	80006f8 <fsm_manual_run+0x250>
			break;
 80006f2:	bf00      	nop
 80006f4:	e000      	b.n	80006f8 <fsm_manual_run+0x250>
			break;
 80006f6:	bf00      	nop
	}
}
 80006f8:	bf00      	nop
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	20000070 	.word	0x20000070
 8000700:	20000074 	.word	0x20000074
 8000704:	200000d4 	.word	0x200000d4
 8000708:	20000078 	.word	0x20000078
 800070c:	200000e4 	.word	0x200000e4
 8000710:	40010800 	.word	0x40010800
 8000714:	40011000 	.word	0x40011000
 8000718:	2000007c 	.word	0x2000007c
 800071c:	20000068 	.word	0x20000068

08000720 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000724:	f000 fcce 	bl	80010c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000728:	f000 f807 	bl	800073a <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800072c:	f000 f88c 	bl	8000848 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000730:	f000 f83e 	bl	80007b0 <MX_TIM2_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  fsm_manual_run();
 8000734:	f7ff feb8 	bl	80004a8 <fsm_manual_run>
 8000738:	e7fc      	b.n	8000734 <main+0x14>

0800073a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800073a:	b580      	push	{r7, lr}
 800073c:	b090      	sub	sp, #64	; 0x40
 800073e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000740:	f107 0318 	add.w	r3, r7, #24
 8000744:	2228      	movs	r2, #40	; 0x28
 8000746:	2100      	movs	r1, #0
 8000748:	4618      	mov	r0, r3
 800074a:	f001 ffa1 	bl	8002690 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800074e:	1d3b      	adds	r3, r7, #4
 8000750:	2200      	movs	r2, #0
 8000752:	601a      	str	r2, [r3, #0]
 8000754:	605a      	str	r2, [r3, #4]
 8000756:	609a      	str	r2, [r3, #8]
 8000758:	60da      	str	r2, [r3, #12]
 800075a:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800075c:	2302      	movs	r3, #2
 800075e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000760:	2301      	movs	r3, #1
 8000762:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000764:	2310      	movs	r3, #16
 8000766:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000768:	2300      	movs	r3, #0
 800076a:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800076c:	f107 0318 	add.w	r3, r7, #24
 8000770:	4618      	mov	r0, r3
 8000772:	f000 ffe3 	bl	800173c <HAL_RCC_OscConfig>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d001      	beq.n	8000780 <SystemClock_Config+0x46>
  {
    Error_Handler();
 800077c:	f000 f907 	bl	800098e <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000780:	230f      	movs	r3, #15
 8000782:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000784:	2300      	movs	r3, #0
 8000786:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000788:	2300      	movs	r3, #0
 800078a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800078c:	2300      	movs	r3, #0
 800078e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000790:	2300      	movs	r3, #0
 8000792:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000794:	1d3b      	adds	r3, r7, #4
 8000796:	2100      	movs	r1, #0
 8000798:	4618      	mov	r0, r3
 800079a:	f001 fa4f 	bl	8001c3c <HAL_RCC_ClockConfig>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80007a4:	f000 f8f3 	bl	800098e <Error_Handler>
  }
}
 80007a8:	bf00      	nop
 80007aa:	3740      	adds	r7, #64	; 0x40
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}

080007b0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b086      	sub	sp, #24
 80007b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007b6:	f107 0308 	add.w	r3, r7, #8
 80007ba:	2200      	movs	r2, #0
 80007bc:	601a      	str	r2, [r3, #0]
 80007be:	605a      	str	r2, [r3, #4]
 80007c0:	609a      	str	r2, [r3, #8]
 80007c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007c4:	463b      	mov	r3, r7
 80007c6:	2200      	movs	r2, #0
 80007c8:	601a      	str	r2, [r3, #0]
 80007ca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80007cc:	4b1d      	ldr	r3, [pc, #116]	; (8000844 <MX_TIM2_Init+0x94>)
 80007ce:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007d2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 80007d4:	4b1b      	ldr	r3, [pc, #108]	; (8000844 <MX_TIM2_Init+0x94>)
 80007d6:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80007da:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007dc:	4b19      	ldr	r3, [pc, #100]	; (8000844 <MX_TIM2_Init+0x94>)
 80007de:	2200      	movs	r2, #0
 80007e0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 80007e2:	4b18      	ldr	r3, [pc, #96]	; (8000844 <MX_TIM2_Init+0x94>)
 80007e4:	2209      	movs	r2, #9
 80007e6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007e8:	4b16      	ldr	r3, [pc, #88]	; (8000844 <MX_TIM2_Init+0x94>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007ee:	4b15      	ldr	r3, [pc, #84]	; (8000844 <MX_TIM2_Init+0x94>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80007f4:	4813      	ldr	r0, [pc, #76]	; (8000844 <MX_TIM2_Init+0x94>)
 80007f6:	f001 fb7d 	bl	8001ef4 <HAL_TIM_Base_Init>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000800:	f000 f8c5 	bl	800098e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000804:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000808:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800080a:	f107 0308 	add.w	r3, r7, #8
 800080e:	4619      	mov	r1, r3
 8000810:	480c      	ldr	r0, [pc, #48]	; (8000844 <MX_TIM2_Init+0x94>)
 8000812:	f001 fcc6 	bl	80021a2 <HAL_TIM_ConfigClockSource>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d001      	beq.n	8000820 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800081c:	f000 f8b7 	bl	800098e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000820:	2300      	movs	r3, #0
 8000822:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000824:	2300      	movs	r3, #0
 8000826:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000828:	463b      	mov	r3, r7
 800082a:	4619      	mov	r1, r3
 800082c:	4805      	ldr	r0, [pc, #20]	; (8000844 <MX_TIM2_Init+0x94>)
 800082e:	f001 fe9b 	bl	8002568 <HAL_TIMEx_MasterConfigSynchronization>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d001      	beq.n	800083c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000838:	f000 f8a9 	bl	800098e <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800083c:	bf00      	nop
 800083e:	3718      	adds	r7, #24
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}
 8000844:	200000f0 	.word	0x200000f0

08000848 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b088      	sub	sp, #32
 800084c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800084e:	f107 0310 	add.w	r3, r7, #16
 8000852:	2200      	movs	r2, #0
 8000854:	601a      	str	r2, [r3, #0]
 8000856:	605a      	str	r2, [r3, #4]
 8000858:	609a      	str	r2, [r3, #8]
 800085a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800085c:	4b3e      	ldr	r3, [pc, #248]	; (8000958 <MX_GPIO_Init+0x110>)
 800085e:	699b      	ldr	r3, [r3, #24]
 8000860:	4a3d      	ldr	r2, [pc, #244]	; (8000958 <MX_GPIO_Init+0x110>)
 8000862:	f043 0310 	orr.w	r3, r3, #16
 8000866:	6193      	str	r3, [r2, #24]
 8000868:	4b3b      	ldr	r3, [pc, #236]	; (8000958 <MX_GPIO_Init+0x110>)
 800086a:	699b      	ldr	r3, [r3, #24]
 800086c:	f003 0310 	and.w	r3, r3, #16
 8000870:	60fb      	str	r3, [r7, #12]
 8000872:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000874:	4b38      	ldr	r3, [pc, #224]	; (8000958 <MX_GPIO_Init+0x110>)
 8000876:	699b      	ldr	r3, [r3, #24]
 8000878:	4a37      	ldr	r2, [pc, #220]	; (8000958 <MX_GPIO_Init+0x110>)
 800087a:	f043 0304 	orr.w	r3, r3, #4
 800087e:	6193      	str	r3, [r2, #24]
 8000880:	4b35      	ldr	r3, [pc, #212]	; (8000958 <MX_GPIO_Init+0x110>)
 8000882:	699b      	ldr	r3, [r3, #24]
 8000884:	f003 0304 	and.w	r3, r3, #4
 8000888:	60bb      	str	r3, [r7, #8]
 800088a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800088c:	4b32      	ldr	r3, [pc, #200]	; (8000958 <MX_GPIO_Init+0x110>)
 800088e:	699b      	ldr	r3, [r3, #24]
 8000890:	4a31      	ldr	r2, [pc, #196]	; (8000958 <MX_GPIO_Init+0x110>)
 8000892:	f043 0308 	orr.w	r3, r3, #8
 8000896:	6193      	str	r3, [r2, #24]
 8000898:	4b2f      	ldr	r3, [pc, #188]	; (8000958 <MX_GPIO_Init+0x110>)
 800089a:	699b      	ldr	r3, [r3, #24]
 800089c:	f003 0308 	and.w	r3, r3, #8
 80008a0:	607b      	str	r3, [r7, #4]
 80008a2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GREEN2_Pin|YELLOW2_Pin|SEG1_Pin, GPIO_PIN_RESET);
 80008a4:	2200      	movs	r2, #0
 80008a6:	2183      	movs	r1, #131	; 0x83
 80008a8:	482c      	ldr	r0, [pc, #176]	; (800095c <MX_GPIO_Init+0x114>)
 80008aa:	f000 ff16 	bl	80016da <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RED1_Pin|YELLOW1_Pin|GREEN1_Pin|SEG5_Pin
 80008ae:	2200      	movs	r2, #0
 80008b0:	f240 21f3 	movw	r1, #755	; 0x2f3
 80008b4:	482a      	ldr	r0, [pc, #168]	; (8000960 <MX_GPIO_Init+0x118>)
 80008b6:	f000 ff10 	bl	80016da <HAL_GPIO_WritePin>
                          |SEG4_Pin|SEG3_Pin|SEG0_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RED2_Pin|SEG2_Pin|SEG6_Pin, GPIO_PIN_RESET);
 80008ba:	2200      	movs	r2, #0
 80008bc:	f240 2181 	movw	r1, #641	; 0x281
 80008c0:	4828      	ldr	r0, [pc, #160]	; (8000964 <MX_GPIO_Init+0x11c>)
 80008c2:	f000 ff0a 	bl	80016da <HAL_GPIO_WritePin>

  /*Configure GPIO pins : GREEN2_Pin YELLOW2_Pin SEG1_Pin */
  GPIO_InitStruct.Pin = GREEN2_Pin|YELLOW2_Pin|SEG1_Pin;
 80008c6:	2383      	movs	r3, #131	; 0x83
 80008c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ca:	2301      	movs	r3, #1
 80008cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ce:	2300      	movs	r3, #0
 80008d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d2:	2302      	movs	r3, #2
 80008d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008d6:	f107 0310 	add.w	r3, r7, #16
 80008da:	4619      	mov	r1, r3
 80008dc:	481f      	ldr	r0, [pc, #124]	; (800095c <MX_GPIO_Init+0x114>)
 80008de:	f000 fd61 	bl	80013a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RED1_Pin YELLOW1_Pin GREEN1_Pin SEG5_Pin
                           SEG4_Pin SEG3_Pin SEG0_Pin */
  GPIO_InitStruct.Pin = RED1_Pin|YELLOW1_Pin|GREEN1_Pin|SEG5_Pin
 80008e2:	f240 23f3 	movw	r3, #755	; 0x2f3
 80008e6:	613b      	str	r3, [r7, #16]
                          |SEG4_Pin|SEG3_Pin|SEG0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008e8:	2301      	movs	r3, #1
 80008ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ec:	2300      	movs	r3, #0
 80008ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f0:	2302      	movs	r3, #2
 80008f2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008f4:	f107 0310 	add.w	r3, r7, #16
 80008f8:	4619      	mov	r1, r3
 80008fa:	4819      	ldr	r0, [pc, #100]	; (8000960 <MX_GPIO_Init+0x118>)
 80008fc:	f000 fd52 	bl	80013a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN2_Pin BTN1_Pin BTN3_Pin */
  GPIO_InitStruct.Pin = BTN2_Pin|BTN1_Pin|BTN3_Pin;
 8000900:	f240 430c 	movw	r3, #1036	; 0x40c
 8000904:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000906:	2300      	movs	r3, #0
 8000908:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800090a:	2301      	movs	r3, #1
 800090c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800090e:	f107 0310 	add.w	r3, r7, #16
 8000912:	4619      	mov	r1, r3
 8000914:	4812      	ldr	r0, [pc, #72]	; (8000960 <MX_GPIO_Init+0x118>)
 8000916:	f000 fd45 	bl	80013a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RED2_Pin SEG2_Pin SEG6_Pin */
  GPIO_InitStruct.Pin = RED2_Pin|SEG2_Pin|SEG6_Pin;
 800091a:	f240 2381 	movw	r3, #641	; 0x281
 800091e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000920:	2301      	movs	r3, #1
 8000922:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000924:	2300      	movs	r3, #0
 8000926:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000928:	2302      	movs	r3, #2
 800092a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800092c:	f107 0310 	add.w	r3, r7, #16
 8000930:	4619      	mov	r1, r3
 8000932:	480c      	ldr	r0, [pc, #48]	; (8000964 <MX_GPIO_Init+0x11c>)
 8000934:	f000 fd36 	bl	80013a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN4_Pin */
  GPIO_InitStruct.Pin = BTN4_Pin;
 8000938:	2308      	movs	r3, #8
 800093a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800093c:	2300      	movs	r3, #0
 800093e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000940:	2301      	movs	r3, #1
 8000942:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BTN4_GPIO_Port, &GPIO_InitStruct);
 8000944:	f107 0310 	add.w	r3, r7, #16
 8000948:	4619      	mov	r1, r3
 800094a:	4806      	ldr	r0, [pc, #24]	; (8000964 <MX_GPIO_Init+0x11c>)
 800094c:	f000 fd2a 	bl	80013a4 <HAL_GPIO_Init>

}
 8000950:	bf00      	nop
 8000952:	3720      	adds	r7, #32
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}
 8000958:	40021000 	.word	0x40021000
 800095c:	40011000 	.word	0x40011000
 8000960:	40010800 	.word	0x40010800
 8000964:	40010c00 	.word	0x40010c00

08000968 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000968:	b580      	push	{r7, lr}
 800096a:	b082      	sub	sp, #8
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
	timerRun();
 8000970:	f000 f82a 	bl	80009c8 <timerRun>
	getKeyInput(0);
 8000974:	2000      	movs	r0, #0
 8000976:	f7ff fc13 	bl	80001a0 <getKeyInput>
	getKeyInput(1);
 800097a:	2001      	movs	r0, #1
 800097c:	f7ff fc10 	bl	80001a0 <getKeyInput>
	getKeyInput(2);
 8000980:	2002      	movs	r0, #2
 8000982:	f7ff fc0d 	bl	80001a0 <getKeyInput>
}
 8000986:	bf00      	nop
 8000988:	3708      	adds	r7, #8
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}

0800098e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800098e:	b480      	push	{r7}
 8000990:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000992:	b672      	cpsid	i
}
 8000994:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000996:	e7fe      	b.n	8000996 <Error_Handler+0x8>

08000998 <setTimer>:
#include "software_timer.h"

int timer_counter [3] = {0,0,0};
int timer_flag [3] = {0,0,0};

void setTimer(int type, int duration){
 8000998:	b480      	push	{r7}
 800099a:	b083      	sub	sp, #12
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
 80009a0:	6039      	str	r1, [r7, #0]
	timer_counter[type] = duration;
 80009a2:	4907      	ldr	r1, [pc, #28]	; (80009c0 <setTimer+0x28>)
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	683a      	ldr	r2, [r7, #0]
 80009a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	timer_flag[type] = 0;
 80009ac:	4a05      	ldr	r2, [pc, #20]	; (80009c4 <setTimer+0x2c>)
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	2100      	movs	r1, #0
 80009b2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 80009b6:	bf00      	nop
 80009b8:	370c      	adds	r7, #12
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bc80      	pop	{r7}
 80009be:	4770      	bx	lr
 80009c0:	200000d8 	.word	0x200000d8
 80009c4:	200000e4 	.word	0x200000e4

080009c8 <timerRun>:

void timerRun(){
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
	if(timer_counter[0] > 0){
 80009cc:	4b19      	ldr	r3, [pc, #100]	; (8000a34 <timerRun+0x6c>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	dd0b      	ble.n	80009ec <timerRun+0x24>
		timer_counter[0]--;
 80009d4:	4b17      	ldr	r3, [pc, #92]	; (8000a34 <timerRun+0x6c>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	3b01      	subs	r3, #1
 80009da:	4a16      	ldr	r2, [pc, #88]	; (8000a34 <timerRun+0x6c>)
 80009dc:	6013      	str	r3, [r2, #0]
		if(timer_counter[0] <= 0){
 80009de:	4b15      	ldr	r3, [pc, #84]	; (8000a34 <timerRun+0x6c>)
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	dc02      	bgt.n	80009ec <timerRun+0x24>
			timer_flag[0] = 1;
 80009e6:	4b14      	ldr	r3, [pc, #80]	; (8000a38 <timerRun+0x70>)
 80009e8:	2201      	movs	r2, #1
 80009ea:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer_counter[1] > 0){
 80009ec:	4b11      	ldr	r3, [pc, #68]	; (8000a34 <timerRun+0x6c>)
 80009ee:	685b      	ldr	r3, [r3, #4]
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	dd0b      	ble.n	8000a0c <timerRun+0x44>
		timer_counter[1]--;
 80009f4:	4b0f      	ldr	r3, [pc, #60]	; (8000a34 <timerRun+0x6c>)
 80009f6:	685b      	ldr	r3, [r3, #4]
 80009f8:	3b01      	subs	r3, #1
 80009fa:	4a0e      	ldr	r2, [pc, #56]	; (8000a34 <timerRun+0x6c>)
 80009fc:	6053      	str	r3, [r2, #4]
		if(timer_counter[1] <= 0){
 80009fe:	4b0d      	ldr	r3, [pc, #52]	; (8000a34 <timerRun+0x6c>)
 8000a00:	685b      	ldr	r3, [r3, #4]
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	dc02      	bgt.n	8000a0c <timerRun+0x44>
			timer_flag[1] = 1;
 8000a06:	4b0c      	ldr	r3, [pc, #48]	; (8000a38 <timerRun+0x70>)
 8000a08:	2201      	movs	r2, #1
 8000a0a:	605a      	str	r2, [r3, #4]
		}
	}
	if(timer_counter[2] > 0){
 8000a0c:	4b09      	ldr	r3, [pc, #36]	; (8000a34 <timerRun+0x6c>)
 8000a0e:	689b      	ldr	r3, [r3, #8]
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	dd0b      	ble.n	8000a2c <timerRun+0x64>
		timer_counter[2]--;
 8000a14:	4b07      	ldr	r3, [pc, #28]	; (8000a34 <timerRun+0x6c>)
 8000a16:	689b      	ldr	r3, [r3, #8]
 8000a18:	3b01      	subs	r3, #1
 8000a1a:	4a06      	ldr	r2, [pc, #24]	; (8000a34 <timerRun+0x6c>)
 8000a1c:	6093      	str	r3, [r2, #8]
		if(timer_counter[2] <= 0){
 8000a1e:	4b05      	ldr	r3, [pc, #20]	; (8000a34 <timerRun+0x6c>)
 8000a20:	689b      	ldr	r3, [r3, #8]
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	dc02      	bgt.n	8000a2c <timerRun+0x64>
			timer_flag[2] = 1;
 8000a26:	4b04      	ldr	r3, [pc, #16]	; (8000a38 <timerRun+0x70>)
 8000a28:	2201      	movs	r2, #1
 8000a2a:	609a      	str	r2, [r3, #8]
		}
	}
}
 8000a2c:	bf00      	nop
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bc80      	pop	{r7}
 8000a32:	4770      	bx	lr
 8000a34:	200000d8 	.word	0x200000d8
 8000a38:	200000e4 	.word	0x200000e4

08000a3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	b085      	sub	sp, #20
 8000a40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000a42:	4b15      	ldr	r3, [pc, #84]	; (8000a98 <HAL_MspInit+0x5c>)
 8000a44:	699b      	ldr	r3, [r3, #24]
 8000a46:	4a14      	ldr	r2, [pc, #80]	; (8000a98 <HAL_MspInit+0x5c>)
 8000a48:	f043 0301 	orr.w	r3, r3, #1
 8000a4c:	6193      	str	r3, [r2, #24]
 8000a4e:	4b12      	ldr	r3, [pc, #72]	; (8000a98 <HAL_MspInit+0x5c>)
 8000a50:	699b      	ldr	r3, [r3, #24]
 8000a52:	f003 0301 	and.w	r3, r3, #1
 8000a56:	60bb      	str	r3, [r7, #8]
 8000a58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a5a:	4b0f      	ldr	r3, [pc, #60]	; (8000a98 <HAL_MspInit+0x5c>)
 8000a5c:	69db      	ldr	r3, [r3, #28]
 8000a5e:	4a0e      	ldr	r2, [pc, #56]	; (8000a98 <HAL_MspInit+0x5c>)
 8000a60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a64:	61d3      	str	r3, [r2, #28]
 8000a66:	4b0c      	ldr	r3, [pc, #48]	; (8000a98 <HAL_MspInit+0x5c>)
 8000a68:	69db      	ldr	r3, [r3, #28]
 8000a6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a6e:	607b      	str	r3, [r7, #4]
 8000a70:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000a72:	4b0a      	ldr	r3, [pc, #40]	; (8000a9c <HAL_MspInit+0x60>)
 8000a74:	685b      	ldr	r3, [r3, #4]
 8000a76:	60fb      	str	r3, [r7, #12]
 8000a78:	68fb      	ldr	r3, [r7, #12]
 8000a7a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000a7e:	60fb      	str	r3, [r7, #12]
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000a86:	60fb      	str	r3, [r7, #12]
 8000a88:	4a04      	ldr	r2, [pc, #16]	; (8000a9c <HAL_MspInit+0x60>)
 8000a8a:	68fb      	ldr	r3, [r7, #12]
 8000a8c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a8e:	bf00      	nop
 8000a90:	3714      	adds	r7, #20
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bc80      	pop	{r7}
 8000a96:	4770      	bx	lr
 8000a98:	40021000 	.word	0x40021000
 8000a9c:	40010000 	.word	0x40010000

08000aa0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b084      	sub	sp, #16
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ab0:	d113      	bne.n	8000ada <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000ab2:	4b0c      	ldr	r3, [pc, #48]	; (8000ae4 <HAL_TIM_Base_MspInit+0x44>)
 8000ab4:	69db      	ldr	r3, [r3, #28]
 8000ab6:	4a0b      	ldr	r2, [pc, #44]	; (8000ae4 <HAL_TIM_Base_MspInit+0x44>)
 8000ab8:	f043 0301 	orr.w	r3, r3, #1
 8000abc:	61d3      	str	r3, [r2, #28]
 8000abe:	4b09      	ldr	r3, [pc, #36]	; (8000ae4 <HAL_TIM_Base_MspInit+0x44>)
 8000ac0:	69db      	ldr	r3, [r3, #28]
 8000ac2:	f003 0301 	and.w	r3, r3, #1
 8000ac6:	60fb      	str	r3, [r7, #12]
 8000ac8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000aca:	2200      	movs	r2, #0
 8000acc:	2100      	movs	r1, #0
 8000ace:	201c      	movs	r0, #28
 8000ad0:	f000 fc31 	bl	8001336 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000ad4:	201c      	movs	r0, #28
 8000ad6:	f000 fc4a 	bl	800136e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000ada:	bf00      	nop
 8000adc:	3710      	adds	r7, #16
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	40021000 	.word	0x40021000

08000ae8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000aec:	e7fe      	b.n	8000aec <NMI_Handler+0x4>

08000aee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aee:	b480      	push	{r7}
 8000af0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000af2:	e7fe      	b.n	8000af2 <HardFault_Handler+0x4>

08000af4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000af8:	e7fe      	b.n	8000af8 <MemManage_Handler+0x4>

08000afa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000afa:	b480      	push	{r7}
 8000afc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000afe:	e7fe      	b.n	8000afe <BusFault_Handler+0x4>

08000b00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b04:	e7fe      	b.n	8000b04 <UsageFault_Handler+0x4>

08000b06 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b06:	b480      	push	{r7}
 8000b08:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b0a:	bf00      	nop
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	bc80      	pop	{r7}
 8000b10:	4770      	bx	lr

08000b12 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b12:	b480      	push	{r7}
 8000b14:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b16:	bf00      	nop
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bc80      	pop	{r7}
 8000b1c:	4770      	bx	lr

08000b1e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b1e:	b480      	push	{r7}
 8000b20:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b22:	bf00      	nop
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bc80      	pop	{r7}
 8000b28:	4770      	bx	lr

08000b2a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b2a:	b580      	push	{r7, lr}
 8000b2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b2e:	f000 fb0f 	bl	8001150 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b32:	bf00      	nop
 8000b34:	bd80      	pop	{r7, pc}
	...

08000b38 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000b3c:	4802      	ldr	r0, [pc, #8]	; (8000b48 <TIM2_IRQHandler+0x10>)
 8000b3e:	f001 fa28 	bl	8001f92 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000b42:	bf00      	nop
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	200000f0 	.word	0x200000f0

08000b4c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b50:	bf00      	nop
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bc80      	pop	{r7}
 8000b56:	4770      	bx	lr

08000b58 <setTrafficLightDefault>:
uint16_t REDLIGHT [2] = {RED1_Pin, RED2_Pin};
uint16_t GREENLIGHT [2] = {GREEN1_Pin, GREEN2_Pin};
uint16_t AMBERLIGHT [2] = {YELLOW1_Pin, YELLOW2_Pin};
GPIO_TypeDef *GPIO [4] = {GPIOA, GPIOA, GPIOB, GPIOC};

void setTrafficLightDefault(int lane){
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b082      	sub	sp, #8
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIO[lane*2], REDLIGHT[lane], SET);
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	005b      	lsls	r3, r3, #1
 8000b64:	4a15      	ldr	r2, [pc, #84]	; (8000bbc <setTrafficLightDefault+0x64>)
 8000b66:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000b6a:	4a15      	ldr	r2, [pc, #84]	; (8000bc0 <setTrafficLightDefault+0x68>)
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000b72:	2201      	movs	r2, #1
 8000b74:	4619      	mov	r1, r3
 8000b76:	f000 fdb0 	bl	80016da <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIO[lane*2+1], GREENLIGHT[lane], SET);
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	005b      	lsls	r3, r3, #1
 8000b7e:	3301      	adds	r3, #1
 8000b80:	4a0e      	ldr	r2, [pc, #56]	; (8000bbc <setTrafficLightDefault+0x64>)
 8000b82:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000b86:	4a0f      	ldr	r2, [pc, #60]	; (8000bc4 <setTrafficLightDefault+0x6c>)
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000b8e:	2201      	movs	r2, #1
 8000b90:	4619      	mov	r1, r3
 8000b92:	f000 fda2 	bl	80016da <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIO[lane*2+1], AMBERLIGHT[lane], SET);
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	005b      	lsls	r3, r3, #1
 8000b9a:	3301      	adds	r3, #1
 8000b9c:	4a07      	ldr	r2, [pc, #28]	; (8000bbc <setTrafficLightDefault+0x64>)
 8000b9e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000ba2:	4a09      	ldr	r2, [pc, #36]	; (8000bc8 <setTrafficLightDefault+0x70>)
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000baa:	2201      	movs	r2, #1
 8000bac:	4619      	mov	r1, r3
 8000bae:	f000 fd94 	bl	80016da <HAL_GPIO_WritePin>
}
 8000bb2:	bf00      	nop
 8000bb4:	3708      	adds	r7, #8
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	20000090 	.word	0x20000090
 8000bc0:	20000084 	.word	0x20000084
 8000bc4:	20000088 	.word	0x20000088
 8000bc8:	2000008c 	.word	0x2000008c

08000bcc <setTrafficLightRed>:

void setTrafficLightRed(int lane){
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b082      	sub	sp, #8
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIO[lane*2], REDLIGHT[lane], RESET);
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	005b      	lsls	r3, r3, #1
 8000bd8:	4a15      	ldr	r2, [pc, #84]	; (8000c30 <setTrafficLightRed+0x64>)
 8000bda:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000bde:	4a15      	ldr	r2, [pc, #84]	; (8000c34 <setTrafficLightRed+0x68>)
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000be6:	2200      	movs	r2, #0
 8000be8:	4619      	mov	r1, r3
 8000bea:	f000 fd76 	bl	80016da <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIO[lane*2+1], GREENLIGHT[lane], SET);
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	005b      	lsls	r3, r3, #1
 8000bf2:	3301      	adds	r3, #1
 8000bf4:	4a0e      	ldr	r2, [pc, #56]	; (8000c30 <setTrafficLightRed+0x64>)
 8000bf6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000bfa:	4a0f      	ldr	r2, [pc, #60]	; (8000c38 <setTrafficLightRed+0x6c>)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000c02:	2201      	movs	r2, #1
 8000c04:	4619      	mov	r1, r3
 8000c06:	f000 fd68 	bl	80016da <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIO[lane*2+1], AMBERLIGHT[lane], SET);
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	005b      	lsls	r3, r3, #1
 8000c0e:	3301      	adds	r3, #1
 8000c10:	4a07      	ldr	r2, [pc, #28]	; (8000c30 <setTrafficLightRed+0x64>)
 8000c12:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000c16:	4a09      	ldr	r2, [pc, #36]	; (8000c3c <setTrafficLightRed+0x70>)
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000c1e:	2201      	movs	r2, #1
 8000c20:	4619      	mov	r1, r3
 8000c22:	f000 fd5a 	bl	80016da <HAL_GPIO_WritePin>
}
 8000c26:	bf00      	nop
 8000c28:	3708      	adds	r7, #8
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	20000090 	.word	0x20000090
 8000c34:	20000084 	.word	0x20000084
 8000c38:	20000088 	.word	0x20000088
 8000c3c:	2000008c 	.word	0x2000008c

08000c40 <setTrafficLightGreen>:

void setTrafficLightGreen(int lane){
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b082      	sub	sp, #8
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIO[lane*2], REDLIGHT[lane], SET);
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	005b      	lsls	r3, r3, #1
 8000c4c:	4a15      	ldr	r2, [pc, #84]	; (8000ca4 <setTrafficLightGreen+0x64>)
 8000c4e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000c52:	4a15      	ldr	r2, [pc, #84]	; (8000ca8 <setTrafficLightGreen+0x68>)
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000c5a:	2201      	movs	r2, #1
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	f000 fd3c 	bl	80016da <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIO[lane*2+1], GREENLIGHT[lane], RESET);
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	005b      	lsls	r3, r3, #1
 8000c66:	3301      	adds	r3, #1
 8000c68:	4a0e      	ldr	r2, [pc, #56]	; (8000ca4 <setTrafficLightGreen+0x64>)
 8000c6a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000c6e:	4a0f      	ldr	r2, [pc, #60]	; (8000cac <setTrafficLightGreen+0x6c>)
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000c76:	2200      	movs	r2, #0
 8000c78:	4619      	mov	r1, r3
 8000c7a:	f000 fd2e 	bl	80016da <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIO[lane*2+1], AMBERLIGHT[lane], SET);
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	005b      	lsls	r3, r3, #1
 8000c82:	3301      	adds	r3, #1
 8000c84:	4a07      	ldr	r2, [pc, #28]	; (8000ca4 <setTrafficLightGreen+0x64>)
 8000c86:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000c8a:	4a09      	ldr	r2, [pc, #36]	; (8000cb0 <setTrafficLightGreen+0x70>)
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000c92:	2201      	movs	r2, #1
 8000c94:	4619      	mov	r1, r3
 8000c96:	f000 fd20 	bl	80016da <HAL_GPIO_WritePin>
}
 8000c9a:	bf00      	nop
 8000c9c:	3708      	adds	r7, #8
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	20000090 	.word	0x20000090
 8000ca8:	20000084 	.word	0x20000084
 8000cac:	20000088 	.word	0x20000088
 8000cb0:	2000008c 	.word	0x2000008c

08000cb4 <setTrafficLightAmber>:
void setTrafficLightAmber(int lane){
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b082      	sub	sp, #8
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIO[lane*2], REDLIGHT[lane], SET);
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	005b      	lsls	r3, r3, #1
 8000cc0:	4a15      	ldr	r2, [pc, #84]	; (8000d18 <setTrafficLightAmber+0x64>)
 8000cc2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000cc6:	4a15      	ldr	r2, [pc, #84]	; (8000d1c <setTrafficLightAmber+0x68>)
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000cce:	2201      	movs	r2, #1
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	f000 fd02 	bl	80016da <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIO[lane*2+1], GREENLIGHT[lane], SET);
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	005b      	lsls	r3, r3, #1
 8000cda:	3301      	adds	r3, #1
 8000cdc:	4a0e      	ldr	r2, [pc, #56]	; (8000d18 <setTrafficLightAmber+0x64>)
 8000cde:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000ce2:	4a0f      	ldr	r2, [pc, #60]	; (8000d20 <setTrafficLightAmber+0x6c>)
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000cea:	2201      	movs	r2, #1
 8000cec:	4619      	mov	r1, r3
 8000cee:	f000 fcf4 	bl	80016da <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIO[lane*2+1], AMBERLIGHT[lane], RESET);
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	005b      	lsls	r3, r3, #1
 8000cf6:	3301      	adds	r3, #1
 8000cf8:	4a07      	ldr	r2, [pc, #28]	; (8000d18 <setTrafficLightAmber+0x64>)
 8000cfa:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000cfe:	4a09      	ldr	r2, [pc, #36]	; (8000d24 <setTrafficLightAmber+0x70>)
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d06:	2200      	movs	r2, #0
 8000d08:	4619      	mov	r1, r3
 8000d0a:	f000 fce6 	bl	80016da <HAL_GPIO_WritePin>
}
 8000d0e:	bf00      	nop
 8000d10:	3708      	adds	r7, #8
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	20000090 	.word	0x20000090
 8000d1c:	20000084 	.word	0x20000084
 8000d20:	20000088 	.word	0x20000088
 8000d24:	2000008c 	.word	0x2000008c

08000d28 <display7SEG>:

void display7SEG(int num){
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	2b09      	cmp	r3, #9
 8000d34:	f200 8194 	bhi.w	8001060 <display7SEG+0x338>
 8000d38:	a201      	add	r2, pc, #4	; (adr r2, 8000d40 <display7SEG+0x18>)
 8000d3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d3e:	bf00      	nop
 8000d40:	08000d69 	.word	0x08000d69
 8000d44:	08000db5 	.word	0x08000db5
 8000d48:	08000e01 	.word	0x08000e01
 8000d4c:	08000e4d 	.word	0x08000e4d
 8000d50:	08000e99 	.word	0x08000e99
 8000d54:	08000ee5 	.word	0x08000ee5
 8000d58:	08000f31 	.word	0x08000f31
 8000d5c:	08000f7d 	.word	0x08000f7d
 8000d60:	08000fc9 	.word	0x08000fc9
 8000d64:	08001015 	.word	0x08001015
  switch(num){
	case 0:
	  HAL_GPIO_WritePin(GPIOA, SEG0_Pin, RESET);
 8000d68:	2200      	movs	r2, #0
 8000d6a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d6e:	48bf      	ldr	r0, [pc, #764]	; (800106c <display7SEG+0x344>)
 8000d70:	f000 fcb3 	bl	80016da <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, SEG1_Pin, RESET);
 8000d74:	2200      	movs	r2, #0
 8000d76:	2180      	movs	r1, #128	; 0x80
 8000d78:	48bd      	ldr	r0, [pc, #756]	; (8001070 <display7SEG+0x348>)
 8000d7a:	f000 fcae 	bl	80016da <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, SEG2_Pin, RESET);
 8000d7e:	2200      	movs	r2, #0
 8000d80:	2180      	movs	r1, #128	; 0x80
 8000d82:	48bc      	ldr	r0, [pc, #752]	; (8001074 <display7SEG+0x34c>)
 8000d84:	f000 fca9 	bl	80016da <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, SEG3_Pin, RESET);
 8000d88:	2200      	movs	r2, #0
 8000d8a:	2180      	movs	r1, #128	; 0x80
 8000d8c:	48b7      	ldr	r0, [pc, #732]	; (800106c <display7SEG+0x344>)
 8000d8e:	f000 fca4 	bl	80016da <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, SEG4_Pin, RESET);
 8000d92:	2200      	movs	r2, #0
 8000d94:	2140      	movs	r1, #64	; 0x40
 8000d96:	48b5      	ldr	r0, [pc, #724]	; (800106c <display7SEG+0x344>)
 8000d98:	f000 fc9f 	bl	80016da <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, SEG5_Pin, RESET);
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	2120      	movs	r1, #32
 8000da0:	48b2      	ldr	r0, [pc, #712]	; (800106c <display7SEG+0x344>)
 8000da2:	f000 fc9a 	bl	80016da <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, SEG6_Pin, SET);
 8000da6:	2201      	movs	r2, #1
 8000da8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000dac:	48b1      	ldr	r0, [pc, #708]	; (8001074 <display7SEG+0x34c>)
 8000dae:	f000 fc94 	bl	80016da <HAL_GPIO_WritePin>
	  break;
 8000db2:	e156      	b.n	8001062 <display7SEG+0x33a>
	case 1:
	  HAL_GPIO_WritePin(GPIOA, SEG0_Pin, SET);
 8000db4:	2201      	movs	r2, #1
 8000db6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000dba:	48ac      	ldr	r0, [pc, #688]	; (800106c <display7SEG+0x344>)
 8000dbc:	f000 fc8d 	bl	80016da <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, SEG1_Pin, RESET);
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	2180      	movs	r1, #128	; 0x80
 8000dc4:	48aa      	ldr	r0, [pc, #680]	; (8001070 <display7SEG+0x348>)
 8000dc6:	f000 fc88 	bl	80016da <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, SEG2_Pin, RESET);
 8000dca:	2200      	movs	r2, #0
 8000dcc:	2180      	movs	r1, #128	; 0x80
 8000dce:	48a9      	ldr	r0, [pc, #676]	; (8001074 <display7SEG+0x34c>)
 8000dd0:	f000 fc83 	bl	80016da <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, SEG3_Pin, SET);
 8000dd4:	2201      	movs	r2, #1
 8000dd6:	2180      	movs	r1, #128	; 0x80
 8000dd8:	48a4      	ldr	r0, [pc, #656]	; (800106c <display7SEG+0x344>)
 8000dda:	f000 fc7e 	bl	80016da <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, SEG4_Pin, SET);
 8000dde:	2201      	movs	r2, #1
 8000de0:	2140      	movs	r1, #64	; 0x40
 8000de2:	48a2      	ldr	r0, [pc, #648]	; (800106c <display7SEG+0x344>)
 8000de4:	f000 fc79 	bl	80016da <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, SEG5_Pin, SET);
 8000de8:	2201      	movs	r2, #1
 8000dea:	2120      	movs	r1, #32
 8000dec:	489f      	ldr	r0, [pc, #636]	; (800106c <display7SEG+0x344>)
 8000dee:	f000 fc74 	bl	80016da <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, SEG6_Pin, SET);
 8000df2:	2201      	movs	r2, #1
 8000df4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000df8:	489e      	ldr	r0, [pc, #632]	; (8001074 <display7SEG+0x34c>)
 8000dfa:	f000 fc6e 	bl	80016da <HAL_GPIO_WritePin>
	  break;
 8000dfe:	e130      	b.n	8001062 <display7SEG+0x33a>
	case 2:
	  HAL_GPIO_WritePin(GPIOA, SEG0_Pin, RESET);
 8000e00:	2200      	movs	r2, #0
 8000e02:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e06:	4899      	ldr	r0, [pc, #612]	; (800106c <display7SEG+0x344>)
 8000e08:	f000 fc67 	bl	80016da <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, SEG1_Pin, RESET);
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	2180      	movs	r1, #128	; 0x80
 8000e10:	4897      	ldr	r0, [pc, #604]	; (8001070 <display7SEG+0x348>)
 8000e12:	f000 fc62 	bl	80016da <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, SEG2_Pin, SET);
 8000e16:	2201      	movs	r2, #1
 8000e18:	2180      	movs	r1, #128	; 0x80
 8000e1a:	4896      	ldr	r0, [pc, #600]	; (8001074 <display7SEG+0x34c>)
 8000e1c:	f000 fc5d 	bl	80016da <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, SEG3_Pin, RESET);
 8000e20:	2200      	movs	r2, #0
 8000e22:	2180      	movs	r1, #128	; 0x80
 8000e24:	4891      	ldr	r0, [pc, #580]	; (800106c <display7SEG+0x344>)
 8000e26:	f000 fc58 	bl	80016da <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, SEG4_Pin, RESET);
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	2140      	movs	r1, #64	; 0x40
 8000e2e:	488f      	ldr	r0, [pc, #572]	; (800106c <display7SEG+0x344>)
 8000e30:	f000 fc53 	bl	80016da <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, SEG5_Pin, SET);
 8000e34:	2201      	movs	r2, #1
 8000e36:	2120      	movs	r1, #32
 8000e38:	488c      	ldr	r0, [pc, #560]	; (800106c <display7SEG+0x344>)
 8000e3a:	f000 fc4e 	bl	80016da <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, SEG6_Pin, RESET);
 8000e3e:	2200      	movs	r2, #0
 8000e40:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e44:	488b      	ldr	r0, [pc, #556]	; (8001074 <display7SEG+0x34c>)
 8000e46:	f000 fc48 	bl	80016da <HAL_GPIO_WritePin>
	  break;
 8000e4a:	e10a      	b.n	8001062 <display7SEG+0x33a>
	case 3:
	  HAL_GPIO_WritePin(GPIOA, SEG0_Pin, RESET);
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e52:	4886      	ldr	r0, [pc, #536]	; (800106c <display7SEG+0x344>)
 8000e54:	f000 fc41 	bl	80016da <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, SEG1_Pin, RESET);
 8000e58:	2200      	movs	r2, #0
 8000e5a:	2180      	movs	r1, #128	; 0x80
 8000e5c:	4884      	ldr	r0, [pc, #528]	; (8001070 <display7SEG+0x348>)
 8000e5e:	f000 fc3c 	bl	80016da <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, SEG2_Pin, RESET);
 8000e62:	2200      	movs	r2, #0
 8000e64:	2180      	movs	r1, #128	; 0x80
 8000e66:	4883      	ldr	r0, [pc, #524]	; (8001074 <display7SEG+0x34c>)
 8000e68:	f000 fc37 	bl	80016da <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, SEG3_Pin, RESET);
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	2180      	movs	r1, #128	; 0x80
 8000e70:	487e      	ldr	r0, [pc, #504]	; (800106c <display7SEG+0x344>)
 8000e72:	f000 fc32 	bl	80016da <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, SEG4_Pin, SET);
 8000e76:	2201      	movs	r2, #1
 8000e78:	2140      	movs	r1, #64	; 0x40
 8000e7a:	487c      	ldr	r0, [pc, #496]	; (800106c <display7SEG+0x344>)
 8000e7c:	f000 fc2d 	bl	80016da <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, SEG5_Pin, SET);
 8000e80:	2201      	movs	r2, #1
 8000e82:	2120      	movs	r1, #32
 8000e84:	4879      	ldr	r0, [pc, #484]	; (800106c <display7SEG+0x344>)
 8000e86:	f000 fc28 	bl	80016da <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, SEG6_Pin, RESET);
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e90:	4878      	ldr	r0, [pc, #480]	; (8001074 <display7SEG+0x34c>)
 8000e92:	f000 fc22 	bl	80016da <HAL_GPIO_WritePin>
	  break;
 8000e96:	e0e4      	b.n	8001062 <display7SEG+0x33a>
	case 4:
	  HAL_GPIO_WritePin(GPIOA, SEG0_Pin, SET);
 8000e98:	2201      	movs	r2, #1
 8000e9a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e9e:	4873      	ldr	r0, [pc, #460]	; (800106c <display7SEG+0x344>)
 8000ea0:	f000 fc1b 	bl	80016da <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, SEG1_Pin, RESET);
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	2180      	movs	r1, #128	; 0x80
 8000ea8:	4871      	ldr	r0, [pc, #452]	; (8001070 <display7SEG+0x348>)
 8000eaa:	f000 fc16 	bl	80016da <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, SEG2_Pin, RESET);
 8000eae:	2200      	movs	r2, #0
 8000eb0:	2180      	movs	r1, #128	; 0x80
 8000eb2:	4870      	ldr	r0, [pc, #448]	; (8001074 <display7SEG+0x34c>)
 8000eb4:	f000 fc11 	bl	80016da <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, SEG3_Pin, SET);
 8000eb8:	2201      	movs	r2, #1
 8000eba:	2180      	movs	r1, #128	; 0x80
 8000ebc:	486b      	ldr	r0, [pc, #428]	; (800106c <display7SEG+0x344>)
 8000ebe:	f000 fc0c 	bl	80016da <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, SEG4_Pin, SET);
 8000ec2:	2201      	movs	r2, #1
 8000ec4:	2140      	movs	r1, #64	; 0x40
 8000ec6:	4869      	ldr	r0, [pc, #420]	; (800106c <display7SEG+0x344>)
 8000ec8:	f000 fc07 	bl	80016da <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, SEG5_Pin, RESET);
 8000ecc:	2200      	movs	r2, #0
 8000ece:	2120      	movs	r1, #32
 8000ed0:	4866      	ldr	r0, [pc, #408]	; (800106c <display7SEG+0x344>)
 8000ed2:	f000 fc02 	bl	80016da <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, SEG6_Pin, RESET);
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000edc:	4865      	ldr	r0, [pc, #404]	; (8001074 <display7SEG+0x34c>)
 8000ede:	f000 fbfc 	bl	80016da <HAL_GPIO_WritePin>
	  break;
 8000ee2:	e0be      	b.n	8001062 <display7SEG+0x33a>
	case 5:
	  HAL_GPIO_WritePin(GPIOA, SEG0_Pin, RESET);
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000eea:	4860      	ldr	r0, [pc, #384]	; (800106c <display7SEG+0x344>)
 8000eec:	f000 fbf5 	bl	80016da <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, SEG1_Pin, SET);
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	2180      	movs	r1, #128	; 0x80
 8000ef4:	485e      	ldr	r0, [pc, #376]	; (8001070 <display7SEG+0x348>)
 8000ef6:	f000 fbf0 	bl	80016da <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, SEG2_Pin, RESET);
 8000efa:	2200      	movs	r2, #0
 8000efc:	2180      	movs	r1, #128	; 0x80
 8000efe:	485d      	ldr	r0, [pc, #372]	; (8001074 <display7SEG+0x34c>)
 8000f00:	f000 fbeb 	bl	80016da <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, SEG3_Pin, RESET);
 8000f04:	2200      	movs	r2, #0
 8000f06:	2180      	movs	r1, #128	; 0x80
 8000f08:	4858      	ldr	r0, [pc, #352]	; (800106c <display7SEG+0x344>)
 8000f0a:	f000 fbe6 	bl	80016da <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, SEG4_Pin, SET);
 8000f0e:	2201      	movs	r2, #1
 8000f10:	2140      	movs	r1, #64	; 0x40
 8000f12:	4856      	ldr	r0, [pc, #344]	; (800106c <display7SEG+0x344>)
 8000f14:	f000 fbe1 	bl	80016da <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, SEG5_Pin, RESET);
 8000f18:	2200      	movs	r2, #0
 8000f1a:	2120      	movs	r1, #32
 8000f1c:	4853      	ldr	r0, [pc, #332]	; (800106c <display7SEG+0x344>)
 8000f1e:	f000 fbdc 	bl	80016da <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, SEG6_Pin, RESET);
 8000f22:	2200      	movs	r2, #0
 8000f24:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f28:	4852      	ldr	r0, [pc, #328]	; (8001074 <display7SEG+0x34c>)
 8000f2a:	f000 fbd6 	bl	80016da <HAL_GPIO_WritePin>
	  break;
 8000f2e:	e098      	b.n	8001062 <display7SEG+0x33a>
	case 6:
	  HAL_GPIO_WritePin(GPIOA, SEG0_Pin, RESET);
 8000f30:	2200      	movs	r2, #0
 8000f32:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f36:	484d      	ldr	r0, [pc, #308]	; (800106c <display7SEG+0x344>)
 8000f38:	f000 fbcf 	bl	80016da <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, SEG1_Pin, SET);
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	2180      	movs	r1, #128	; 0x80
 8000f40:	484b      	ldr	r0, [pc, #300]	; (8001070 <display7SEG+0x348>)
 8000f42:	f000 fbca 	bl	80016da <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, SEG2_Pin, RESET);
 8000f46:	2200      	movs	r2, #0
 8000f48:	2180      	movs	r1, #128	; 0x80
 8000f4a:	484a      	ldr	r0, [pc, #296]	; (8001074 <display7SEG+0x34c>)
 8000f4c:	f000 fbc5 	bl	80016da <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, SEG3_Pin, RESET);
 8000f50:	2200      	movs	r2, #0
 8000f52:	2180      	movs	r1, #128	; 0x80
 8000f54:	4845      	ldr	r0, [pc, #276]	; (800106c <display7SEG+0x344>)
 8000f56:	f000 fbc0 	bl	80016da <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, SEG4_Pin, RESET);
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	2140      	movs	r1, #64	; 0x40
 8000f5e:	4843      	ldr	r0, [pc, #268]	; (800106c <display7SEG+0x344>)
 8000f60:	f000 fbbb 	bl	80016da <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, SEG5_Pin, RESET);
 8000f64:	2200      	movs	r2, #0
 8000f66:	2120      	movs	r1, #32
 8000f68:	4840      	ldr	r0, [pc, #256]	; (800106c <display7SEG+0x344>)
 8000f6a:	f000 fbb6 	bl	80016da <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, SEG6_Pin, RESET);
 8000f6e:	2200      	movs	r2, #0
 8000f70:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f74:	483f      	ldr	r0, [pc, #252]	; (8001074 <display7SEG+0x34c>)
 8000f76:	f000 fbb0 	bl	80016da <HAL_GPIO_WritePin>
	  break;
 8000f7a:	e072      	b.n	8001062 <display7SEG+0x33a>
	case 7:
	  HAL_GPIO_WritePin(GPIOA, SEG0_Pin, RESET);
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f82:	483a      	ldr	r0, [pc, #232]	; (800106c <display7SEG+0x344>)
 8000f84:	f000 fba9 	bl	80016da <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, SEG1_Pin, RESET);
 8000f88:	2200      	movs	r2, #0
 8000f8a:	2180      	movs	r1, #128	; 0x80
 8000f8c:	4838      	ldr	r0, [pc, #224]	; (8001070 <display7SEG+0x348>)
 8000f8e:	f000 fba4 	bl	80016da <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, SEG2_Pin, RESET);
 8000f92:	2200      	movs	r2, #0
 8000f94:	2180      	movs	r1, #128	; 0x80
 8000f96:	4837      	ldr	r0, [pc, #220]	; (8001074 <display7SEG+0x34c>)
 8000f98:	f000 fb9f 	bl	80016da <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, SEG3_Pin, SET);
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	2180      	movs	r1, #128	; 0x80
 8000fa0:	4832      	ldr	r0, [pc, #200]	; (800106c <display7SEG+0x344>)
 8000fa2:	f000 fb9a 	bl	80016da <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, SEG4_Pin, SET);
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	2140      	movs	r1, #64	; 0x40
 8000faa:	4830      	ldr	r0, [pc, #192]	; (800106c <display7SEG+0x344>)
 8000fac:	f000 fb95 	bl	80016da <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, SEG5_Pin, SET);
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	2120      	movs	r1, #32
 8000fb4:	482d      	ldr	r0, [pc, #180]	; (800106c <display7SEG+0x344>)
 8000fb6:	f000 fb90 	bl	80016da <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, SEG6_Pin, SET);
 8000fba:	2201      	movs	r2, #1
 8000fbc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fc0:	482c      	ldr	r0, [pc, #176]	; (8001074 <display7SEG+0x34c>)
 8000fc2:	f000 fb8a 	bl	80016da <HAL_GPIO_WritePin>
	  break;
 8000fc6:	e04c      	b.n	8001062 <display7SEG+0x33a>
	case 8:
	  HAL_GPIO_WritePin(GPIOA, SEG0_Pin, RESET);
 8000fc8:	2200      	movs	r2, #0
 8000fca:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fce:	4827      	ldr	r0, [pc, #156]	; (800106c <display7SEG+0x344>)
 8000fd0:	f000 fb83 	bl	80016da <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, SEG1_Pin, RESET);
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	2180      	movs	r1, #128	; 0x80
 8000fd8:	4825      	ldr	r0, [pc, #148]	; (8001070 <display7SEG+0x348>)
 8000fda:	f000 fb7e 	bl	80016da <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, SEG2_Pin, RESET);
 8000fde:	2200      	movs	r2, #0
 8000fe0:	2180      	movs	r1, #128	; 0x80
 8000fe2:	4824      	ldr	r0, [pc, #144]	; (8001074 <display7SEG+0x34c>)
 8000fe4:	f000 fb79 	bl	80016da <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, SEG3_Pin, RESET);
 8000fe8:	2200      	movs	r2, #0
 8000fea:	2180      	movs	r1, #128	; 0x80
 8000fec:	481f      	ldr	r0, [pc, #124]	; (800106c <display7SEG+0x344>)
 8000fee:	f000 fb74 	bl	80016da <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, SEG4_Pin, RESET);
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	2140      	movs	r1, #64	; 0x40
 8000ff6:	481d      	ldr	r0, [pc, #116]	; (800106c <display7SEG+0x344>)
 8000ff8:	f000 fb6f 	bl	80016da <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, SEG5_Pin, RESET);
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	2120      	movs	r1, #32
 8001000:	481a      	ldr	r0, [pc, #104]	; (800106c <display7SEG+0x344>)
 8001002:	f000 fb6a 	bl	80016da <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, SEG6_Pin, RESET);
 8001006:	2200      	movs	r2, #0
 8001008:	f44f 7100 	mov.w	r1, #512	; 0x200
 800100c:	4819      	ldr	r0, [pc, #100]	; (8001074 <display7SEG+0x34c>)
 800100e:	f000 fb64 	bl	80016da <HAL_GPIO_WritePin>
	  break;
 8001012:	e026      	b.n	8001062 <display7SEG+0x33a>
	case 9:
	  HAL_GPIO_WritePin(GPIOA, SEG0_Pin, RESET);
 8001014:	2200      	movs	r2, #0
 8001016:	f44f 7100 	mov.w	r1, #512	; 0x200
 800101a:	4814      	ldr	r0, [pc, #80]	; (800106c <display7SEG+0x344>)
 800101c:	f000 fb5d 	bl	80016da <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOC, SEG1_Pin, RESET);
 8001020:	2200      	movs	r2, #0
 8001022:	2180      	movs	r1, #128	; 0x80
 8001024:	4812      	ldr	r0, [pc, #72]	; (8001070 <display7SEG+0x348>)
 8001026:	f000 fb58 	bl	80016da <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, SEG2_Pin, RESET);
 800102a:	2200      	movs	r2, #0
 800102c:	2180      	movs	r1, #128	; 0x80
 800102e:	4811      	ldr	r0, [pc, #68]	; (8001074 <display7SEG+0x34c>)
 8001030:	f000 fb53 	bl	80016da <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, SEG3_Pin, RESET);
 8001034:	2200      	movs	r2, #0
 8001036:	2180      	movs	r1, #128	; 0x80
 8001038:	480c      	ldr	r0, [pc, #48]	; (800106c <display7SEG+0x344>)
 800103a:	f000 fb4e 	bl	80016da <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, SEG4_Pin, SET);
 800103e:	2201      	movs	r2, #1
 8001040:	2140      	movs	r1, #64	; 0x40
 8001042:	480a      	ldr	r0, [pc, #40]	; (800106c <display7SEG+0x344>)
 8001044:	f000 fb49 	bl	80016da <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOA, SEG5_Pin, RESET);
 8001048:	2200      	movs	r2, #0
 800104a:	2120      	movs	r1, #32
 800104c:	4807      	ldr	r0, [pc, #28]	; (800106c <display7SEG+0x344>)
 800104e:	f000 fb44 	bl	80016da <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, SEG6_Pin, RESET);
 8001052:	2200      	movs	r2, #0
 8001054:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001058:	4806      	ldr	r0, [pc, #24]	; (8001074 <display7SEG+0x34c>)
 800105a:	f000 fb3e 	bl	80016da <HAL_GPIO_WritePin>
	  break;
 800105e:	e000      	b.n	8001062 <display7SEG+0x33a>
	default:
	  break;
 8001060:	bf00      	nop
  }
}
 8001062:	bf00      	nop
 8001064:	3708      	adds	r7, #8
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	40010800 	.word	0x40010800
 8001070:	40011000 	.word	0x40011000
 8001074:	40010c00 	.word	0x40010c00

08001078 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001078:	f7ff fd68 	bl	8000b4c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800107c:	480b      	ldr	r0, [pc, #44]	; (80010ac <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800107e:	490c      	ldr	r1, [pc, #48]	; (80010b0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001080:	4a0c      	ldr	r2, [pc, #48]	; (80010b4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001082:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001084:	e002      	b.n	800108c <LoopCopyDataInit>

08001086 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001086:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001088:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800108a:	3304      	adds	r3, #4

0800108c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800108c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800108e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001090:	d3f9      	bcc.n	8001086 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001092:	4a09      	ldr	r2, [pc, #36]	; (80010b8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001094:	4c09      	ldr	r4, [pc, #36]	; (80010bc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001096:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001098:	e001      	b.n	800109e <LoopFillZerobss>

0800109a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800109a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800109c:	3204      	adds	r2, #4

0800109e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800109e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010a0:	d3fb      	bcc.n	800109a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010a2:	f001 fad1 	bl	8002648 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80010a6:	f7ff fb3b 	bl	8000720 <main>
  bx lr
 80010aa:	4770      	bx	lr
  ldr r0, =_sdata
 80010ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010b0:	200000a8 	.word	0x200000a8
  ldr r2, =_sidata
 80010b4:	080026e4 	.word	0x080026e4
  ldr r2, =_sbss
 80010b8:	200000a8 	.word	0x200000a8
  ldr r4, =_ebss
 80010bc:	2000013c 	.word	0x2000013c

080010c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80010c0:	e7fe      	b.n	80010c0 <ADC1_2_IRQHandler>
	...

080010c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010c8:	4b08      	ldr	r3, [pc, #32]	; (80010ec <HAL_Init+0x28>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4a07      	ldr	r2, [pc, #28]	; (80010ec <HAL_Init+0x28>)
 80010ce:	f043 0310 	orr.w	r3, r3, #16
 80010d2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010d4:	2003      	movs	r0, #3
 80010d6:	f000 f923 	bl	8001320 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010da:	200f      	movs	r0, #15
 80010dc:	f000 f808 	bl	80010f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010e0:	f7ff fcac 	bl	8000a3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010e4:	2300      	movs	r3, #0
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	40022000 	.word	0x40022000

080010f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010f8:	4b12      	ldr	r3, [pc, #72]	; (8001144 <HAL_InitTick+0x54>)
 80010fa:	681a      	ldr	r2, [r3, #0]
 80010fc:	4b12      	ldr	r3, [pc, #72]	; (8001148 <HAL_InitTick+0x58>)
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	4619      	mov	r1, r3
 8001102:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001106:	fbb3 f3f1 	udiv	r3, r3, r1
 800110a:	fbb2 f3f3 	udiv	r3, r2, r3
 800110e:	4618      	mov	r0, r3
 8001110:	f000 f93b 	bl	800138a <HAL_SYSTICK_Config>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800111a:	2301      	movs	r3, #1
 800111c:	e00e      	b.n	800113c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	2b0f      	cmp	r3, #15
 8001122:	d80a      	bhi.n	800113a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001124:	2200      	movs	r2, #0
 8001126:	6879      	ldr	r1, [r7, #4]
 8001128:	f04f 30ff 	mov.w	r0, #4294967295
 800112c:	f000 f903 	bl	8001336 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001130:	4a06      	ldr	r2, [pc, #24]	; (800114c <HAL_InitTick+0x5c>)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001136:	2300      	movs	r3, #0
 8001138:	e000      	b.n	800113c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800113a:	2301      	movs	r3, #1
}
 800113c:	4618      	mov	r0, r3
 800113e:	3708      	adds	r7, #8
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}
 8001144:	20000080 	.word	0x20000080
 8001148:	200000a4 	.word	0x200000a4
 800114c:	200000a0 	.word	0x200000a0

08001150 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001154:	4b05      	ldr	r3, [pc, #20]	; (800116c <HAL_IncTick+0x1c>)
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	461a      	mov	r2, r3
 800115a:	4b05      	ldr	r3, [pc, #20]	; (8001170 <HAL_IncTick+0x20>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	4413      	add	r3, r2
 8001160:	4a03      	ldr	r2, [pc, #12]	; (8001170 <HAL_IncTick+0x20>)
 8001162:	6013      	str	r3, [r2, #0]
}
 8001164:	bf00      	nop
 8001166:	46bd      	mov	sp, r7
 8001168:	bc80      	pop	{r7}
 800116a:	4770      	bx	lr
 800116c:	200000a4 	.word	0x200000a4
 8001170:	20000138 	.word	0x20000138

08001174 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0
  return uwTick;
 8001178:	4b02      	ldr	r3, [pc, #8]	; (8001184 <HAL_GetTick+0x10>)
 800117a:	681b      	ldr	r3, [r3, #0]
}
 800117c:	4618      	mov	r0, r3
 800117e:	46bd      	mov	sp, r7
 8001180:	bc80      	pop	{r7}
 8001182:	4770      	bx	lr
 8001184:	20000138 	.word	0x20000138

08001188 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001188:	b480      	push	{r7}
 800118a:	b085      	sub	sp, #20
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	f003 0307 	and.w	r3, r3, #7
 8001196:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001198:	4b0c      	ldr	r3, [pc, #48]	; (80011cc <__NVIC_SetPriorityGrouping+0x44>)
 800119a:	68db      	ldr	r3, [r3, #12]
 800119c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800119e:	68ba      	ldr	r2, [r7, #8]
 80011a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011a4:	4013      	ands	r3, r2
 80011a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011ac:	68bb      	ldr	r3, [r7, #8]
 80011ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011ba:	4a04      	ldr	r2, [pc, #16]	; (80011cc <__NVIC_SetPriorityGrouping+0x44>)
 80011bc:	68bb      	ldr	r3, [r7, #8]
 80011be:	60d3      	str	r3, [r2, #12]
}
 80011c0:	bf00      	nop
 80011c2:	3714      	adds	r7, #20
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bc80      	pop	{r7}
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop
 80011cc:	e000ed00 	.word	0xe000ed00

080011d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011d4:	4b04      	ldr	r3, [pc, #16]	; (80011e8 <__NVIC_GetPriorityGrouping+0x18>)
 80011d6:	68db      	ldr	r3, [r3, #12]
 80011d8:	0a1b      	lsrs	r3, r3, #8
 80011da:	f003 0307 	and.w	r3, r3, #7
}
 80011de:	4618      	mov	r0, r3
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bc80      	pop	{r7}
 80011e4:	4770      	bx	lr
 80011e6:	bf00      	nop
 80011e8:	e000ed00 	.word	0xe000ed00

080011ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b083      	sub	sp, #12
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	4603      	mov	r3, r0
 80011f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	db0b      	blt.n	8001216 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011fe:	79fb      	ldrb	r3, [r7, #7]
 8001200:	f003 021f 	and.w	r2, r3, #31
 8001204:	4906      	ldr	r1, [pc, #24]	; (8001220 <__NVIC_EnableIRQ+0x34>)
 8001206:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800120a:	095b      	lsrs	r3, r3, #5
 800120c:	2001      	movs	r0, #1
 800120e:	fa00 f202 	lsl.w	r2, r0, r2
 8001212:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001216:	bf00      	nop
 8001218:	370c      	adds	r7, #12
 800121a:	46bd      	mov	sp, r7
 800121c:	bc80      	pop	{r7}
 800121e:	4770      	bx	lr
 8001220:	e000e100 	.word	0xe000e100

08001224 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001224:	b480      	push	{r7}
 8001226:	b083      	sub	sp, #12
 8001228:	af00      	add	r7, sp, #0
 800122a:	4603      	mov	r3, r0
 800122c:	6039      	str	r1, [r7, #0]
 800122e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001230:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001234:	2b00      	cmp	r3, #0
 8001236:	db0a      	blt.n	800124e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	b2da      	uxtb	r2, r3
 800123c:	490c      	ldr	r1, [pc, #48]	; (8001270 <__NVIC_SetPriority+0x4c>)
 800123e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001242:	0112      	lsls	r2, r2, #4
 8001244:	b2d2      	uxtb	r2, r2
 8001246:	440b      	add	r3, r1
 8001248:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800124c:	e00a      	b.n	8001264 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	b2da      	uxtb	r2, r3
 8001252:	4908      	ldr	r1, [pc, #32]	; (8001274 <__NVIC_SetPriority+0x50>)
 8001254:	79fb      	ldrb	r3, [r7, #7]
 8001256:	f003 030f 	and.w	r3, r3, #15
 800125a:	3b04      	subs	r3, #4
 800125c:	0112      	lsls	r2, r2, #4
 800125e:	b2d2      	uxtb	r2, r2
 8001260:	440b      	add	r3, r1
 8001262:	761a      	strb	r2, [r3, #24]
}
 8001264:	bf00      	nop
 8001266:	370c      	adds	r7, #12
 8001268:	46bd      	mov	sp, r7
 800126a:	bc80      	pop	{r7}
 800126c:	4770      	bx	lr
 800126e:	bf00      	nop
 8001270:	e000e100 	.word	0xe000e100
 8001274:	e000ed00 	.word	0xe000ed00

08001278 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001278:	b480      	push	{r7}
 800127a:	b089      	sub	sp, #36	; 0x24
 800127c:	af00      	add	r7, sp, #0
 800127e:	60f8      	str	r0, [r7, #12]
 8001280:	60b9      	str	r1, [r7, #8]
 8001282:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	f003 0307 	and.w	r3, r3, #7
 800128a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800128c:	69fb      	ldr	r3, [r7, #28]
 800128e:	f1c3 0307 	rsb	r3, r3, #7
 8001292:	2b04      	cmp	r3, #4
 8001294:	bf28      	it	cs
 8001296:	2304      	movcs	r3, #4
 8001298:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800129a:	69fb      	ldr	r3, [r7, #28]
 800129c:	3304      	adds	r3, #4
 800129e:	2b06      	cmp	r3, #6
 80012a0:	d902      	bls.n	80012a8 <NVIC_EncodePriority+0x30>
 80012a2:	69fb      	ldr	r3, [r7, #28]
 80012a4:	3b03      	subs	r3, #3
 80012a6:	e000      	b.n	80012aa <NVIC_EncodePriority+0x32>
 80012a8:	2300      	movs	r3, #0
 80012aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012ac:	f04f 32ff 	mov.w	r2, #4294967295
 80012b0:	69bb      	ldr	r3, [r7, #24]
 80012b2:	fa02 f303 	lsl.w	r3, r2, r3
 80012b6:	43da      	mvns	r2, r3
 80012b8:	68bb      	ldr	r3, [r7, #8]
 80012ba:	401a      	ands	r2, r3
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012c0:	f04f 31ff 	mov.w	r1, #4294967295
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	fa01 f303 	lsl.w	r3, r1, r3
 80012ca:	43d9      	mvns	r1, r3
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012d0:	4313      	orrs	r3, r2
         );
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	3724      	adds	r7, #36	; 0x24
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bc80      	pop	{r7}
 80012da:	4770      	bx	lr

080012dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	3b01      	subs	r3, #1
 80012e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012ec:	d301      	bcc.n	80012f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012ee:	2301      	movs	r3, #1
 80012f0:	e00f      	b.n	8001312 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012f2:	4a0a      	ldr	r2, [pc, #40]	; (800131c <SysTick_Config+0x40>)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	3b01      	subs	r3, #1
 80012f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012fa:	210f      	movs	r1, #15
 80012fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001300:	f7ff ff90 	bl	8001224 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001304:	4b05      	ldr	r3, [pc, #20]	; (800131c <SysTick_Config+0x40>)
 8001306:	2200      	movs	r2, #0
 8001308:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800130a:	4b04      	ldr	r3, [pc, #16]	; (800131c <SysTick_Config+0x40>)
 800130c:	2207      	movs	r2, #7
 800130e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001310:	2300      	movs	r3, #0
}
 8001312:	4618      	mov	r0, r3
 8001314:	3708      	adds	r7, #8
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	e000e010 	.word	0xe000e010

08001320 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b082      	sub	sp, #8
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001328:	6878      	ldr	r0, [r7, #4]
 800132a:	f7ff ff2d 	bl	8001188 <__NVIC_SetPriorityGrouping>
}
 800132e:	bf00      	nop
 8001330:	3708      	adds	r7, #8
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}

08001336 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001336:	b580      	push	{r7, lr}
 8001338:	b086      	sub	sp, #24
 800133a:	af00      	add	r7, sp, #0
 800133c:	4603      	mov	r3, r0
 800133e:	60b9      	str	r1, [r7, #8]
 8001340:	607a      	str	r2, [r7, #4]
 8001342:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001344:	2300      	movs	r3, #0
 8001346:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001348:	f7ff ff42 	bl	80011d0 <__NVIC_GetPriorityGrouping>
 800134c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800134e:	687a      	ldr	r2, [r7, #4]
 8001350:	68b9      	ldr	r1, [r7, #8]
 8001352:	6978      	ldr	r0, [r7, #20]
 8001354:	f7ff ff90 	bl	8001278 <NVIC_EncodePriority>
 8001358:	4602      	mov	r2, r0
 800135a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800135e:	4611      	mov	r1, r2
 8001360:	4618      	mov	r0, r3
 8001362:	f7ff ff5f 	bl	8001224 <__NVIC_SetPriority>
}
 8001366:	bf00      	nop
 8001368:	3718      	adds	r7, #24
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}

0800136e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800136e:	b580      	push	{r7, lr}
 8001370:	b082      	sub	sp, #8
 8001372:	af00      	add	r7, sp, #0
 8001374:	4603      	mov	r3, r0
 8001376:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001378:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800137c:	4618      	mov	r0, r3
 800137e:	f7ff ff35 	bl	80011ec <__NVIC_EnableIRQ>
}
 8001382:	bf00      	nop
 8001384:	3708      	adds	r7, #8
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}

0800138a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800138a:	b580      	push	{r7, lr}
 800138c:	b082      	sub	sp, #8
 800138e:	af00      	add	r7, sp, #0
 8001390:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001392:	6878      	ldr	r0, [r7, #4]
 8001394:	f7ff ffa2 	bl	80012dc <SysTick_Config>
 8001398:	4603      	mov	r3, r0
}
 800139a:	4618      	mov	r0, r3
 800139c:	3708      	adds	r7, #8
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
	...

080013a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b08b      	sub	sp, #44	; 0x2c
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
 80013ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80013ae:	2300      	movs	r3, #0
 80013b0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80013b2:	2300      	movs	r3, #0
 80013b4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013b6:	e169      	b.n	800168c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80013b8:	2201      	movs	r2, #1
 80013ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013bc:	fa02 f303 	lsl.w	r3, r2, r3
 80013c0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	69fa      	ldr	r2, [r7, #28]
 80013c8:	4013      	ands	r3, r2
 80013ca:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80013cc:	69ba      	ldr	r2, [r7, #24]
 80013ce:	69fb      	ldr	r3, [r7, #28]
 80013d0:	429a      	cmp	r2, r3
 80013d2:	f040 8158 	bne.w	8001686 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	4a9a      	ldr	r2, [pc, #616]	; (8001644 <HAL_GPIO_Init+0x2a0>)
 80013dc:	4293      	cmp	r3, r2
 80013de:	d05e      	beq.n	800149e <HAL_GPIO_Init+0xfa>
 80013e0:	4a98      	ldr	r2, [pc, #608]	; (8001644 <HAL_GPIO_Init+0x2a0>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d875      	bhi.n	80014d2 <HAL_GPIO_Init+0x12e>
 80013e6:	4a98      	ldr	r2, [pc, #608]	; (8001648 <HAL_GPIO_Init+0x2a4>)
 80013e8:	4293      	cmp	r3, r2
 80013ea:	d058      	beq.n	800149e <HAL_GPIO_Init+0xfa>
 80013ec:	4a96      	ldr	r2, [pc, #600]	; (8001648 <HAL_GPIO_Init+0x2a4>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d86f      	bhi.n	80014d2 <HAL_GPIO_Init+0x12e>
 80013f2:	4a96      	ldr	r2, [pc, #600]	; (800164c <HAL_GPIO_Init+0x2a8>)
 80013f4:	4293      	cmp	r3, r2
 80013f6:	d052      	beq.n	800149e <HAL_GPIO_Init+0xfa>
 80013f8:	4a94      	ldr	r2, [pc, #592]	; (800164c <HAL_GPIO_Init+0x2a8>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d869      	bhi.n	80014d2 <HAL_GPIO_Init+0x12e>
 80013fe:	4a94      	ldr	r2, [pc, #592]	; (8001650 <HAL_GPIO_Init+0x2ac>)
 8001400:	4293      	cmp	r3, r2
 8001402:	d04c      	beq.n	800149e <HAL_GPIO_Init+0xfa>
 8001404:	4a92      	ldr	r2, [pc, #584]	; (8001650 <HAL_GPIO_Init+0x2ac>)
 8001406:	4293      	cmp	r3, r2
 8001408:	d863      	bhi.n	80014d2 <HAL_GPIO_Init+0x12e>
 800140a:	4a92      	ldr	r2, [pc, #584]	; (8001654 <HAL_GPIO_Init+0x2b0>)
 800140c:	4293      	cmp	r3, r2
 800140e:	d046      	beq.n	800149e <HAL_GPIO_Init+0xfa>
 8001410:	4a90      	ldr	r2, [pc, #576]	; (8001654 <HAL_GPIO_Init+0x2b0>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d85d      	bhi.n	80014d2 <HAL_GPIO_Init+0x12e>
 8001416:	2b12      	cmp	r3, #18
 8001418:	d82a      	bhi.n	8001470 <HAL_GPIO_Init+0xcc>
 800141a:	2b12      	cmp	r3, #18
 800141c:	d859      	bhi.n	80014d2 <HAL_GPIO_Init+0x12e>
 800141e:	a201      	add	r2, pc, #4	; (adr r2, 8001424 <HAL_GPIO_Init+0x80>)
 8001420:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001424:	0800149f 	.word	0x0800149f
 8001428:	08001479 	.word	0x08001479
 800142c:	0800148b 	.word	0x0800148b
 8001430:	080014cd 	.word	0x080014cd
 8001434:	080014d3 	.word	0x080014d3
 8001438:	080014d3 	.word	0x080014d3
 800143c:	080014d3 	.word	0x080014d3
 8001440:	080014d3 	.word	0x080014d3
 8001444:	080014d3 	.word	0x080014d3
 8001448:	080014d3 	.word	0x080014d3
 800144c:	080014d3 	.word	0x080014d3
 8001450:	080014d3 	.word	0x080014d3
 8001454:	080014d3 	.word	0x080014d3
 8001458:	080014d3 	.word	0x080014d3
 800145c:	080014d3 	.word	0x080014d3
 8001460:	080014d3 	.word	0x080014d3
 8001464:	080014d3 	.word	0x080014d3
 8001468:	08001481 	.word	0x08001481
 800146c:	08001495 	.word	0x08001495
 8001470:	4a79      	ldr	r2, [pc, #484]	; (8001658 <HAL_GPIO_Init+0x2b4>)
 8001472:	4293      	cmp	r3, r2
 8001474:	d013      	beq.n	800149e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001476:	e02c      	b.n	80014d2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	68db      	ldr	r3, [r3, #12]
 800147c:	623b      	str	r3, [r7, #32]
          break;
 800147e:	e029      	b.n	80014d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	68db      	ldr	r3, [r3, #12]
 8001484:	3304      	adds	r3, #4
 8001486:	623b      	str	r3, [r7, #32]
          break;
 8001488:	e024      	b.n	80014d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	68db      	ldr	r3, [r3, #12]
 800148e:	3308      	adds	r3, #8
 8001490:	623b      	str	r3, [r7, #32]
          break;
 8001492:	e01f      	b.n	80014d4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	68db      	ldr	r3, [r3, #12]
 8001498:	330c      	adds	r3, #12
 800149a:	623b      	str	r3, [r7, #32]
          break;
 800149c:	e01a      	b.n	80014d4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	689b      	ldr	r3, [r3, #8]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d102      	bne.n	80014ac <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80014a6:	2304      	movs	r3, #4
 80014a8:	623b      	str	r3, [r7, #32]
          break;
 80014aa:	e013      	b.n	80014d4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	689b      	ldr	r3, [r3, #8]
 80014b0:	2b01      	cmp	r3, #1
 80014b2:	d105      	bne.n	80014c0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80014b4:	2308      	movs	r3, #8
 80014b6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	69fa      	ldr	r2, [r7, #28]
 80014bc:	611a      	str	r2, [r3, #16]
          break;
 80014be:	e009      	b.n	80014d4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80014c0:	2308      	movs	r3, #8
 80014c2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	69fa      	ldr	r2, [r7, #28]
 80014c8:	615a      	str	r2, [r3, #20]
          break;
 80014ca:	e003      	b.n	80014d4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80014cc:	2300      	movs	r3, #0
 80014ce:	623b      	str	r3, [r7, #32]
          break;
 80014d0:	e000      	b.n	80014d4 <HAL_GPIO_Init+0x130>
          break;
 80014d2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80014d4:	69bb      	ldr	r3, [r7, #24]
 80014d6:	2bff      	cmp	r3, #255	; 0xff
 80014d8:	d801      	bhi.n	80014de <HAL_GPIO_Init+0x13a>
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	e001      	b.n	80014e2 <HAL_GPIO_Init+0x13e>
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	3304      	adds	r3, #4
 80014e2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80014e4:	69bb      	ldr	r3, [r7, #24]
 80014e6:	2bff      	cmp	r3, #255	; 0xff
 80014e8:	d802      	bhi.n	80014f0 <HAL_GPIO_Init+0x14c>
 80014ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ec:	009b      	lsls	r3, r3, #2
 80014ee:	e002      	b.n	80014f6 <HAL_GPIO_Init+0x152>
 80014f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014f2:	3b08      	subs	r3, #8
 80014f4:	009b      	lsls	r3, r3, #2
 80014f6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80014f8:	697b      	ldr	r3, [r7, #20]
 80014fa:	681a      	ldr	r2, [r3, #0]
 80014fc:	210f      	movs	r1, #15
 80014fe:	693b      	ldr	r3, [r7, #16]
 8001500:	fa01 f303 	lsl.w	r3, r1, r3
 8001504:	43db      	mvns	r3, r3
 8001506:	401a      	ands	r2, r3
 8001508:	6a39      	ldr	r1, [r7, #32]
 800150a:	693b      	ldr	r3, [r7, #16]
 800150c:	fa01 f303 	lsl.w	r3, r1, r3
 8001510:	431a      	orrs	r2, r3
 8001512:	697b      	ldr	r3, [r7, #20]
 8001514:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800151e:	2b00      	cmp	r3, #0
 8001520:	f000 80b1 	beq.w	8001686 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001524:	4b4d      	ldr	r3, [pc, #308]	; (800165c <HAL_GPIO_Init+0x2b8>)
 8001526:	699b      	ldr	r3, [r3, #24]
 8001528:	4a4c      	ldr	r2, [pc, #304]	; (800165c <HAL_GPIO_Init+0x2b8>)
 800152a:	f043 0301 	orr.w	r3, r3, #1
 800152e:	6193      	str	r3, [r2, #24]
 8001530:	4b4a      	ldr	r3, [pc, #296]	; (800165c <HAL_GPIO_Init+0x2b8>)
 8001532:	699b      	ldr	r3, [r3, #24]
 8001534:	f003 0301 	and.w	r3, r3, #1
 8001538:	60bb      	str	r3, [r7, #8]
 800153a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800153c:	4a48      	ldr	r2, [pc, #288]	; (8001660 <HAL_GPIO_Init+0x2bc>)
 800153e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001540:	089b      	lsrs	r3, r3, #2
 8001542:	3302      	adds	r3, #2
 8001544:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001548:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800154a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800154c:	f003 0303 	and.w	r3, r3, #3
 8001550:	009b      	lsls	r3, r3, #2
 8001552:	220f      	movs	r2, #15
 8001554:	fa02 f303 	lsl.w	r3, r2, r3
 8001558:	43db      	mvns	r3, r3
 800155a:	68fa      	ldr	r2, [r7, #12]
 800155c:	4013      	ands	r3, r2
 800155e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	4a40      	ldr	r2, [pc, #256]	; (8001664 <HAL_GPIO_Init+0x2c0>)
 8001564:	4293      	cmp	r3, r2
 8001566:	d013      	beq.n	8001590 <HAL_GPIO_Init+0x1ec>
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	4a3f      	ldr	r2, [pc, #252]	; (8001668 <HAL_GPIO_Init+0x2c4>)
 800156c:	4293      	cmp	r3, r2
 800156e:	d00d      	beq.n	800158c <HAL_GPIO_Init+0x1e8>
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	4a3e      	ldr	r2, [pc, #248]	; (800166c <HAL_GPIO_Init+0x2c8>)
 8001574:	4293      	cmp	r3, r2
 8001576:	d007      	beq.n	8001588 <HAL_GPIO_Init+0x1e4>
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	4a3d      	ldr	r2, [pc, #244]	; (8001670 <HAL_GPIO_Init+0x2cc>)
 800157c:	4293      	cmp	r3, r2
 800157e:	d101      	bne.n	8001584 <HAL_GPIO_Init+0x1e0>
 8001580:	2303      	movs	r3, #3
 8001582:	e006      	b.n	8001592 <HAL_GPIO_Init+0x1ee>
 8001584:	2304      	movs	r3, #4
 8001586:	e004      	b.n	8001592 <HAL_GPIO_Init+0x1ee>
 8001588:	2302      	movs	r3, #2
 800158a:	e002      	b.n	8001592 <HAL_GPIO_Init+0x1ee>
 800158c:	2301      	movs	r3, #1
 800158e:	e000      	b.n	8001592 <HAL_GPIO_Init+0x1ee>
 8001590:	2300      	movs	r3, #0
 8001592:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001594:	f002 0203 	and.w	r2, r2, #3
 8001598:	0092      	lsls	r2, r2, #2
 800159a:	4093      	lsls	r3, r2
 800159c:	68fa      	ldr	r2, [r7, #12]
 800159e:	4313      	orrs	r3, r2
 80015a0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80015a2:	492f      	ldr	r1, [pc, #188]	; (8001660 <HAL_GPIO_Init+0x2bc>)
 80015a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015a6:	089b      	lsrs	r3, r3, #2
 80015a8:	3302      	adds	r3, #2
 80015aa:	68fa      	ldr	r2, [r7, #12]
 80015ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d006      	beq.n	80015ca <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80015bc:	4b2d      	ldr	r3, [pc, #180]	; (8001674 <HAL_GPIO_Init+0x2d0>)
 80015be:	689a      	ldr	r2, [r3, #8]
 80015c0:	492c      	ldr	r1, [pc, #176]	; (8001674 <HAL_GPIO_Init+0x2d0>)
 80015c2:	69bb      	ldr	r3, [r7, #24]
 80015c4:	4313      	orrs	r3, r2
 80015c6:	608b      	str	r3, [r1, #8]
 80015c8:	e006      	b.n	80015d8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80015ca:	4b2a      	ldr	r3, [pc, #168]	; (8001674 <HAL_GPIO_Init+0x2d0>)
 80015cc:	689a      	ldr	r2, [r3, #8]
 80015ce:	69bb      	ldr	r3, [r7, #24]
 80015d0:	43db      	mvns	r3, r3
 80015d2:	4928      	ldr	r1, [pc, #160]	; (8001674 <HAL_GPIO_Init+0x2d0>)
 80015d4:	4013      	ands	r3, r2
 80015d6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d006      	beq.n	80015f2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80015e4:	4b23      	ldr	r3, [pc, #140]	; (8001674 <HAL_GPIO_Init+0x2d0>)
 80015e6:	68da      	ldr	r2, [r3, #12]
 80015e8:	4922      	ldr	r1, [pc, #136]	; (8001674 <HAL_GPIO_Init+0x2d0>)
 80015ea:	69bb      	ldr	r3, [r7, #24]
 80015ec:	4313      	orrs	r3, r2
 80015ee:	60cb      	str	r3, [r1, #12]
 80015f0:	e006      	b.n	8001600 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80015f2:	4b20      	ldr	r3, [pc, #128]	; (8001674 <HAL_GPIO_Init+0x2d0>)
 80015f4:	68da      	ldr	r2, [r3, #12]
 80015f6:	69bb      	ldr	r3, [r7, #24]
 80015f8:	43db      	mvns	r3, r3
 80015fa:	491e      	ldr	r1, [pc, #120]	; (8001674 <HAL_GPIO_Init+0x2d0>)
 80015fc:	4013      	ands	r3, r2
 80015fe:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001608:	2b00      	cmp	r3, #0
 800160a:	d006      	beq.n	800161a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800160c:	4b19      	ldr	r3, [pc, #100]	; (8001674 <HAL_GPIO_Init+0x2d0>)
 800160e:	685a      	ldr	r2, [r3, #4]
 8001610:	4918      	ldr	r1, [pc, #96]	; (8001674 <HAL_GPIO_Init+0x2d0>)
 8001612:	69bb      	ldr	r3, [r7, #24]
 8001614:	4313      	orrs	r3, r2
 8001616:	604b      	str	r3, [r1, #4]
 8001618:	e006      	b.n	8001628 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800161a:	4b16      	ldr	r3, [pc, #88]	; (8001674 <HAL_GPIO_Init+0x2d0>)
 800161c:	685a      	ldr	r2, [r3, #4]
 800161e:	69bb      	ldr	r3, [r7, #24]
 8001620:	43db      	mvns	r3, r3
 8001622:	4914      	ldr	r1, [pc, #80]	; (8001674 <HAL_GPIO_Init+0x2d0>)
 8001624:	4013      	ands	r3, r2
 8001626:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001630:	2b00      	cmp	r3, #0
 8001632:	d021      	beq.n	8001678 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001634:	4b0f      	ldr	r3, [pc, #60]	; (8001674 <HAL_GPIO_Init+0x2d0>)
 8001636:	681a      	ldr	r2, [r3, #0]
 8001638:	490e      	ldr	r1, [pc, #56]	; (8001674 <HAL_GPIO_Init+0x2d0>)
 800163a:	69bb      	ldr	r3, [r7, #24]
 800163c:	4313      	orrs	r3, r2
 800163e:	600b      	str	r3, [r1, #0]
 8001640:	e021      	b.n	8001686 <HAL_GPIO_Init+0x2e2>
 8001642:	bf00      	nop
 8001644:	10320000 	.word	0x10320000
 8001648:	10310000 	.word	0x10310000
 800164c:	10220000 	.word	0x10220000
 8001650:	10210000 	.word	0x10210000
 8001654:	10120000 	.word	0x10120000
 8001658:	10110000 	.word	0x10110000
 800165c:	40021000 	.word	0x40021000
 8001660:	40010000 	.word	0x40010000
 8001664:	40010800 	.word	0x40010800
 8001668:	40010c00 	.word	0x40010c00
 800166c:	40011000 	.word	0x40011000
 8001670:	40011400 	.word	0x40011400
 8001674:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001678:	4b0b      	ldr	r3, [pc, #44]	; (80016a8 <HAL_GPIO_Init+0x304>)
 800167a:	681a      	ldr	r2, [r3, #0]
 800167c:	69bb      	ldr	r3, [r7, #24]
 800167e:	43db      	mvns	r3, r3
 8001680:	4909      	ldr	r1, [pc, #36]	; (80016a8 <HAL_GPIO_Init+0x304>)
 8001682:	4013      	ands	r3, r2
 8001684:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001688:	3301      	adds	r3, #1
 800168a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	681a      	ldr	r2, [r3, #0]
 8001690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001692:	fa22 f303 	lsr.w	r3, r2, r3
 8001696:	2b00      	cmp	r3, #0
 8001698:	f47f ae8e 	bne.w	80013b8 <HAL_GPIO_Init+0x14>
  }
}
 800169c:	bf00      	nop
 800169e:	bf00      	nop
 80016a0:	372c      	adds	r7, #44	; 0x2c
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bc80      	pop	{r7}
 80016a6:	4770      	bx	lr
 80016a8:	40010400 	.word	0x40010400

080016ac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80016ac:	b480      	push	{r7}
 80016ae:	b085      	sub	sp, #20
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
 80016b4:	460b      	mov	r3, r1
 80016b6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	689a      	ldr	r2, [r3, #8]
 80016bc:	887b      	ldrh	r3, [r7, #2]
 80016be:	4013      	ands	r3, r2
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d002      	beq.n	80016ca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80016c4:	2301      	movs	r3, #1
 80016c6:	73fb      	strb	r3, [r7, #15]
 80016c8:	e001      	b.n	80016ce <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80016ca:	2300      	movs	r3, #0
 80016cc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80016ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80016d0:	4618      	mov	r0, r3
 80016d2:	3714      	adds	r7, #20
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bc80      	pop	{r7}
 80016d8:	4770      	bx	lr

080016da <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016da:	b480      	push	{r7}
 80016dc:	b083      	sub	sp, #12
 80016de:	af00      	add	r7, sp, #0
 80016e0:	6078      	str	r0, [r7, #4]
 80016e2:	460b      	mov	r3, r1
 80016e4:	807b      	strh	r3, [r7, #2]
 80016e6:	4613      	mov	r3, r2
 80016e8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80016ea:	787b      	ldrb	r3, [r7, #1]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d003      	beq.n	80016f8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016f0:	887a      	ldrh	r2, [r7, #2]
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80016f6:	e003      	b.n	8001700 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80016f8:	887b      	ldrh	r3, [r7, #2]
 80016fa:	041a      	lsls	r2, r3, #16
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	611a      	str	r2, [r3, #16]
}
 8001700:	bf00      	nop
 8001702:	370c      	adds	r7, #12
 8001704:	46bd      	mov	sp, r7
 8001706:	bc80      	pop	{r7}
 8001708:	4770      	bx	lr

0800170a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800170a:	b480      	push	{r7}
 800170c:	b085      	sub	sp, #20
 800170e:	af00      	add	r7, sp, #0
 8001710:	6078      	str	r0, [r7, #4]
 8001712:	460b      	mov	r3, r1
 8001714:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	68db      	ldr	r3, [r3, #12]
 800171a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800171c:	887a      	ldrh	r2, [r7, #2]
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	4013      	ands	r3, r2
 8001722:	041a      	lsls	r2, r3, #16
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	43d9      	mvns	r1, r3
 8001728:	887b      	ldrh	r3, [r7, #2]
 800172a:	400b      	ands	r3, r1
 800172c:	431a      	orrs	r2, r3
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	611a      	str	r2, [r3, #16]
}
 8001732:	bf00      	nop
 8001734:	3714      	adds	r7, #20
 8001736:	46bd      	mov	sp, r7
 8001738:	bc80      	pop	{r7}
 800173a:	4770      	bx	lr

0800173c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b086      	sub	sp, #24
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d101      	bne.n	800174e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800174a:	2301      	movs	r3, #1
 800174c:	e26c      	b.n	8001c28 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f003 0301 	and.w	r3, r3, #1
 8001756:	2b00      	cmp	r3, #0
 8001758:	f000 8087 	beq.w	800186a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800175c:	4b92      	ldr	r3, [pc, #584]	; (80019a8 <HAL_RCC_OscConfig+0x26c>)
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	f003 030c 	and.w	r3, r3, #12
 8001764:	2b04      	cmp	r3, #4
 8001766:	d00c      	beq.n	8001782 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001768:	4b8f      	ldr	r3, [pc, #572]	; (80019a8 <HAL_RCC_OscConfig+0x26c>)
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	f003 030c 	and.w	r3, r3, #12
 8001770:	2b08      	cmp	r3, #8
 8001772:	d112      	bne.n	800179a <HAL_RCC_OscConfig+0x5e>
 8001774:	4b8c      	ldr	r3, [pc, #560]	; (80019a8 <HAL_RCC_OscConfig+0x26c>)
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800177c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001780:	d10b      	bne.n	800179a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001782:	4b89      	ldr	r3, [pc, #548]	; (80019a8 <HAL_RCC_OscConfig+0x26c>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800178a:	2b00      	cmp	r3, #0
 800178c:	d06c      	beq.n	8001868 <HAL_RCC_OscConfig+0x12c>
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d168      	bne.n	8001868 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001796:	2301      	movs	r3, #1
 8001798:	e246      	b.n	8001c28 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017a2:	d106      	bne.n	80017b2 <HAL_RCC_OscConfig+0x76>
 80017a4:	4b80      	ldr	r3, [pc, #512]	; (80019a8 <HAL_RCC_OscConfig+0x26c>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a7f      	ldr	r2, [pc, #508]	; (80019a8 <HAL_RCC_OscConfig+0x26c>)
 80017aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017ae:	6013      	str	r3, [r2, #0]
 80017b0:	e02e      	b.n	8001810 <HAL_RCC_OscConfig+0xd4>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d10c      	bne.n	80017d4 <HAL_RCC_OscConfig+0x98>
 80017ba:	4b7b      	ldr	r3, [pc, #492]	; (80019a8 <HAL_RCC_OscConfig+0x26c>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4a7a      	ldr	r2, [pc, #488]	; (80019a8 <HAL_RCC_OscConfig+0x26c>)
 80017c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017c4:	6013      	str	r3, [r2, #0]
 80017c6:	4b78      	ldr	r3, [pc, #480]	; (80019a8 <HAL_RCC_OscConfig+0x26c>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4a77      	ldr	r2, [pc, #476]	; (80019a8 <HAL_RCC_OscConfig+0x26c>)
 80017cc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017d0:	6013      	str	r3, [r2, #0]
 80017d2:	e01d      	b.n	8001810 <HAL_RCC_OscConfig+0xd4>
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80017dc:	d10c      	bne.n	80017f8 <HAL_RCC_OscConfig+0xbc>
 80017de:	4b72      	ldr	r3, [pc, #456]	; (80019a8 <HAL_RCC_OscConfig+0x26c>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4a71      	ldr	r2, [pc, #452]	; (80019a8 <HAL_RCC_OscConfig+0x26c>)
 80017e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017e8:	6013      	str	r3, [r2, #0]
 80017ea:	4b6f      	ldr	r3, [pc, #444]	; (80019a8 <HAL_RCC_OscConfig+0x26c>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4a6e      	ldr	r2, [pc, #440]	; (80019a8 <HAL_RCC_OscConfig+0x26c>)
 80017f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017f4:	6013      	str	r3, [r2, #0]
 80017f6:	e00b      	b.n	8001810 <HAL_RCC_OscConfig+0xd4>
 80017f8:	4b6b      	ldr	r3, [pc, #428]	; (80019a8 <HAL_RCC_OscConfig+0x26c>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a6a      	ldr	r2, [pc, #424]	; (80019a8 <HAL_RCC_OscConfig+0x26c>)
 80017fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001802:	6013      	str	r3, [r2, #0]
 8001804:	4b68      	ldr	r3, [pc, #416]	; (80019a8 <HAL_RCC_OscConfig+0x26c>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a67      	ldr	r2, [pc, #412]	; (80019a8 <HAL_RCC_OscConfig+0x26c>)
 800180a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800180e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d013      	beq.n	8001840 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001818:	f7ff fcac 	bl	8001174 <HAL_GetTick>
 800181c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800181e:	e008      	b.n	8001832 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001820:	f7ff fca8 	bl	8001174 <HAL_GetTick>
 8001824:	4602      	mov	r2, r0
 8001826:	693b      	ldr	r3, [r7, #16]
 8001828:	1ad3      	subs	r3, r2, r3
 800182a:	2b64      	cmp	r3, #100	; 0x64
 800182c:	d901      	bls.n	8001832 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800182e:	2303      	movs	r3, #3
 8001830:	e1fa      	b.n	8001c28 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001832:	4b5d      	ldr	r3, [pc, #372]	; (80019a8 <HAL_RCC_OscConfig+0x26c>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800183a:	2b00      	cmp	r3, #0
 800183c:	d0f0      	beq.n	8001820 <HAL_RCC_OscConfig+0xe4>
 800183e:	e014      	b.n	800186a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001840:	f7ff fc98 	bl	8001174 <HAL_GetTick>
 8001844:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001846:	e008      	b.n	800185a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001848:	f7ff fc94 	bl	8001174 <HAL_GetTick>
 800184c:	4602      	mov	r2, r0
 800184e:	693b      	ldr	r3, [r7, #16]
 8001850:	1ad3      	subs	r3, r2, r3
 8001852:	2b64      	cmp	r3, #100	; 0x64
 8001854:	d901      	bls.n	800185a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001856:	2303      	movs	r3, #3
 8001858:	e1e6      	b.n	8001c28 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800185a:	4b53      	ldr	r3, [pc, #332]	; (80019a8 <HAL_RCC_OscConfig+0x26c>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001862:	2b00      	cmp	r3, #0
 8001864:	d1f0      	bne.n	8001848 <HAL_RCC_OscConfig+0x10c>
 8001866:	e000      	b.n	800186a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001868:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f003 0302 	and.w	r3, r3, #2
 8001872:	2b00      	cmp	r3, #0
 8001874:	d063      	beq.n	800193e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001876:	4b4c      	ldr	r3, [pc, #304]	; (80019a8 <HAL_RCC_OscConfig+0x26c>)
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	f003 030c 	and.w	r3, r3, #12
 800187e:	2b00      	cmp	r3, #0
 8001880:	d00b      	beq.n	800189a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001882:	4b49      	ldr	r3, [pc, #292]	; (80019a8 <HAL_RCC_OscConfig+0x26c>)
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	f003 030c 	and.w	r3, r3, #12
 800188a:	2b08      	cmp	r3, #8
 800188c:	d11c      	bne.n	80018c8 <HAL_RCC_OscConfig+0x18c>
 800188e:	4b46      	ldr	r3, [pc, #280]	; (80019a8 <HAL_RCC_OscConfig+0x26c>)
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001896:	2b00      	cmp	r3, #0
 8001898:	d116      	bne.n	80018c8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800189a:	4b43      	ldr	r3, [pc, #268]	; (80019a8 <HAL_RCC_OscConfig+0x26c>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f003 0302 	and.w	r3, r3, #2
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d005      	beq.n	80018b2 <HAL_RCC_OscConfig+0x176>
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	691b      	ldr	r3, [r3, #16]
 80018aa:	2b01      	cmp	r3, #1
 80018ac:	d001      	beq.n	80018b2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80018ae:	2301      	movs	r3, #1
 80018b0:	e1ba      	b.n	8001c28 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018b2:	4b3d      	ldr	r3, [pc, #244]	; (80019a8 <HAL_RCC_OscConfig+0x26c>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	695b      	ldr	r3, [r3, #20]
 80018be:	00db      	lsls	r3, r3, #3
 80018c0:	4939      	ldr	r1, [pc, #228]	; (80019a8 <HAL_RCC_OscConfig+0x26c>)
 80018c2:	4313      	orrs	r3, r2
 80018c4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018c6:	e03a      	b.n	800193e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	691b      	ldr	r3, [r3, #16]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d020      	beq.n	8001912 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018d0:	4b36      	ldr	r3, [pc, #216]	; (80019ac <HAL_RCC_OscConfig+0x270>)
 80018d2:	2201      	movs	r2, #1
 80018d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018d6:	f7ff fc4d 	bl	8001174 <HAL_GetTick>
 80018da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018dc:	e008      	b.n	80018f0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018de:	f7ff fc49 	bl	8001174 <HAL_GetTick>
 80018e2:	4602      	mov	r2, r0
 80018e4:	693b      	ldr	r3, [r7, #16]
 80018e6:	1ad3      	subs	r3, r2, r3
 80018e8:	2b02      	cmp	r3, #2
 80018ea:	d901      	bls.n	80018f0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80018ec:	2303      	movs	r3, #3
 80018ee:	e19b      	b.n	8001c28 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018f0:	4b2d      	ldr	r3, [pc, #180]	; (80019a8 <HAL_RCC_OscConfig+0x26c>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f003 0302 	and.w	r3, r3, #2
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d0f0      	beq.n	80018de <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018fc:	4b2a      	ldr	r3, [pc, #168]	; (80019a8 <HAL_RCC_OscConfig+0x26c>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	695b      	ldr	r3, [r3, #20]
 8001908:	00db      	lsls	r3, r3, #3
 800190a:	4927      	ldr	r1, [pc, #156]	; (80019a8 <HAL_RCC_OscConfig+0x26c>)
 800190c:	4313      	orrs	r3, r2
 800190e:	600b      	str	r3, [r1, #0]
 8001910:	e015      	b.n	800193e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001912:	4b26      	ldr	r3, [pc, #152]	; (80019ac <HAL_RCC_OscConfig+0x270>)
 8001914:	2200      	movs	r2, #0
 8001916:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001918:	f7ff fc2c 	bl	8001174 <HAL_GetTick>
 800191c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800191e:	e008      	b.n	8001932 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001920:	f7ff fc28 	bl	8001174 <HAL_GetTick>
 8001924:	4602      	mov	r2, r0
 8001926:	693b      	ldr	r3, [r7, #16]
 8001928:	1ad3      	subs	r3, r2, r3
 800192a:	2b02      	cmp	r3, #2
 800192c:	d901      	bls.n	8001932 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800192e:	2303      	movs	r3, #3
 8001930:	e17a      	b.n	8001c28 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001932:	4b1d      	ldr	r3, [pc, #116]	; (80019a8 <HAL_RCC_OscConfig+0x26c>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f003 0302 	and.w	r3, r3, #2
 800193a:	2b00      	cmp	r3, #0
 800193c:	d1f0      	bne.n	8001920 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f003 0308 	and.w	r3, r3, #8
 8001946:	2b00      	cmp	r3, #0
 8001948:	d03a      	beq.n	80019c0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	699b      	ldr	r3, [r3, #24]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d019      	beq.n	8001986 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001952:	4b17      	ldr	r3, [pc, #92]	; (80019b0 <HAL_RCC_OscConfig+0x274>)
 8001954:	2201      	movs	r2, #1
 8001956:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001958:	f7ff fc0c 	bl	8001174 <HAL_GetTick>
 800195c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800195e:	e008      	b.n	8001972 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001960:	f7ff fc08 	bl	8001174 <HAL_GetTick>
 8001964:	4602      	mov	r2, r0
 8001966:	693b      	ldr	r3, [r7, #16]
 8001968:	1ad3      	subs	r3, r2, r3
 800196a:	2b02      	cmp	r3, #2
 800196c:	d901      	bls.n	8001972 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800196e:	2303      	movs	r3, #3
 8001970:	e15a      	b.n	8001c28 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001972:	4b0d      	ldr	r3, [pc, #52]	; (80019a8 <HAL_RCC_OscConfig+0x26c>)
 8001974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001976:	f003 0302 	and.w	r3, r3, #2
 800197a:	2b00      	cmp	r3, #0
 800197c:	d0f0      	beq.n	8001960 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800197e:	2001      	movs	r0, #1
 8001980:	f000 fa9a 	bl	8001eb8 <RCC_Delay>
 8001984:	e01c      	b.n	80019c0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001986:	4b0a      	ldr	r3, [pc, #40]	; (80019b0 <HAL_RCC_OscConfig+0x274>)
 8001988:	2200      	movs	r2, #0
 800198a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800198c:	f7ff fbf2 	bl	8001174 <HAL_GetTick>
 8001990:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001992:	e00f      	b.n	80019b4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001994:	f7ff fbee 	bl	8001174 <HAL_GetTick>
 8001998:	4602      	mov	r2, r0
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	1ad3      	subs	r3, r2, r3
 800199e:	2b02      	cmp	r3, #2
 80019a0:	d908      	bls.n	80019b4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80019a2:	2303      	movs	r3, #3
 80019a4:	e140      	b.n	8001c28 <HAL_RCC_OscConfig+0x4ec>
 80019a6:	bf00      	nop
 80019a8:	40021000 	.word	0x40021000
 80019ac:	42420000 	.word	0x42420000
 80019b0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019b4:	4b9e      	ldr	r3, [pc, #632]	; (8001c30 <HAL_RCC_OscConfig+0x4f4>)
 80019b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019b8:	f003 0302 	and.w	r3, r3, #2
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d1e9      	bne.n	8001994 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f003 0304 	and.w	r3, r3, #4
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	f000 80a6 	beq.w	8001b1a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019ce:	2300      	movs	r3, #0
 80019d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019d2:	4b97      	ldr	r3, [pc, #604]	; (8001c30 <HAL_RCC_OscConfig+0x4f4>)
 80019d4:	69db      	ldr	r3, [r3, #28]
 80019d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d10d      	bne.n	80019fa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019de:	4b94      	ldr	r3, [pc, #592]	; (8001c30 <HAL_RCC_OscConfig+0x4f4>)
 80019e0:	69db      	ldr	r3, [r3, #28]
 80019e2:	4a93      	ldr	r2, [pc, #588]	; (8001c30 <HAL_RCC_OscConfig+0x4f4>)
 80019e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019e8:	61d3      	str	r3, [r2, #28]
 80019ea:	4b91      	ldr	r3, [pc, #580]	; (8001c30 <HAL_RCC_OscConfig+0x4f4>)
 80019ec:	69db      	ldr	r3, [r3, #28]
 80019ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019f2:	60bb      	str	r3, [r7, #8]
 80019f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019f6:	2301      	movs	r3, #1
 80019f8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019fa:	4b8e      	ldr	r3, [pc, #568]	; (8001c34 <HAL_RCC_OscConfig+0x4f8>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d118      	bne.n	8001a38 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a06:	4b8b      	ldr	r3, [pc, #556]	; (8001c34 <HAL_RCC_OscConfig+0x4f8>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4a8a      	ldr	r2, [pc, #552]	; (8001c34 <HAL_RCC_OscConfig+0x4f8>)
 8001a0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a10:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a12:	f7ff fbaf 	bl	8001174 <HAL_GetTick>
 8001a16:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a18:	e008      	b.n	8001a2c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a1a:	f7ff fbab 	bl	8001174 <HAL_GetTick>
 8001a1e:	4602      	mov	r2, r0
 8001a20:	693b      	ldr	r3, [r7, #16]
 8001a22:	1ad3      	subs	r3, r2, r3
 8001a24:	2b64      	cmp	r3, #100	; 0x64
 8001a26:	d901      	bls.n	8001a2c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001a28:	2303      	movs	r3, #3
 8001a2a:	e0fd      	b.n	8001c28 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a2c:	4b81      	ldr	r3, [pc, #516]	; (8001c34 <HAL_RCC_OscConfig+0x4f8>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d0f0      	beq.n	8001a1a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	68db      	ldr	r3, [r3, #12]
 8001a3c:	2b01      	cmp	r3, #1
 8001a3e:	d106      	bne.n	8001a4e <HAL_RCC_OscConfig+0x312>
 8001a40:	4b7b      	ldr	r3, [pc, #492]	; (8001c30 <HAL_RCC_OscConfig+0x4f4>)
 8001a42:	6a1b      	ldr	r3, [r3, #32]
 8001a44:	4a7a      	ldr	r2, [pc, #488]	; (8001c30 <HAL_RCC_OscConfig+0x4f4>)
 8001a46:	f043 0301 	orr.w	r3, r3, #1
 8001a4a:	6213      	str	r3, [r2, #32]
 8001a4c:	e02d      	b.n	8001aaa <HAL_RCC_OscConfig+0x36e>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	68db      	ldr	r3, [r3, #12]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d10c      	bne.n	8001a70 <HAL_RCC_OscConfig+0x334>
 8001a56:	4b76      	ldr	r3, [pc, #472]	; (8001c30 <HAL_RCC_OscConfig+0x4f4>)
 8001a58:	6a1b      	ldr	r3, [r3, #32]
 8001a5a:	4a75      	ldr	r2, [pc, #468]	; (8001c30 <HAL_RCC_OscConfig+0x4f4>)
 8001a5c:	f023 0301 	bic.w	r3, r3, #1
 8001a60:	6213      	str	r3, [r2, #32]
 8001a62:	4b73      	ldr	r3, [pc, #460]	; (8001c30 <HAL_RCC_OscConfig+0x4f4>)
 8001a64:	6a1b      	ldr	r3, [r3, #32]
 8001a66:	4a72      	ldr	r2, [pc, #456]	; (8001c30 <HAL_RCC_OscConfig+0x4f4>)
 8001a68:	f023 0304 	bic.w	r3, r3, #4
 8001a6c:	6213      	str	r3, [r2, #32]
 8001a6e:	e01c      	b.n	8001aaa <HAL_RCC_OscConfig+0x36e>
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	68db      	ldr	r3, [r3, #12]
 8001a74:	2b05      	cmp	r3, #5
 8001a76:	d10c      	bne.n	8001a92 <HAL_RCC_OscConfig+0x356>
 8001a78:	4b6d      	ldr	r3, [pc, #436]	; (8001c30 <HAL_RCC_OscConfig+0x4f4>)
 8001a7a:	6a1b      	ldr	r3, [r3, #32]
 8001a7c:	4a6c      	ldr	r2, [pc, #432]	; (8001c30 <HAL_RCC_OscConfig+0x4f4>)
 8001a7e:	f043 0304 	orr.w	r3, r3, #4
 8001a82:	6213      	str	r3, [r2, #32]
 8001a84:	4b6a      	ldr	r3, [pc, #424]	; (8001c30 <HAL_RCC_OscConfig+0x4f4>)
 8001a86:	6a1b      	ldr	r3, [r3, #32]
 8001a88:	4a69      	ldr	r2, [pc, #420]	; (8001c30 <HAL_RCC_OscConfig+0x4f4>)
 8001a8a:	f043 0301 	orr.w	r3, r3, #1
 8001a8e:	6213      	str	r3, [r2, #32]
 8001a90:	e00b      	b.n	8001aaa <HAL_RCC_OscConfig+0x36e>
 8001a92:	4b67      	ldr	r3, [pc, #412]	; (8001c30 <HAL_RCC_OscConfig+0x4f4>)
 8001a94:	6a1b      	ldr	r3, [r3, #32]
 8001a96:	4a66      	ldr	r2, [pc, #408]	; (8001c30 <HAL_RCC_OscConfig+0x4f4>)
 8001a98:	f023 0301 	bic.w	r3, r3, #1
 8001a9c:	6213      	str	r3, [r2, #32]
 8001a9e:	4b64      	ldr	r3, [pc, #400]	; (8001c30 <HAL_RCC_OscConfig+0x4f4>)
 8001aa0:	6a1b      	ldr	r3, [r3, #32]
 8001aa2:	4a63      	ldr	r2, [pc, #396]	; (8001c30 <HAL_RCC_OscConfig+0x4f4>)
 8001aa4:	f023 0304 	bic.w	r3, r3, #4
 8001aa8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	68db      	ldr	r3, [r3, #12]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d015      	beq.n	8001ade <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ab2:	f7ff fb5f 	bl	8001174 <HAL_GetTick>
 8001ab6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ab8:	e00a      	b.n	8001ad0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001aba:	f7ff fb5b 	bl	8001174 <HAL_GetTick>
 8001abe:	4602      	mov	r2, r0
 8001ac0:	693b      	ldr	r3, [r7, #16]
 8001ac2:	1ad3      	subs	r3, r2, r3
 8001ac4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d901      	bls.n	8001ad0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001acc:	2303      	movs	r3, #3
 8001ace:	e0ab      	b.n	8001c28 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ad0:	4b57      	ldr	r3, [pc, #348]	; (8001c30 <HAL_RCC_OscConfig+0x4f4>)
 8001ad2:	6a1b      	ldr	r3, [r3, #32]
 8001ad4:	f003 0302 	and.w	r3, r3, #2
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d0ee      	beq.n	8001aba <HAL_RCC_OscConfig+0x37e>
 8001adc:	e014      	b.n	8001b08 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ade:	f7ff fb49 	bl	8001174 <HAL_GetTick>
 8001ae2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ae4:	e00a      	b.n	8001afc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ae6:	f7ff fb45 	bl	8001174 <HAL_GetTick>
 8001aea:	4602      	mov	r2, r0
 8001aec:	693b      	ldr	r3, [r7, #16]
 8001aee:	1ad3      	subs	r3, r2, r3
 8001af0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d901      	bls.n	8001afc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001af8:	2303      	movs	r3, #3
 8001afa:	e095      	b.n	8001c28 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001afc:	4b4c      	ldr	r3, [pc, #304]	; (8001c30 <HAL_RCC_OscConfig+0x4f4>)
 8001afe:	6a1b      	ldr	r3, [r3, #32]
 8001b00:	f003 0302 	and.w	r3, r3, #2
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d1ee      	bne.n	8001ae6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001b08:	7dfb      	ldrb	r3, [r7, #23]
 8001b0a:	2b01      	cmp	r3, #1
 8001b0c:	d105      	bne.n	8001b1a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b0e:	4b48      	ldr	r3, [pc, #288]	; (8001c30 <HAL_RCC_OscConfig+0x4f4>)
 8001b10:	69db      	ldr	r3, [r3, #28]
 8001b12:	4a47      	ldr	r2, [pc, #284]	; (8001c30 <HAL_RCC_OscConfig+0x4f4>)
 8001b14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b18:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	69db      	ldr	r3, [r3, #28]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	f000 8081 	beq.w	8001c26 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b24:	4b42      	ldr	r3, [pc, #264]	; (8001c30 <HAL_RCC_OscConfig+0x4f4>)
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	f003 030c 	and.w	r3, r3, #12
 8001b2c:	2b08      	cmp	r3, #8
 8001b2e:	d061      	beq.n	8001bf4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	69db      	ldr	r3, [r3, #28]
 8001b34:	2b02      	cmp	r3, #2
 8001b36:	d146      	bne.n	8001bc6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b38:	4b3f      	ldr	r3, [pc, #252]	; (8001c38 <HAL_RCC_OscConfig+0x4fc>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b3e:	f7ff fb19 	bl	8001174 <HAL_GetTick>
 8001b42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b44:	e008      	b.n	8001b58 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b46:	f7ff fb15 	bl	8001174 <HAL_GetTick>
 8001b4a:	4602      	mov	r2, r0
 8001b4c:	693b      	ldr	r3, [r7, #16]
 8001b4e:	1ad3      	subs	r3, r2, r3
 8001b50:	2b02      	cmp	r3, #2
 8001b52:	d901      	bls.n	8001b58 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001b54:	2303      	movs	r3, #3
 8001b56:	e067      	b.n	8001c28 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b58:	4b35      	ldr	r3, [pc, #212]	; (8001c30 <HAL_RCC_OscConfig+0x4f4>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d1f0      	bne.n	8001b46 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6a1b      	ldr	r3, [r3, #32]
 8001b68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b6c:	d108      	bne.n	8001b80 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001b6e:	4b30      	ldr	r3, [pc, #192]	; (8001c30 <HAL_RCC_OscConfig+0x4f4>)
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	492d      	ldr	r1, [pc, #180]	; (8001c30 <HAL_RCC_OscConfig+0x4f4>)
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b80:	4b2b      	ldr	r3, [pc, #172]	; (8001c30 <HAL_RCC_OscConfig+0x4f4>)
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6a19      	ldr	r1, [r3, #32]
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b90:	430b      	orrs	r3, r1
 8001b92:	4927      	ldr	r1, [pc, #156]	; (8001c30 <HAL_RCC_OscConfig+0x4f4>)
 8001b94:	4313      	orrs	r3, r2
 8001b96:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b98:	4b27      	ldr	r3, [pc, #156]	; (8001c38 <HAL_RCC_OscConfig+0x4fc>)
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b9e:	f7ff fae9 	bl	8001174 <HAL_GetTick>
 8001ba2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ba4:	e008      	b.n	8001bb8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ba6:	f7ff fae5 	bl	8001174 <HAL_GetTick>
 8001baa:	4602      	mov	r2, r0
 8001bac:	693b      	ldr	r3, [r7, #16]
 8001bae:	1ad3      	subs	r3, r2, r3
 8001bb0:	2b02      	cmp	r3, #2
 8001bb2:	d901      	bls.n	8001bb8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001bb4:	2303      	movs	r3, #3
 8001bb6:	e037      	b.n	8001c28 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001bb8:	4b1d      	ldr	r3, [pc, #116]	; (8001c30 <HAL_RCC_OscConfig+0x4f4>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d0f0      	beq.n	8001ba6 <HAL_RCC_OscConfig+0x46a>
 8001bc4:	e02f      	b.n	8001c26 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bc6:	4b1c      	ldr	r3, [pc, #112]	; (8001c38 <HAL_RCC_OscConfig+0x4fc>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bcc:	f7ff fad2 	bl	8001174 <HAL_GetTick>
 8001bd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bd2:	e008      	b.n	8001be6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bd4:	f7ff face 	bl	8001174 <HAL_GetTick>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	1ad3      	subs	r3, r2, r3
 8001bde:	2b02      	cmp	r3, #2
 8001be0:	d901      	bls.n	8001be6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001be2:	2303      	movs	r3, #3
 8001be4:	e020      	b.n	8001c28 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001be6:	4b12      	ldr	r3, [pc, #72]	; (8001c30 <HAL_RCC_OscConfig+0x4f4>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d1f0      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x498>
 8001bf2:	e018      	b.n	8001c26 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	69db      	ldr	r3, [r3, #28]
 8001bf8:	2b01      	cmp	r3, #1
 8001bfa:	d101      	bne.n	8001c00 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	e013      	b.n	8001c28 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001c00:	4b0b      	ldr	r3, [pc, #44]	; (8001c30 <HAL_RCC_OscConfig+0x4f4>)
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6a1b      	ldr	r3, [r3, #32]
 8001c10:	429a      	cmp	r2, r3
 8001c12:	d106      	bne.n	8001c22 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c1e:	429a      	cmp	r2, r3
 8001c20:	d001      	beq.n	8001c26 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001c22:	2301      	movs	r3, #1
 8001c24:	e000      	b.n	8001c28 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001c26:	2300      	movs	r3, #0
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	3718      	adds	r7, #24
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}
 8001c30:	40021000 	.word	0x40021000
 8001c34:	40007000 	.word	0x40007000
 8001c38:	42420060 	.word	0x42420060

08001c3c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b084      	sub	sp, #16
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
 8001c44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d101      	bne.n	8001c50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	e0d0      	b.n	8001df2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c50:	4b6a      	ldr	r3, [pc, #424]	; (8001dfc <HAL_RCC_ClockConfig+0x1c0>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f003 0307 	and.w	r3, r3, #7
 8001c58:	683a      	ldr	r2, [r7, #0]
 8001c5a:	429a      	cmp	r2, r3
 8001c5c:	d910      	bls.n	8001c80 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c5e:	4b67      	ldr	r3, [pc, #412]	; (8001dfc <HAL_RCC_ClockConfig+0x1c0>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f023 0207 	bic.w	r2, r3, #7
 8001c66:	4965      	ldr	r1, [pc, #404]	; (8001dfc <HAL_RCC_ClockConfig+0x1c0>)
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	4313      	orrs	r3, r2
 8001c6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c6e:	4b63      	ldr	r3, [pc, #396]	; (8001dfc <HAL_RCC_ClockConfig+0x1c0>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f003 0307 	and.w	r3, r3, #7
 8001c76:	683a      	ldr	r2, [r7, #0]
 8001c78:	429a      	cmp	r2, r3
 8001c7a:	d001      	beq.n	8001c80 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	e0b8      	b.n	8001df2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f003 0302 	and.w	r3, r3, #2
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d020      	beq.n	8001cce <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f003 0304 	and.w	r3, r3, #4
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d005      	beq.n	8001ca4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c98:	4b59      	ldr	r3, [pc, #356]	; (8001e00 <HAL_RCC_ClockConfig+0x1c4>)
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	4a58      	ldr	r2, [pc, #352]	; (8001e00 <HAL_RCC_ClockConfig+0x1c4>)
 8001c9e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001ca2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f003 0308 	and.w	r3, r3, #8
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d005      	beq.n	8001cbc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001cb0:	4b53      	ldr	r3, [pc, #332]	; (8001e00 <HAL_RCC_ClockConfig+0x1c4>)
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	4a52      	ldr	r2, [pc, #328]	; (8001e00 <HAL_RCC_ClockConfig+0x1c4>)
 8001cb6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001cba:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cbc:	4b50      	ldr	r3, [pc, #320]	; (8001e00 <HAL_RCC_ClockConfig+0x1c4>)
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	494d      	ldr	r1, [pc, #308]	; (8001e00 <HAL_RCC_ClockConfig+0x1c4>)
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f003 0301 	and.w	r3, r3, #1
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d040      	beq.n	8001d5c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	2b01      	cmp	r3, #1
 8001ce0:	d107      	bne.n	8001cf2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ce2:	4b47      	ldr	r3, [pc, #284]	; (8001e00 <HAL_RCC_ClockConfig+0x1c4>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d115      	bne.n	8001d1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e07f      	b.n	8001df2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	2b02      	cmp	r3, #2
 8001cf8:	d107      	bne.n	8001d0a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cfa:	4b41      	ldr	r3, [pc, #260]	; (8001e00 <HAL_RCC_ClockConfig+0x1c4>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d109      	bne.n	8001d1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d06:	2301      	movs	r3, #1
 8001d08:	e073      	b.n	8001df2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d0a:	4b3d      	ldr	r3, [pc, #244]	; (8001e00 <HAL_RCC_ClockConfig+0x1c4>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f003 0302 	and.w	r3, r3, #2
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d101      	bne.n	8001d1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d16:	2301      	movs	r3, #1
 8001d18:	e06b      	b.n	8001df2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d1a:	4b39      	ldr	r3, [pc, #228]	; (8001e00 <HAL_RCC_ClockConfig+0x1c4>)
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	f023 0203 	bic.w	r2, r3, #3
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	4936      	ldr	r1, [pc, #216]	; (8001e00 <HAL_RCC_ClockConfig+0x1c4>)
 8001d28:	4313      	orrs	r3, r2
 8001d2a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d2c:	f7ff fa22 	bl	8001174 <HAL_GetTick>
 8001d30:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d32:	e00a      	b.n	8001d4a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d34:	f7ff fa1e 	bl	8001174 <HAL_GetTick>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	1ad3      	subs	r3, r2, r3
 8001d3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d901      	bls.n	8001d4a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d46:	2303      	movs	r3, #3
 8001d48:	e053      	b.n	8001df2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d4a:	4b2d      	ldr	r3, [pc, #180]	; (8001e00 <HAL_RCC_ClockConfig+0x1c4>)
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	f003 020c 	and.w	r2, r3, #12
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	009b      	lsls	r3, r3, #2
 8001d58:	429a      	cmp	r2, r3
 8001d5a:	d1eb      	bne.n	8001d34 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d5c:	4b27      	ldr	r3, [pc, #156]	; (8001dfc <HAL_RCC_ClockConfig+0x1c0>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f003 0307 	and.w	r3, r3, #7
 8001d64:	683a      	ldr	r2, [r7, #0]
 8001d66:	429a      	cmp	r2, r3
 8001d68:	d210      	bcs.n	8001d8c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d6a:	4b24      	ldr	r3, [pc, #144]	; (8001dfc <HAL_RCC_ClockConfig+0x1c0>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f023 0207 	bic.w	r2, r3, #7
 8001d72:	4922      	ldr	r1, [pc, #136]	; (8001dfc <HAL_RCC_ClockConfig+0x1c0>)
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	4313      	orrs	r3, r2
 8001d78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d7a:	4b20      	ldr	r3, [pc, #128]	; (8001dfc <HAL_RCC_ClockConfig+0x1c0>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f003 0307 	and.w	r3, r3, #7
 8001d82:	683a      	ldr	r2, [r7, #0]
 8001d84:	429a      	cmp	r2, r3
 8001d86:	d001      	beq.n	8001d8c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	e032      	b.n	8001df2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f003 0304 	and.w	r3, r3, #4
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d008      	beq.n	8001daa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d98:	4b19      	ldr	r3, [pc, #100]	; (8001e00 <HAL_RCC_ClockConfig+0x1c4>)
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	68db      	ldr	r3, [r3, #12]
 8001da4:	4916      	ldr	r1, [pc, #88]	; (8001e00 <HAL_RCC_ClockConfig+0x1c4>)
 8001da6:	4313      	orrs	r3, r2
 8001da8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f003 0308 	and.w	r3, r3, #8
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d009      	beq.n	8001dca <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001db6:	4b12      	ldr	r3, [pc, #72]	; (8001e00 <HAL_RCC_ClockConfig+0x1c4>)
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	691b      	ldr	r3, [r3, #16]
 8001dc2:	00db      	lsls	r3, r3, #3
 8001dc4:	490e      	ldr	r1, [pc, #56]	; (8001e00 <HAL_RCC_ClockConfig+0x1c4>)
 8001dc6:	4313      	orrs	r3, r2
 8001dc8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001dca:	f000 f821 	bl	8001e10 <HAL_RCC_GetSysClockFreq>
 8001dce:	4602      	mov	r2, r0
 8001dd0:	4b0b      	ldr	r3, [pc, #44]	; (8001e00 <HAL_RCC_ClockConfig+0x1c4>)
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	091b      	lsrs	r3, r3, #4
 8001dd6:	f003 030f 	and.w	r3, r3, #15
 8001dda:	490a      	ldr	r1, [pc, #40]	; (8001e04 <HAL_RCC_ClockConfig+0x1c8>)
 8001ddc:	5ccb      	ldrb	r3, [r1, r3]
 8001dde:	fa22 f303 	lsr.w	r3, r2, r3
 8001de2:	4a09      	ldr	r2, [pc, #36]	; (8001e08 <HAL_RCC_ClockConfig+0x1cc>)
 8001de4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001de6:	4b09      	ldr	r3, [pc, #36]	; (8001e0c <HAL_RCC_ClockConfig+0x1d0>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4618      	mov	r0, r3
 8001dec:	f7ff f980 	bl	80010f0 <HAL_InitTick>

  return HAL_OK;
 8001df0:	2300      	movs	r3, #0
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	3710      	adds	r7, #16
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	40022000 	.word	0x40022000
 8001e00:	40021000 	.word	0x40021000
 8001e04:	080026b8 	.word	0x080026b8
 8001e08:	20000080 	.word	0x20000080
 8001e0c:	200000a0 	.word	0x200000a0

08001e10 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b087      	sub	sp, #28
 8001e14:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001e16:	2300      	movs	r3, #0
 8001e18:	60fb      	str	r3, [r7, #12]
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	60bb      	str	r3, [r7, #8]
 8001e1e:	2300      	movs	r3, #0
 8001e20:	617b      	str	r3, [r7, #20]
 8001e22:	2300      	movs	r3, #0
 8001e24:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001e26:	2300      	movs	r3, #0
 8001e28:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001e2a:	4b1e      	ldr	r3, [pc, #120]	; (8001ea4 <HAL_RCC_GetSysClockFreq+0x94>)
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	f003 030c 	and.w	r3, r3, #12
 8001e36:	2b04      	cmp	r3, #4
 8001e38:	d002      	beq.n	8001e40 <HAL_RCC_GetSysClockFreq+0x30>
 8001e3a:	2b08      	cmp	r3, #8
 8001e3c:	d003      	beq.n	8001e46 <HAL_RCC_GetSysClockFreq+0x36>
 8001e3e:	e027      	b.n	8001e90 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001e40:	4b19      	ldr	r3, [pc, #100]	; (8001ea8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001e42:	613b      	str	r3, [r7, #16]
      break;
 8001e44:	e027      	b.n	8001e96 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	0c9b      	lsrs	r3, r3, #18
 8001e4a:	f003 030f 	and.w	r3, r3, #15
 8001e4e:	4a17      	ldr	r2, [pc, #92]	; (8001eac <HAL_RCC_GetSysClockFreq+0x9c>)
 8001e50:	5cd3      	ldrb	r3, [r2, r3]
 8001e52:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d010      	beq.n	8001e80 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001e5e:	4b11      	ldr	r3, [pc, #68]	; (8001ea4 <HAL_RCC_GetSysClockFreq+0x94>)
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	0c5b      	lsrs	r3, r3, #17
 8001e64:	f003 0301 	and.w	r3, r3, #1
 8001e68:	4a11      	ldr	r2, [pc, #68]	; (8001eb0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001e6a:	5cd3      	ldrb	r3, [r2, r3]
 8001e6c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	4a0d      	ldr	r2, [pc, #52]	; (8001ea8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001e72:	fb02 f203 	mul.w	r2, r2, r3
 8001e76:	68bb      	ldr	r3, [r7, #8]
 8001e78:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e7c:	617b      	str	r3, [r7, #20]
 8001e7e:	e004      	b.n	8001e8a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	4a0c      	ldr	r2, [pc, #48]	; (8001eb4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001e84:	fb02 f303 	mul.w	r3, r2, r3
 8001e88:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	613b      	str	r3, [r7, #16]
      break;
 8001e8e:	e002      	b.n	8001e96 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001e90:	4b05      	ldr	r3, [pc, #20]	; (8001ea8 <HAL_RCC_GetSysClockFreq+0x98>)
 8001e92:	613b      	str	r3, [r7, #16]
      break;
 8001e94:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e96:	693b      	ldr	r3, [r7, #16]
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	371c      	adds	r7, #28
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bc80      	pop	{r7}
 8001ea0:	4770      	bx	lr
 8001ea2:	bf00      	nop
 8001ea4:	40021000 	.word	0x40021000
 8001ea8:	007a1200 	.word	0x007a1200
 8001eac:	080026c8 	.word	0x080026c8
 8001eb0:	080026d8 	.word	0x080026d8
 8001eb4:	003d0900 	.word	0x003d0900

08001eb8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b085      	sub	sp, #20
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001ec0:	4b0a      	ldr	r3, [pc, #40]	; (8001eec <RCC_Delay+0x34>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a0a      	ldr	r2, [pc, #40]	; (8001ef0 <RCC_Delay+0x38>)
 8001ec6:	fba2 2303 	umull	r2, r3, r2, r3
 8001eca:	0a5b      	lsrs	r3, r3, #9
 8001ecc:	687a      	ldr	r2, [r7, #4]
 8001ece:	fb02 f303 	mul.w	r3, r2, r3
 8001ed2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001ed4:	bf00      	nop
  }
  while (Delay --);
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	1e5a      	subs	r2, r3, #1
 8001eda:	60fa      	str	r2, [r7, #12]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d1f9      	bne.n	8001ed4 <RCC_Delay+0x1c>
}
 8001ee0:	bf00      	nop
 8001ee2:	bf00      	nop
 8001ee4:	3714      	adds	r7, #20
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bc80      	pop	{r7}
 8001eea:	4770      	bx	lr
 8001eec:	20000080 	.word	0x20000080
 8001ef0:	10624dd3 	.word	0x10624dd3

08001ef4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b082      	sub	sp, #8
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d101      	bne.n	8001f06 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
 8001f04:	e041      	b.n	8001f8a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f0c:	b2db      	uxtb	r3, r3
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d106      	bne.n	8001f20 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2200      	movs	r2, #0
 8001f16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001f1a:	6878      	ldr	r0, [r7, #4]
 8001f1c:	f7fe fdc0 	bl	8000aa0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2202      	movs	r2, #2
 8001f24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681a      	ldr	r2, [r3, #0]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	3304      	adds	r3, #4
 8001f30:	4619      	mov	r1, r3
 8001f32:	4610      	mov	r0, r2
 8001f34:	f000 fa20 	bl	8002378 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2201      	movs	r2, #1
 8001f44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2201      	movs	r2, #1
 8001f54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2201      	movs	r2, #1
 8001f64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2201      	movs	r2, #1
 8001f74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2201      	movs	r2, #1
 8001f84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001f88:	2300      	movs	r3, #0
}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	3708      	adds	r7, #8
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}

08001f92 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001f92:	b580      	push	{r7, lr}
 8001f94:	b082      	sub	sp, #8
 8001f96:	af00      	add	r7, sp, #0
 8001f98:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	691b      	ldr	r3, [r3, #16]
 8001fa0:	f003 0302 	and.w	r3, r3, #2
 8001fa4:	2b02      	cmp	r3, #2
 8001fa6:	d122      	bne.n	8001fee <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	68db      	ldr	r3, [r3, #12]
 8001fae:	f003 0302 	and.w	r3, r3, #2
 8001fb2:	2b02      	cmp	r3, #2
 8001fb4:	d11b      	bne.n	8001fee <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f06f 0202 	mvn.w	r2, #2
 8001fbe:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	699b      	ldr	r3, [r3, #24]
 8001fcc:	f003 0303 	and.w	r3, r3, #3
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d003      	beq.n	8001fdc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001fd4:	6878      	ldr	r0, [r7, #4]
 8001fd6:	f000 f9b4 	bl	8002342 <HAL_TIM_IC_CaptureCallback>
 8001fda:	e005      	b.n	8001fe8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fdc:	6878      	ldr	r0, [r7, #4]
 8001fde:	f000 f9a7 	bl	8002330 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fe2:	6878      	ldr	r0, [r7, #4]
 8001fe4:	f000 f9b6 	bl	8002354 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2200      	movs	r2, #0
 8001fec:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	691b      	ldr	r3, [r3, #16]
 8001ff4:	f003 0304 	and.w	r3, r3, #4
 8001ff8:	2b04      	cmp	r3, #4
 8001ffa:	d122      	bne.n	8002042 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	68db      	ldr	r3, [r3, #12]
 8002002:	f003 0304 	and.w	r3, r3, #4
 8002006:	2b04      	cmp	r3, #4
 8002008:	d11b      	bne.n	8002042 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f06f 0204 	mvn.w	r2, #4
 8002012:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2202      	movs	r2, #2
 8002018:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	699b      	ldr	r3, [r3, #24]
 8002020:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002024:	2b00      	cmp	r3, #0
 8002026:	d003      	beq.n	8002030 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002028:	6878      	ldr	r0, [r7, #4]
 800202a:	f000 f98a 	bl	8002342 <HAL_TIM_IC_CaptureCallback>
 800202e:	e005      	b.n	800203c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002030:	6878      	ldr	r0, [r7, #4]
 8002032:	f000 f97d 	bl	8002330 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002036:	6878      	ldr	r0, [r7, #4]
 8002038:	f000 f98c 	bl	8002354 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2200      	movs	r2, #0
 8002040:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	691b      	ldr	r3, [r3, #16]
 8002048:	f003 0308 	and.w	r3, r3, #8
 800204c:	2b08      	cmp	r3, #8
 800204e:	d122      	bne.n	8002096 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	68db      	ldr	r3, [r3, #12]
 8002056:	f003 0308 	and.w	r3, r3, #8
 800205a:	2b08      	cmp	r3, #8
 800205c:	d11b      	bne.n	8002096 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f06f 0208 	mvn.w	r2, #8
 8002066:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2204      	movs	r2, #4
 800206c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	69db      	ldr	r3, [r3, #28]
 8002074:	f003 0303 	and.w	r3, r3, #3
 8002078:	2b00      	cmp	r3, #0
 800207a:	d003      	beq.n	8002084 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800207c:	6878      	ldr	r0, [r7, #4]
 800207e:	f000 f960 	bl	8002342 <HAL_TIM_IC_CaptureCallback>
 8002082:	e005      	b.n	8002090 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002084:	6878      	ldr	r0, [r7, #4]
 8002086:	f000 f953 	bl	8002330 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800208a:	6878      	ldr	r0, [r7, #4]
 800208c:	f000 f962 	bl	8002354 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2200      	movs	r2, #0
 8002094:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	691b      	ldr	r3, [r3, #16]
 800209c:	f003 0310 	and.w	r3, r3, #16
 80020a0:	2b10      	cmp	r3, #16
 80020a2:	d122      	bne.n	80020ea <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	68db      	ldr	r3, [r3, #12]
 80020aa:	f003 0310 	and.w	r3, r3, #16
 80020ae:	2b10      	cmp	r3, #16
 80020b0:	d11b      	bne.n	80020ea <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f06f 0210 	mvn.w	r2, #16
 80020ba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2208      	movs	r2, #8
 80020c0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	69db      	ldr	r3, [r3, #28]
 80020c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d003      	beq.n	80020d8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020d0:	6878      	ldr	r0, [r7, #4]
 80020d2:	f000 f936 	bl	8002342 <HAL_TIM_IC_CaptureCallback>
 80020d6:	e005      	b.n	80020e4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020d8:	6878      	ldr	r0, [r7, #4]
 80020da:	f000 f929 	bl	8002330 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020de:	6878      	ldr	r0, [r7, #4]
 80020e0:	f000 f938 	bl	8002354 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2200      	movs	r2, #0
 80020e8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	691b      	ldr	r3, [r3, #16]
 80020f0:	f003 0301 	and.w	r3, r3, #1
 80020f4:	2b01      	cmp	r3, #1
 80020f6:	d10e      	bne.n	8002116 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	68db      	ldr	r3, [r3, #12]
 80020fe:	f003 0301 	and.w	r3, r3, #1
 8002102:	2b01      	cmp	r3, #1
 8002104:	d107      	bne.n	8002116 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f06f 0201 	mvn.w	r2, #1
 800210e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002110:	6878      	ldr	r0, [r7, #4]
 8002112:	f7fe fc29 	bl	8000968 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	691b      	ldr	r3, [r3, #16]
 800211c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002120:	2b80      	cmp	r3, #128	; 0x80
 8002122:	d10e      	bne.n	8002142 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	68db      	ldr	r3, [r3, #12]
 800212a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800212e:	2b80      	cmp	r3, #128	; 0x80
 8002130:	d107      	bne.n	8002142 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800213a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800213c:	6878      	ldr	r0, [r7, #4]
 800213e:	f000 fa7a 	bl	8002636 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	691b      	ldr	r3, [r3, #16]
 8002148:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800214c:	2b40      	cmp	r3, #64	; 0x40
 800214e:	d10e      	bne.n	800216e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	68db      	ldr	r3, [r3, #12]
 8002156:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800215a:	2b40      	cmp	r3, #64	; 0x40
 800215c:	d107      	bne.n	800216e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002166:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002168:	6878      	ldr	r0, [r7, #4]
 800216a:	f000 f8fc 	bl	8002366 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	691b      	ldr	r3, [r3, #16]
 8002174:	f003 0320 	and.w	r3, r3, #32
 8002178:	2b20      	cmp	r3, #32
 800217a:	d10e      	bne.n	800219a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	68db      	ldr	r3, [r3, #12]
 8002182:	f003 0320 	and.w	r3, r3, #32
 8002186:	2b20      	cmp	r3, #32
 8002188:	d107      	bne.n	800219a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f06f 0220 	mvn.w	r2, #32
 8002192:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002194:	6878      	ldr	r0, [r7, #4]
 8002196:	f000 fa45 	bl	8002624 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800219a:	bf00      	nop
 800219c:	3708      	adds	r7, #8
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}

080021a2 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80021a2:	b580      	push	{r7, lr}
 80021a4:	b084      	sub	sp, #16
 80021a6:	af00      	add	r7, sp, #0
 80021a8:	6078      	str	r0, [r7, #4]
 80021aa:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80021ac:	2300      	movs	r3, #0
 80021ae:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021b6:	2b01      	cmp	r3, #1
 80021b8:	d101      	bne.n	80021be <HAL_TIM_ConfigClockSource+0x1c>
 80021ba:	2302      	movs	r3, #2
 80021bc:	e0b4      	b.n	8002328 <HAL_TIM_ConfigClockSource+0x186>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2201      	movs	r2, #1
 80021c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2202      	movs	r2, #2
 80021ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	689b      	ldr	r3, [r3, #8]
 80021d4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80021d6:	68bb      	ldr	r3, [r7, #8]
 80021d8:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80021dc:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80021e4:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	68ba      	ldr	r2, [r7, #8]
 80021ec:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80021f6:	d03e      	beq.n	8002276 <HAL_TIM_ConfigClockSource+0xd4>
 80021f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80021fc:	f200 8087 	bhi.w	800230e <HAL_TIM_ConfigClockSource+0x16c>
 8002200:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002204:	f000 8086 	beq.w	8002314 <HAL_TIM_ConfigClockSource+0x172>
 8002208:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800220c:	d87f      	bhi.n	800230e <HAL_TIM_ConfigClockSource+0x16c>
 800220e:	2b70      	cmp	r3, #112	; 0x70
 8002210:	d01a      	beq.n	8002248 <HAL_TIM_ConfigClockSource+0xa6>
 8002212:	2b70      	cmp	r3, #112	; 0x70
 8002214:	d87b      	bhi.n	800230e <HAL_TIM_ConfigClockSource+0x16c>
 8002216:	2b60      	cmp	r3, #96	; 0x60
 8002218:	d050      	beq.n	80022bc <HAL_TIM_ConfigClockSource+0x11a>
 800221a:	2b60      	cmp	r3, #96	; 0x60
 800221c:	d877      	bhi.n	800230e <HAL_TIM_ConfigClockSource+0x16c>
 800221e:	2b50      	cmp	r3, #80	; 0x50
 8002220:	d03c      	beq.n	800229c <HAL_TIM_ConfigClockSource+0xfa>
 8002222:	2b50      	cmp	r3, #80	; 0x50
 8002224:	d873      	bhi.n	800230e <HAL_TIM_ConfigClockSource+0x16c>
 8002226:	2b40      	cmp	r3, #64	; 0x40
 8002228:	d058      	beq.n	80022dc <HAL_TIM_ConfigClockSource+0x13a>
 800222a:	2b40      	cmp	r3, #64	; 0x40
 800222c:	d86f      	bhi.n	800230e <HAL_TIM_ConfigClockSource+0x16c>
 800222e:	2b30      	cmp	r3, #48	; 0x30
 8002230:	d064      	beq.n	80022fc <HAL_TIM_ConfigClockSource+0x15a>
 8002232:	2b30      	cmp	r3, #48	; 0x30
 8002234:	d86b      	bhi.n	800230e <HAL_TIM_ConfigClockSource+0x16c>
 8002236:	2b20      	cmp	r3, #32
 8002238:	d060      	beq.n	80022fc <HAL_TIM_ConfigClockSource+0x15a>
 800223a:	2b20      	cmp	r3, #32
 800223c:	d867      	bhi.n	800230e <HAL_TIM_ConfigClockSource+0x16c>
 800223e:	2b00      	cmp	r3, #0
 8002240:	d05c      	beq.n	80022fc <HAL_TIM_ConfigClockSource+0x15a>
 8002242:	2b10      	cmp	r3, #16
 8002244:	d05a      	beq.n	80022fc <HAL_TIM_ConfigClockSource+0x15a>
 8002246:	e062      	b.n	800230e <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6818      	ldr	r0, [r3, #0]
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	6899      	ldr	r1, [r3, #8]
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	685a      	ldr	r2, [r3, #4]
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	68db      	ldr	r3, [r3, #12]
 8002258:	f000 f967 	bl	800252a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	689b      	ldr	r3, [r3, #8]
 8002262:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800226a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	68ba      	ldr	r2, [r7, #8]
 8002272:	609a      	str	r2, [r3, #8]
      break;
 8002274:	e04f      	b.n	8002316 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6818      	ldr	r0, [r3, #0]
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	6899      	ldr	r1, [r3, #8]
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	685a      	ldr	r2, [r3, #4]
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	68db      	ldr	r3, [r3, #12]
 8002286:	f000 f950 	bl	800252a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	689a      	ldr	r2, [r3, #8]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002298:	609a      	str	r2, [r3, #8]
      break;
 800229a:	e03c      	b.n	8002316 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6818      	ldr	r0, [r3, #0]
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	6859      	ldr	r1, [r3, #4]
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	68db      	ldr	r3, [r3, #12]
 80022a8:	461a      	mov	r2, r3
 80022aa:	f000 f8c7 	bl	800243c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	2150      	movs	r1, #80	; 0x50
 80022b4:	4618      	mov	r0, r3
 80022b6:	f000 f91e 	bl	80024f6 <TIM_ITRx_SetConfig>
      break;
 80022ba:	e02c      	b.n	8002316 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6818      	ldr	r0, [r3, #0]
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	6859      	ldr	r1, [r3, #4]
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	68db      	ldr	r3, [r3, #12]
 80022c8:	461a      	mov	r2, r3
 80022ca:	f000 f8e5 	bl	8002498 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	2160      	movs	r1, #96	; 0x60
 80022d4:	4618      	mov	r0, r3
 80022d6:	f000 f90e 	bl	80024f6 <TIM_ITRx_SetConfig>
      break;
 80022da:	e01c      	b.n	8002316 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6818      	ldr	r0, [r3, #0]
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	6859      	ldr	r1, [r3, #4]
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	68db      	ldr	r3, [r3, #12]
 80022e8:	461a      	mov	r2, r3
 80022ea:	f000 f8a7 	bl	800243c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	2140      	movs	r1, #64	; 0x40
 80022f4:	4618      	mov	r0, r3
 80022f6:	f000 f8fe 	bl	80024f6 <TIM_ITRx_SetConfig>
      break;
 80022fa:	e00c      	b.n	8002316 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681a      	ldr	r2, [r3, #0]
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4619      	mov	r1, r3
 8002306:	4610      	mov	r0, r2
 8002308:	f000 f8f5 	bl	80024f6 <TIM_ITRx_SetConfig>
      break;
 800230c:	e003      	b.n	8002316 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800230e:	2301      	movs	r3, #1
 8002310:	73fb      	strb	r3, [r7, #15]
      break;
 8002312:	e000      	b.n	8002316 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002314:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2201      	movs	r2, #1
 800231a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2200      	movs	r2, #0
 8002322:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002326:	7bfb      	ldrb	r3, [r7, #15]
}
 8002328:	4618      	mov	r0, r3
 800232a:	3710      	adds	r7, #16
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}

08002330 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002330:	b480      	push	{r7}
 8002332:	b083      	sub	sp, #12
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002338:	bf00      	nop
 800233a:	370c      	adds	r7, #12
 800233c:	46bd      	mov	sp, r7
 800233e:	bc80      	pop	{r7}
 8002340:	4770      	bx	lr

08002342 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002342:	b480      	push	{r7}
 8002344:	b083      	sub	sp, #12
 8002346:	af00      	add	r7, sp, #0
 8002348:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800234a:	bf00      	nop
 800234c:	370c      	adds	r7, #12
 800234e:	46bd      	mov	sp, r7
 8002350:	bc80      	pop	{r7}
 8002352:	4770      	bx	lr

08002354 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002354:	b480      	push	{r7}
 8002356:	b083      	sub	sp, #12
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800235c:	bf00      	nop
 800235e:	370c      	adds	r7, #12
 8002360:	46bd      	mov	sp, r7
 8002362:	bc80      	pop	{r7}
 8002364:	4770      	bx	lr

08002366 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002366:	b480      	push	{r7}
 8002368:	b083      	sub	sp, #12
 800236a:	af00      	add	r7, sp, #0
 800236c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800236e:	bf00      	nop
 8002370:	370c      	adds	r7, #12
 8002372:	46bd      	mov	sp, r7
 8002374:	bc80      	pop	{r7}
 8002376:	4770      	bx	lr

08002378 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002378:	b480      	push	{r7}
 800237a:	b085      	sub	sp, #20
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
 8002380:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	4a29      	ldr	r2, [pc, #164]	; (8002430 <TIM_Base_SetConfig+0xb8>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d00b      	beq.n	80023a8 <TIM_Base_SetConfig+0x30>
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002396:	d007      	beq.n	80023a8 <TIM_Base_SetConfig+0x30>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	4a26      	ldr	r2, [pc, #152]	; (8002434 <TIM_Base_SetConfig+0xbc>)
 800239c:	4293      	cmp	r3, r2
 800239e:	d003      	beq.n	80023a8 <TIM_Base_SetConfig+0x30>
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	4a25      	ldr	r2, [pc, #148]	; (8002438 <TIM_Base_SetConfig+0xc0>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d108      	bne.n	80023ba <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	68fa      	ldr	r2, [r7, #12]
 80023b6:	4313      	orrs	r3, r2
 80023b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	4a1c      	ldr	r2, [pc, #112]	; (8002430 <TIM_Base_SetConfig+0xb8>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d00b      	beq.n	80023da <TIM_Base_SetConfig+0x62>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023c8:	d007      	beq.n	80023da <TIM_Base_SetConfig+0x62>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	4a19      	ldr	r2, [pc, #100]	; (8002434 <TIM_Base_SetConfig+0xbc>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d003      	beq.n	80023da <TIM_Base_SetConfig+0x62>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	4a18      	ldr	r2, [pc, #96]	; (8002438 <TIM_Base_SetConfig+0xc0>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d108      	bne.n	80023ec <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	68db      	ldr	r3, [r3, #12]
 80023e6:	68fa      	ldr	r2, [r7, #12]
 80023e8:	4313      	orrs	r3, r2
 80023ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	695b      	ldr	r3, [r3, #20]
 80023f6:	4313      	orrs	r3, r2
 80023f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	68fa      	ldr	r2, [r7, #12]
 80023fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	689a      	ldr	r2, [r3, #8]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	681a      	ldr	r2, [r3, #0]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	4a07      	ldr	r2, [pc, #28]	; (8002430 <TIM_Base_SetConfig+0xb8>)
 8002414:	4293      	cmp	r3, r2
 8002416:	d103      	bne.n	8002420 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	691a      	ldr	r2, [r3, #16]
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2201      	movs	r2, #1
 8002424:	615a      	str	r2, [r3, #20]
}
 8002426:	bf00      	nop
 8002428:	3714      	adds	r7, #20
 800242a:	46bd      	mov	sp, r7
 800242c:	bc80      	pop	{r7}
 800242e:	4770      	bx	lr
 8002430:	40012c00 	.word	0x40012c00
 8002434:	40000400 	.word	0x40000400
 8002438:	40000800 	.word	0x40000800

0800243c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800243c:	b480      	push	{r7}
 800243e:	b087      	sub	sp, #28
 8002440:	af00      	add	r7, sp, #0
 8002442:	60f8      	str	r0, [r7, #12]
 8002444:	60b9      	str	r1, [r7, #8]
 8002446:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	6a1b      	ldr	r3, [r3, #32]
 800244c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	6a1b      	ldr	r3, [r3, #32]
 8002452:	f023 0201 	bic.w	r2, r3, #1
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	699b      	ldr	r3, [r3, #24]
 800245e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002460:	693b      	ldr	r3, [r7, #16]
 8002462:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002466:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	011b      	lsls	r3, r3, #4
 800246c:	693a      	ldr	r2, [r7, #16]
 800246e:	4313      	orrs	r3, r2
 8002470:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002472:	697b      	ldr	r3, [r7, #20]
 8002474:	f023 030a 	bic.w	r3, r3, #10
 8002478:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800247a:	697a      	ldr	r2, [r7, #20]
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	4313      	orrs	r3, r2
 8002480:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	693a      	ldr	r2, [r7, #16]
 8002486:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	697a      	ldr	r2, [r7, #20]
 800248c:	621a      	str	r2, [r3, #32]
}
 800248e:	bf00      	nop
 8002490:	371c      	adds	r7, #28
 8002492:	46bd      	mov	sp, r7
 8002494:	bc80      	pop	{r7}
 8002496:	4770      	bx	lr

08002498 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002498:	b480      	push	{r7}
 800249a:	b087      	sub	sp, #28
 800249c:	af00      	add	r7, sp, #0
 800249e:	60f8      	str	r0, [r7, #12]
 80024a0:	60b9      	str	r1, [r7, #8]
 80024a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	6a1b      	ldr	r3, [r3, #32]
 80024a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	6a1b      	ldr	r3, [r3, #32]
 80024ae:	f023 0210 	bic.w	r2, r3, #16
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	699b      	ldr	r3, [r3, #24]
 80024ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80024c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	031b      	lsls	r3, r3, #12
 80024c8:	693a      	ldr	r2, [r7, #16]
 80024ca:	4313      	orrs	r3, r2
 80024cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80024d4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80024d6:	68bb      	ldr	r3, [r7, #8]
 80024d8:	011b      	lsls	r3, r3, #4
 80024da:	697a      	ldr	r2, [r7, #20]
 80024dc:	4313      	orrs	r3, r2
 80024de:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	693a      	ldr	r2, [r7, #16]
 80024e4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	697a      	ldr	r2, [r7, #20]
 80024ea:	621a      	str	r2, [r3, #32]
}
 80024ec:	bf00      	nop
 80024ee:	371c      	adds	r7, #28
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bc80      	pop	{r7}
 80024f4:	4770      	bx	lr

080024f6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80024f6:	b480      	push	{r7}
 80024f8:	b085      	sub	sp, #20
 80024fa:	af00      	add	r7, sp, #0
 80024fc:	6078      	str	r0, [r7, #4]
 80024fe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800250c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800250e:	683a      	ldr	r2, [r7, #0]
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	4313      	orrs	r3, r2
 8002514:	f043 0307 	orr.w	r3, r3, #7
 8002518:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	68fa      	ldr	r2, [r7, #12]
 800251e:	609a      	str	r2, [r3, #8]
}
 8002520:	bf00      	nop
 8002522:	3714      	adds	r7, #20
 8002524:	46bd      	mov	sp, r7
 8002526:	bc80      	pop	{r7}
 8002528:	4770      	bx	lr

0800252a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800252a:	b480      	push	{r7}
 800252c:	b087      	sub	sp, #28
 800252e:	af00      	add	r7, sp, #0
 8002530:	60f8      	str	r0, [r7, #12]
 8002532:	60b9      	str	r1, [r7, #8]
 8002534:	607a      	str	r2, [r7, #4]
 8002536:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	689b      	ldr	r3, [r3, #8]
 800253c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002544:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	021a      	lsls	r2, r3, #8
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	431a      	orrs	r2, r3
 800254e:	68bb      	ldr	r3, [r7, #8]
 8002550:	4313      	orrs	r3, r2
 8002552:	697a      	ldr	r2, [r7, #20]
 8002554:	4313      	orrs	r3, r2
 8002556:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	697a      	ldr	r2, [r7, #20]
 800255c:	609a      	str	r2, [r3, #8]
}
 800255e:	bf00      	nop
 8002560:	371c      	adds	r7, #28
 8002562:	46bd      	mov	sp, r7
 8002564:	bc80      	pop	{r7}
 8002566:	4770      	bx	lr

08002568 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002568:	b480      	push	{r7}
 800256a:	b085      	sub	sp, #20
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
 8002570:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002578:	2b01      	cmp	r3, #1
 800257a:	d101      	bne.n	8002580 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800257c:	2302      	movs	r3, #2
 800257e:	e046      	b.n	800260e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2201      	movs	r2, #1
 8002584:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2202      	movs	r2, #2
 800258c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	689b      	ldr	r3, [r3, #8]
 800259e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	68fa      	ldr	r2, [r7, #12]
 80025ae:	4313      	orrs	r3, r2
 80025b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	68fa      	ldr	r2, [r7, #12]
 80025b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4a16      	ldr	r2, [pc, #88]	; (8002618 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d00e      	beq.n	80025e2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025cc:	d009      	beq.n	80025e2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a12      	ldr	r2, [pc, #72]	; (800261c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d004      	beq.n	80025e2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a10      	ldr	r2, [pc, #64]	; (8002620 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d10c      	bne.n	80025fc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80025e8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	68ba      	ldr	r2, [r7, #8]
 80025f0:	4313      	orrs	r3, r2
 80025f2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	68ba      	ldr	r2, [r7, #8]
 80025fa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2201      	movs	r2, #1
 8002600:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2200      	movs	r2, #0
 8002608:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800260c:	2300      	movs	r3, #0
}
 800260e:	4618      	mov	r0, r3
 8002610:	3714      	adds	r7, #20
 8002612:	46bd      	mov	sp, r7
 8002614:	bc80      	pop	{r7}
 8002616:	4770      	bx	lr
 8002618:	40012c00 	.word	0x40012c00
 800261c:	40000400 	.word	0x40000400
 8002620:	40000800 	.word	0x40000800

08002624 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002624:	b480      	push	{r7}
 8002626:	b083      	sub	sp, #12
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800262c:	bf00      	nop
 800262e:	370c      	adds	r7, #12
 8002630:	46bd      	mov	sp, r7
 8002632:	bc80      	pop	{r7}
 8002634:	4770      	bx	lr

08002636 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002636:	b480      	push	{r7}
 8002638:	b083      	sub	sp, #12
 800263a:	af00      	add	r7, sp, #0
 800263c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800263e:	bf00      	nop
 8002640:	370c      	adds	r7, #12
 8002642:	46bd      	mov	sp, r7
 8002644:	bc80      	pop	{r7}
 8002646:	4770      	bx	lr

08002648 <__libc_init_array>:
 8002648:	b570      	push	{r4, r5, r6, lr}
 800264a:	2600      	movs	r6, #0
 800264c:	4d0c      	ldr	r5, [pc, #48]	; (8002680 <__libc_init_array+0x38>)
 800264e:	4c0d      	ldr	r4, [pc, #52]	; (8002684 <__libc_init_array+0x3c>)
 8002650:	1b64      	subs	r4, r4, r5
 8002652:	10a4      	asrs	r4, r4, #2
 8002654:	42a6      	cmp	r6, r4
 8002656:	d109      	bne.n	800266c <__libc_init_array+0x24>
 8002658:	f000 f822 	bl	80026a0 <_init>
 800265c:	2600      	movs	r6, #0
 800265e:	4d0a      	ldr	r5, [pc, #40]	; (8002688 <__libc_init_array+0x40>)
 8002660:	4c0a      	ldr	r4, [pc, #40]	; (800268c <__libc_init_array+0x44>)
 8002662:	1b64      	subs	r4, r4, r5
 8002664:	10a4      	asrs	r4, r4, #2
 8002666:	42a6      	cmp	r6, r4
 8002668:	d105      	bne.n	8002676 <__libc_init_array+0x2e>
 800266a:	bd70      	pop	{r4, r5, r6, pc}
 800266c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002670:	4798      	blx	r3
 8002672:	3601      	adds	r6, #1
 8002674:	e7ee      	b.n	8002654 <__libc_init_array+0xc>
 8002676:	f855 3b04 	ldr.w	r3, [r5], #4
 800267a:	4798      	blx	r3
 800267c:	3601      	adds	r6, #1
 800267e:	e7f2      	b.n	8002666 <__libc_init_array+0x1e>
 8002680:	080026dc 	.word	0x080026dc
 8002684:	080026dc 	.word	0x080026dc
 8002688:	080026dc 	.word	0x080026dc
 800268c:	080026e0 	.word	0x080026e0

08002690 <memset>:
 8002690:	4603      	mov	r3, r0
 8002692:	4402      	add	r2, r0
 8002694:	4293      	cmp	r3, r2
 8002696:	d100      	bne.n	800269a <memset+0xa>
 8002698:	4770      	bx	lr
 800269a:	f803 1b01 	strb.w	r1, [r3], #1
 800269e:	e7f9      	b.n	8002694 <memset+0x4>

080026a0 <_init>:
 80026a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026a2:	bf00      	nop
 80026a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026a6:	bc08      	pop	{r3}
 80026a8:	469e      	mov	lr, r3
 80026aa:	4770      	bx	lr

080026ac <_fini>:
 80026ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026ae:	bf00      	nop
 80026b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80026b2:	bc08      	pop	{r3}
 80026b4:	469e      	mov	lr, r3
 80026b6:	4770      	bx	lr
