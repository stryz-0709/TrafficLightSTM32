
TrafficLightSimu.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002840  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  0800294c  0800294c  0001294c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002970  08002970  000200c8  2**0
                  CONTENTS
  4 .ARM          00000000  08002970  08002970  000200c8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002970  08002970  000200c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002970  08002970  00012970  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002974  08002974  00012974  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c8  20000000  08002978  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ac  200000c8  08002a40  000200c8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000174  08002a40  00020174  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200f1  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000855c  00000000  00000000  00020134  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001b66  00000000  00000000  00028690  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a60  00000000  00000000  0002a1f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000007d7  00000000  00000000  0002ac58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016cfd  00000000  00000000  0002b42f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000bbe7  00000000  00000000  0004212c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00082317  00000000  00000000  0004dd13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000028ec  00000000  00000000  000d002c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  000d2918  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000c8 	.word	0x200000c8
 8000128:	00000000 	.word	0x00000000
 800012c:	08002934 	.word	0x08002934

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000cc 	.word	0x200000cc
 8000148:	08002934 	.word	0x08002934

0800014c <isButtonPressed>:
int KeyReg1 [4] = {NORMAL_STATE, NORMAL_STATE, NORMAL_STATE, NORMAL_STATE};
int KeyReg2 [4] = {NORMAL_STATE, NORMAL_STATE, NORMAL_STATE, NORMAL_STATE};
int KeyReg3 [4] = {NORMAL_STATE, NORMAL_STATE, NORMAL_STATE, NORMAL_STATE};
int TimerForKeyPress [4] = {500, 500, 500, 500};

int isButtonPressed(int btn){
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	if (btn_flag[btn] == 1){
 8000154:	4a09      	ldr	r2, [pc, #36]	; (800017c <isButtonPressed+0x30>)
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800015c:	2b01      	cmp	r3, #1
 800015e:	d106      	bne.n	800016e <isButtonPressed+0x22>
		btn_flag[btn] = 0;
 8000160:	4a06      	ldr	r2, [pc, #24]	; (800017c <isButtonPressed+0x30>)
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	2100      	movs	r1, #0
 8000166:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 800016a:	2301      	movs	r3, #1
 800016c:	e000      	b.n	8000170 <isButtonPressed+0x24>
	}
	return 0;
 800016e:	2300      	movs	r3, #0
}
 8000170:	4618      	mov	r0, r3
 8000172:	370c      	adds	r7, #12
 8000174:	46bd      	mov	sp, r7
 8000176:	bc80      	pop	{r7}
 8000178:	4770      	bx	lr
 800017a:	bf00      	nop
 800017c:	200000e4 	.word	0x200000e4

08000180 <subKeyProcess>:

void subKeyProcess(int btn){
 8000180:	b480      	push	{r7}
 8000182:	b083      	sub	sp, #12
 8000184:	af00      	add	r7, sp, #0
 8000186:	6078      	str	r0, [r7, #4]
	btn_flag[btn] = 1;
 8000188:	4a04      	ldr	r2, [pc, #16]	; (800019c <subKeyProcess+0x1c>)
 800018a:	687b      	ldr	r3, [r7, #4]
 800018c:	2101      	movs	r1, #1
 800018e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000192:	bf00      	nop
 8000194:	370c      	adds	r7, #12
 8000196:	46bd      	mov	sp, r7
 8000198:	bc80      	pop	{r7}
 800019a:	4770      	bx	lr
 800019c:	200000e4 	.word	0x200000e4

080001a0 <getKeyInput>:


void getKeyInput(int btn){
 80001a0:	b580      	push	{r7, lr}
 80001a2:	b082      	sub	sp, #8
 80001a4:	af00      	add	r7, sp, #0
 80001a6:	6078      	str	r0, [r7, #4]
	KeyReg0[btn] = KeyReg1[btn];
 80001a8:	4a37      	ldr	r2, [pc, #220]	; (8000288 <getKeyInput+0xe8>)
 80001aa:	687b      	ldr	r3, [r7, #4]
 80001ac:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001b0:	4936      	ldr	r1, [pc, #216]	; (800028c <getKeyInput+0xec>)
 80001b2:	687b      	ldr	r3, [r7, #4]
 80001b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	KeyReg1[btn] = KeyReg2[btn];
 80001b8:	4a35      	ldr	r2, [pc, #212]	; (8000290 <getKeyInput+0xf0>)
 80001ba:	687b      	ldr	r3, [r7, #4]
 80001bc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001c0:	4931      	ldr	r1, [pc, #196]	; (8000288 <getKeyInput+0xe8>)
 80001c2:	687b      	ldr	r3, [r7, #4]
 80001c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	KeyReg2[btn] = HAL_GPIO_ReadPin(BTN_PORT[btn], BTN_PIN[btn]);
 80001c8:	4a32      	ldr	r2, [pc, #200]	; (8000294 <getKeyInput+0xf4>)
 80001ca:	687b      	ldr	r3, [r7, #4]
 80001cc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001d0:	4931      	ldr	r1, [pc, #196]	; (8000298 <getKeyInput+0xf8>)
 80001d2:	687b      	ldr	r3, [r7, #4]
 80001d4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80001d8:	4619      	mov	r1, r3
 80001da:	4610      	mov	r0, r2
 80001dc:	f001 fb70 	bl	80018c0 <HAL_GPIO_ReadPin>
 80001e0:	4603      	mov	r3, r0
 80001e2:	4619      	mov	r1, r3
 80001e4:	4a2a      	ldr	r2, [pc, #168]	; (8000290 <getKeyInput+0xf0>)
 80001e6:	687b      	ldr	r3, [r7, #4]
 80001e8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	if ((KeyReg0[btn] == KeyReg1[btn]) && (KeyReg1[btn] == KeyReg2[btn])){
 80001ec:	4a27      	ldr	r2, [pc, #156]	; (800028c <getKeyInput+0xec>)
 80001ee:	687b      	ldr	r3, [r7, #4]
 80001f0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001f4:	4924      	ldr	r1, [pc, #144]	; (8000288 <getKeyInput+0xe8>)
 80001f6:	687b      	ldr	r3, [r7, #4]
 80001f8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80001fc:	429a      	cmp	r2, r3
 80001fe:	d13f      	bne.n	8000280 <getKeyInput+0xe0>
 8000200:	4a21      	ldr	r2, [pc, #132]	; (8000288 <getKeyInput+0xe8>)
 8000202:	687b      	ldr	r3, [r7, #4]
 8000204:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000208:	4921      	ldr	r1, [pc, #132]	; (8000290 <getKeyInput+0xf0>)
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000210:	429a      	cmp	r2, r3
 8000212:	d135      	bne.n	8000280 <getKeyInput+0xe0>
		if (KeyReg3[btn] != KeyReg2[btn]){
 8000214:	4a21      	ldr	r2, [pc, #132]	; (800029c <getKeyInput+0xfc>)
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800021c:	491c      	ldr	r1, [pc, #112]	; (8000290 <getKeyInput+0xf0>)
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000224:	429a      	cmp	r2, r3
 8000226:	d017      	beq.n	8000258 <getKeyInput+0xb8>
			KeyReg3[btn] = KeyReg2[btn];
 8000228:	4a19      	ldr	r2, [pc, #100]	; (8000290 <getKeyInput+0xf0>)
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000230:	491a      	ldr	r1, [pc, #104]	; (800029c <getKeyInput+0xfc>)
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if (KeyReg2[btn] == PRESSED_STATE){
 8000238:	4a15      	ldr	r2, [pc, #84]	; (8000290 <getKeyInput+0xf0>)
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000240:	2b00      	cmp	r3, #0
 8000242:	d11d      	bne.n	8000280 <getKeyInput+0xe0>
				subKeyProcess(btn);
 8000244:	6878      	ldr	r0, [r7, #4]
 8000246:	f7ff ff9b 	bl	8000180 <subKeyProcess>
				TimerForKeyPress[btn] = 500;
 800024a:	4a15      	ldr	r2, [pc, #84]	; (80002a0 <getKeyInput+0x100>)
 800024c:	687b      	ldr	r3, [r7, #4]
 800024e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000252:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			if (TimerForKeyPress[btn] <= 0){
				KeyReg3[btn] = NORMAL_STATE;
			}
		}
	}
}
 8000256:	e013      	b.n	8000280 <getKeyInput+0xe0>
			TimerForKeyPress[btn]--;
 8000258:	4a11      	ldr	r2, [pc, #68]	; (80002a0 <getKeyInput+0x100>)
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000260:	1e5a      	subs	r2, r3, #1
 8000262:	490f      	ldr	r1, [pc, #60]	; (80002a0 <getKeyInput+0x100>)
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if (TimerForKeyPress[btn] <= 0){
 800026a:	4a0d      	ldr	r2, [pc, #52]	; (80002a0 <getKeyInput+0x100>)
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000272:	2b00      	cmp	r3, #0
 8000274:	dc04      	bgt.n	8000280 <getKeyInput+0xe0>
				KeyReg3[btn] = NORMAL_STATE;
 8000276:	4a09      	ldr	r2, [pc, #36]	; (800029c <getKeyInput+0xfc>)
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	2101      	movs	r1, #1
 800027c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000280:	bf00      	nop
 8000282:	3708      	adds	r7, #8
 8000284:	46bd      	mov	sp, r7
 8000286:	bd80      	pop	{r7, pc}
 8000288:	20000028 	.word	0x20000028
 800028c:	20000018 	.word	0x20000018
 8000290:	20000038 	.word	0x20000038
 8000294:	20000000 	.word	0x20000000
 8000298:	20000010 	.word	0x20000010
 800029c:	20000048 	.word	0x20000048
 80002a0:	20000058 	.word	0x20000058

080002a4 <initDuration>:
#include "fsm_auto.h"

int initMode[2] = {RED, GREEN};


int initDuration(int lane){
 80002a4:	b480      	push	{r7}
 80002a6:	b083      	sub	sp, #12
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	6078      	str	r0, [r7, #4]
	return (lane == 1)? GREEN_DURATION : RED_DURATION;
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	2b01      	cmp	r3, #1
 80002b0:	d102      	bne.n	80002b8 <initDuration+0x14>
 80002b2:	4b05      	ldr	r3, [pc, #20]	; (80002c8 <initDuration+0x24>)
 80002b4:	681b      	ldr	r3, [r3, #0]
 80002b6:	e001      	b.n	80002bc <initDuration+0x18>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <initDuration+0x28>)
 80002ba:	681b      	ldr	r3, [r3, #0]
}
 80002bc:	4618      	mov	r0, r3
 80002be:	370c      	adds	r7, #12
 80002c0:	46bd      	mov	sp, r7
 80002c2:	bc80      	pop	{r7}
 80002c4:	4770      	bx	lr
 80002c6:	bf00      	nop
 80002c8:	200000ac 	.word	0x200000ac
 80002cc:	200000a4 	.word	0x200000a4

080002d0 <fsm_auto_run>:

void fsm_auto_run(int lane){
 80002d0:	b580      	push	{r7, lr}
 80002d2:	b082      	sub	sp, #8
 80002d4:	af00      	add	r7, sp, #0
 80002d6:	6078      	str	r0, [r7, #4]
	switch(LED_MODE[lane]){
 80002d8:	4a59      	ldr	r2, [pc, #356]	; (8000440 <fsm_auto_run+0x170>)
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002e0:	3b01      	subs	r3, #1
 80002e2:	2b16      	cmp	r3, #22
 80002e4:	f200 80a1 	bhi.w	800042a <fsm_auto_run+0x15a>
 80002e8:	a201      	add	r2, pc, #4	; (adr r2, 80002f0 <fsm_auto_run+0x20>)
 80002ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002ee:	bf00      	nop
 80002f0:	0800034d 	.word	0x0800034d
 80002f4:	0800042b 	.word	0x0800042b
 80002f8:	0800042b 	.word	0x0800042b
 80002fc:	0800042b 	.word	0x0800042b
 8000300:	0800042b 	.word	0x0800042b
 8000304:	0800042b 	.word	0x0800042b
 8000308:	0800042b 	.word	0x0800042b
 800030c:	0800042b 	.word	0x0800042b
 8000310:	0800042b 	.word	0x0800042b
 8000314:	0800042b 	.word	0x0800042b
 8000318:	0800042b 	.word	0x0800042b
 800031c:	0800042b 	.word	0x0800042b
 8000320:	0800042b 	.word	0x0800042b
 8000324:	0800042b 	.word	0x0800042b
 8000328:	0800042b 	.word	0x0800042b
 800032c:	0800042b 	.word	0x0800042b
 8000330:	0800042b 	.word	0x0800042b
 8000334:	0800042b 	.word	0x0800042b
 8000338:	0800042b 	.word	0x0800042b
 800033c:	0800042b 	.word	0x0800042b
 8000340:	0800037d 	.word	0x0800037d
 8000344:	080003f1 	.word	0x080003f1
 8000348:	080003b7 	.word	0x080003b7
		case INIT:
			setTrafficLight(lane, OFF);
 800034c:	210c      	movs	r1, #12
 800034e:	6878      	ldr	r0, [r7, #4]
 8000350:	f000 fcac 	bl	8000cac <setTrafficLight>

			LED_MODE[lane] = initMode[lane];
 8000354:	4a3b      	ldr	r2, [pc, #236]	; (8000444 <fsm_auto_run+0x174>)
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800035c:	4938      	ldr	r1, [pc, #224]	; (8000440 <fsm_auto_run+0x170>)
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			setTimer(lane, initDuration(lane)*100);
 8000364:	6878      	ldr	r0, [r7, #4]
 8000366:	f7ff ff9d 	bl	80002a4 <initDuration>
 800036a:	4603      	mov	r3, r0
 800036c:	2264      	movs	r2, #100	; 0x64
 800036e:	fb02 f303 	mul.w	r3, r2, r3
 8000372:	4619      	mov	r1, r3
 8000374:	6878      	ldr	r0, [r7, #4]
 8000376:	f000 fbcb 	bl	8000b10 <setTimer>

			break;
 800037a:	e05d      	b.n	8000438 <fsm_auto_run+0x168>
		case RED:
			setTrafficLight(lane, RED);
 800037c:	2115      	movs	r1, #21
 800037e:	6878      	ldr	r0, [r7, #4]
 8000380:	f000 fc94 	bl	8000cac <setTrafficLight>

			if(timer_flag[lane] && TRAFFIC_MODE != MANUAL){
 8000384:	4a30      	ldr	r2, [pc, #192]	; (8000448 <fsm_auto_run+0x178>)
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800038c:	2b00      	cmp	r3, #0
 800038e:	d04e      	beq.n	800042e <fsm_auto_run+0x15e>
 8000390:	4b2e      	ldr	r3, [pc, #184]	; (800044c <fsm_auto_run+0x17c>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	2b0d      	cmp	r3, #13
 8000396:	d04a      	beq.n	800042e <fsm_auto_run+0x15e>
				LED_MODE[lane] = GREEN;
 8000398:	4a29      	ldr	r2, [pc, #164]	; (8000440 <fsm_auto_run+0x170>)
 800039a:	687b      	ldr	r3, [r7, #4]
 800039c:	2117      	movs	r1, #23
 800039e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				setTimer(lane, GREEN_DURATION*100);
 80003a2:	4b2b      	ldr	r3, [pc, #172]	; (8000450 <fsm_auto_run+0x180>)
 80003a4:	681b      	ldr	r3, [r3, #0]
 80003a6:	2264      	movs	r2, #100	; 0x64
 80003a8:	fb02 f303 	mul.w	r3, r2, r3
 80003ac:	4619      	mov	r1, r3
 80003ae:	6878      	ldr	r0, [r7, #4]
 80003b0:	f000 fbae 	bl	8000b10 <setTimer>
			}

			break;
 80003b4:	e03b      	b.n	800042e <fsm_auto_run+0x15e>
		case GREEN:
			setTrafficLight(lane, GREEN);
 80003b6:	2117      	movs	r1, #23
 80003b8:	6878      	ldr	r0, [r7, #4]
 80003ba:	f000 fc77 	bl	8000cac <setTrafficLight>

			if(timer_flag[lane] && TRAFFIC_MODE != MANUAL){
 80003be:	4a22      	ldr	r2, [pc, #136]	; (8000448 <fsm_auto_run+0x178>)
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d033      	beq.n	8000432 <fsm_auto_run+0x162>
 80003ca:	4b20      	ldr	r3, [pc, #128]	; (800044c <fsm_auto_run+0x17c>)
 80003cc:	681b      	ldr	r3, [r3, #0]
 80003ce:	2b0d      	cmp	r3, #13
 80003d0:	d02f      	beq.n	8000432 <fsm_auto_run+0x162>
				LED_MODE[lane] = AMBER;
 80003d2:	4a1b      	ldr	r2, [pc, #108]	; (8000440 <fsm_auto_run+0x170>)
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	2116      	movs	r1, #22
 80003d8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				setTimer(lane, AMBER_DURATION*100);
 80003dc:	4b1d      	ldr	r3, [pc, #116]	; (8000454 <fsm_auto_run+0x184>)
 80003de:	681b      	ldr	r3, [r3, #0]
 80003e0:	2264      	movs	r2, #100	; 0x64
 80003e2:	fb02 f303 	mul.w	r3, r2, r3
 80003e6:	4619      	mov	r1, r3
 80003e8:	6878      	ldr	r0, [r7, #4]
 80003ea:	f000 fb91 	bl	8000b10 <setTimer>
			}

			break;
 80003ee:	e020      	b.n	8000432 <fsm_auto_run+0x162>
		case AMBER:
			setTrafficLight(lane, AMBER);
 80003f0:	2116      	movs	r1, #22
 80003f2:	6878      	ldr	r0, [r7, #4]
 80003f4:	f000 fc5a 	bl	8000cac <setTrafficLight>

			if(timer_flag[lane] && TRAFFIC_MODE != MANUAL){
 80003f8:	4a13      	ldr	r2, [pc, #76]	; (8000448 <fsm_auto_run+0x178>)
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000400:	2b00      	cmp	r3, #0
 8000402:	d018      	beq.n	8000436 <fsm_auto_run+0x166>
 8000404:	4b11      	ldr	r3, [pc, #68]	; (800044c <fsm_auto_run+0x17c>)
 8000406:	681b      	ldr	r3, [r3, #0]
 8000408:	2b0d      	cmp	r3, #13
 800040a:	d014      	beq.n	8000436 <fsm_auto_run+0x166>
				LED_MODE[lane] = RED;
 800040c:	4a0c      	ldr	r2, [pc, #48]	; (8000440 <fsm_auto_run+0x170>)
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	2115      	movs	r1, #21
 8000412:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				setTimer(lane, RED_DURATION*100);
 8000416:	4b10      	ldr	r3, [pc, #64]	; (8000458 <fsm_auto_run+0x188>)
 8000418:	681b      	ldr	r3, [r3, #0]
 800041a:	2264      	movs	r2, #100	; 0x64
 800041c:	fb02 f303 	mul.w	r3, r2, r3
 8000420:	4619      	mov	r1, r3
 8000422:	6878      	ldr	r0, [r7, #4]
 8000424:	f000 fb74 	bl	8000b10 <setTimer>
			}
			break;
 8000428:	e005      	b.n	8000436 <fsm_auto_run+0x166>
		default:
			break;
 800042a:	bf00      	nop
 800042c:	e004      	b.n	8000438 <fsm_auto_run+0x168>
			break;
 800042e:	bf00      	nop
 8000430:	e002      	b.n	8000438 <fsm_auto_run+0x168>
			break;
 8000432:	bf00      	nop
 8000434:	e000      	b.n	8000438 <fsm_auto_run+0x168>
			break;
 8000436:	bf00      	nop
	}
}
 8000438:	bf00      	nop
 800043a:	3708      	adds	r7, #8
 800043c:	46bd      	mov	sp, r7
 800043e:	bd80      	pop	{r7, pc}
 8000440:	20000098 	.word	0x20000098
 8000444:	20000068 	.word	0x20000068
 8000448:	20000158 	.word	0x20000158
 800044c:	200000a0 	.word	0x200000a0
 8000450:	200000ac 	.word	0x200000ac
 8000454:	200000a8 	.word	0x200000a8
 8000458:	200000a4 	.word	0x200000a4

0800045c <manualPlus>:
int tempDuration = 0;

int LIGHT[8] = {RED, RED, GREEN, AMBER, GREEN, AMBER, RED, RED};
int manualMode[2] = {0, 4};

void manualPlus(int lane){
 800045c:	b480      	push	{r7}
 800045e:	b083      	sub	sp, #12
 8000460:	af00      	add	r7, sp, #0
 8000462:	6078      	str	r0, [r7, #4]
	manualMode[lane] += 1;
 8000464:	4a13      	ldr	r2, [pc, #76]	; (80004b4 <manualPlus+0x58>)
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800046c:	1c5a      	adds	r2, r3, #1
 800046e:	4911      	ldr	r1, [pc, #68]	; (80004b4 <manualPlus+0x58>)
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	if (manualMode[lane] > (lane+1)*4-1) manualMode[lane] = lane*4;
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	3301      	adds	r3, #1
 800047a:	009a      	lsls	r2, r3, #2
 800047c:	490d      	ldr	r1, [pc, #52]	; (80004b4 <manualPlus+0x58>)
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000484:	429a      	cmp	r2, r3
 8000486:	dc05      	bgt.n	8000494 <manualPlus+0x38>
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	009a      	lsls	r2, r3, #2
 800048c:	4909      	ldr	r1, [pc, #36]	; (80004b4 <manualPlus+0x58>)
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	LED_MODE[lane] = LIGHT[manualMode[lane]];
 8000494:	4a07      	ldr	r2, [pc, #28]	; (80004b4 <manualPlus+0x58>)
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800049c:	4a06      	ldr	r2, [pc, #24]	; (80004b8 <manualPlus+0x5c>)
 800049e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80004a2:	4906      	ldr	r1, [pc, #24]	; (80004bc <manualPlus+0x60>)
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80004aa:	bf00      	nop
 80004ac:	370c      	adds	r7, #12
 80004ae:	46bd      	mov	sp, r7
 80004b0:	bc80      	pop	{r7}
 80004b2:	4770      	bx	lr
 80004b4:	20000090 	.word	0x20000090
 80004b8:	20000070 	.word	0x20000070
 80004bc:	20000098 	.word	0x20000098

080004c0 <manualMinus>:

void manualMinus(int lane){
 80004c0:	b480      	push	{r7}
 80004c2:	b083      	sub	sp, #12
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
	manualMode[lane] -= 1;
 80004c8:	4a14      	ldr	r2, [pc, #80]	; (800051c <manualMinus+0x5c>)
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80004d0:	1e5a      	subs	r2, r3, #1
 80004d2:	4912      	ldr	r1, [pc, #72]	; (800051c <manualMinus+0x5c>)
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	if (manualMode[lane] < lane*4) manualMode[lane] = (lane+1)*4-1;
 80004da:	4a10      	ldr	r2, [pc, #64]	; (800051c <manualMinus+0x5c>)
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	009b      	lsls	r3, r3, #2
 80004e6:	429a      	cmp	r2, r3
 80004e8:	da07      	bge.n	80004fa <manualMinus+0x3a>
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	3301      	adds	r3, #1
 80004ee:	009b      	lsls	r3, r3, #2
 80004f0:	1e5a      	subs	r2, r3, #1
 80004f2:	490a      	ldr	r1, [pc, #40]	; (800051c <manualMinus+0x5c>)
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	LED_MODE[lane] = LIGHT[manualMode[lane]];
 80004fa:	4a08      	ldr	r2, [pc, #32]	; (800051c <manualMinus+0x5c>)
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000502:	4a07      	ldr	r2, [pc, #28]	; (8000520 <manualMinus+0x60>)
 8000504:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000508:	4906      	ldr	r1, [pc, #24]	; (8000524 <manualMinus+0x64>)
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000510:	bf00      	nop
 8000512:	370c      	adds	r7, #12
 8000514:	46bd      	mov	sp, r7
 8000516:	bc80      	pop	{r7}
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop
 800051c:	20000090 	.word	0x20000090
 8000520:	20000070 	.word	0x20000070
 8000524:	20000098 	.word	0x20000098

08000528 <changeMode>:

//Change mode
void changeMode(int mode, int duration, int ledMode){
 8000528:	b580      	push	{r7, lr}
 800052a:	b084      	sub	sp, #16
 800052c:	af00      	add	r7, sp, #0
 800052e:	60f8      	str	r0, [r7, #12]
 8000530:	60b9      	str	r1, [r7, #8]
 8000532:	607a      	str	r2, [r7, #4]
	//Display duration
	tempDuration = duration;
 8000534:	4a0f      	ldr	r2, [pc, #60]	; (8000574 <changeMode+0x4c>)
 8000536:	68bb      	ldr	r3, [r7, #8]
 8000538:	6013      	str	r3, [r2, #0]

	//Change traffic lights to toggle the right color
	LED_MODE[0] = ledMode;
 800053a:	4a0f      	ldr	r2, [pc, #60]	; (8000578 <changeMode+0x50>)
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	6013      	str	r3, [r2, #0]
	LED_MODE[1] = ledMode;
 8000540:	4a0d      	ldr	r2, [pc, #52]	; (8000578 <changeMode+0x50>)
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	6053      	str	r3, [r2, #4]

	//Change ped light mode
	LED_MODE[2] = ledMode;
 8000546:	4a0c      	ldr	r2, [pc, #48]	; (8000578 <changeMode+0x50>)
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	6093      	str	r3, [r2, #8]

	//Turn off all lights
	setTrafficLight(0, OFF);
 800054c:	210c      	movs	r1, #12
 800054e:	2000      	movs	r0, #0
 8000550:	f000 fbac 	bl	8000cac <setTrafficLight>
	setTrafficLight(1, OFF);
 8000554:	210c      	movs	r1, #12
 8000556:	2001      	movs	r0, #1
 8000558:	f000 fba8 	bl	8000cac <setTrafficLight>

	//Update mode
	TRAFFIC_MODE = mode;
 800055c:	4a07      	ldr	r2, [pc, #28]	; (800057c <changeMode+0x54>)
 800055e:	68fb      	ldr	r3, [r7, #12]
 8000560:	6013      	str	r3, [r2, #0]

	//Set timer to toggle lights
	setTimer(3, 25);
 8000562:	2119      	movs	r1, #25
 8000564:	2003      	movs	r0, #3
 8000566:	f000 fad3 	bl	8000b10 <setTimer>
}
 800056a:	bf00      	nop
 800056c:	3710      	adds	r7, #16
 800056e:	46bd      	mov	sp, r7
 8000570:	bd80      	pop	{r7, pc}
 8000572:	bf00      	nop
 8000574:	200000f4 	.word	0x200000f4
 8000578:	20000098 	.word	0x20000098
 800057c:	200000a0 	.word	0x200000a0

08000580 <changeDuration>:


//Increment duration
void changeDuration(int mode){
 8000580:	b580      	push	{r7, lr}
 8000582:	b082      	sub	sp, #8
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
	tempDuration++;
 8000588:	4b0a      	ldr	r3, [pc, #40]	; (80005b4 <changeDuration+0x34>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	3301      	adds	r3, #1
 800058e:	4a09      	ldr	r2, [pc, #36]	; (80005b4 <changeDuration+0x34>)
 8000590:	6013      	str	r3, [r2, #0]
	if (tempDuration == 10) tempDuration = 1;
 8000592:	4b08      	ldr	r3, [pc, #32]	; (80005b4 <changeDuration+0x34>)
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	2b0a      	cmp	r3, #10
 8000598:	d102      	bne.n	80005a0 <changeDuration+0x20>
 800059a:	4b06      	ldr	r3, [pc, #24]	; (80005b4 <changeDuration+0x34>)
 800059c:	2201      	movs	r2, #1
 800059e:	601a      	str	r2, [r3, #0]

	//Display duration
	display7SEG(tempDuration);
 80005a0:	4b04      	ldr	r3, [pc, #16]	; (80005b4 <changeDuration+0x34>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	4618      	mov	r0, r3
 80005a6:	f000 fc95 	bl	8000ed4 <display7SEG>
}
 80005aa:	bf00      	nop
 80005ac:	3708      	adds	r7, #8
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	bf00      	nop
 80005b4:	200000f4 	.word	0x200000f4

080005b8 <toggle>:


//Toggle Lights
void toggle(int mode){
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b082      	sub	sp, #8
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
	toggleLight(0, mode);
 80005c0:	6879      	ldr	r1, [r7, #4]
 80005c2:	2000      	movs	r0, #0
 80005c4:	f000 fc16 	bl	8000df4 <toggleLight>
	toggleLight(1, mode);
 80005c8:	6879      	ldr	r1, [r7, #4]
 80005ca:	2001      	movs	r0, #1
 80005cc:	f000 fc12 	bl	8000df4 <toggleLight>
	setTimer(3, 25);
 80005d0:	2119      	movs	r1, #25
 80005d2:	2003      	movs	r0, #3
 80005d4:	f000 fa9c 	bl	8000b10 <setTimer>
}
 80005d8:	bf00      	nop
 80005da:	3708      	adds	r7, #8
 80005dc:	46bd      	mov	sp, r7
 80005de:	bd80      	pop	{r7, pc}

080005e0 <displayCountdown>:


void displayCountdown(){
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
	if (timer_counter[0] % 100 == 0){
 80005e4:	4b0d      	ldr	r3, [pc, #52]	; (800061c <displayCountdown+0x3c>)
 80005e6:	681a      	ldr	r2, [r3, #0]
 80005e8:	4b0d      	ldr	r3, [pc, #52]	; (8000620 <displayCountdown+0x40>)
 80005ea:	fb83 1302 	smull	r1, r3, r3, r2
 80005ee:	1159      	asrs	r1, r3, #5
 80005f0:	17d3      	asrs	r3, r2, #31
 80005f2:	1acb      	subs	r3, r1, r3
 80005f4:	2164      	movs	r1, #100	; 0x64
 80005f6:	fb01 f303 	mul.w	r3, r1, r3
 80005fa:	1ad3      	subs	r3, r2, r3
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d10a      	bne.n	8000616 <displayCountdown+0x36>
		display7SEG(timer_counter[0] /100);
 8000600:	4b06      	ldr	r3, [pc, #24]	; (800061c <displayCountdown+0x3c>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	4a06      	ldr	r2, [pc, #24]	; (8000620 <displayCountdown+0x40>)
 8000606:	fb82 1203 	smull	r1, r2, r2, r3
 800060a:	1152      	asrs	r2, r2, #5
 800060c:	17db      	asrs	r3, r3, #31
 800060e:	1ad3      	subs	r3, r2, r3
 8000610:	4618      	mov	r0, r3
 8000612:	f000 fc5f 	bl	8000ed4 <display7SEG>
//		setTimer(5,100);
	}
}
 8000616:	bf00      	nop
 8000618:	bd80      	pop	{r7, pc}
 800061a:	bf00      	nop
 800061c:	20000140 	.word	0x20000140
 8000620:	51eb851f 	.word	0x51eb851f

08000624 <checkDuration>:


//Check and update duration so that RED = GREEN + AMBER
void checkDuration(int mode){
 8000624:	b480      	push	{r7}
 8000626:	b085      	sub	sp, #20
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
	int lane = GREEN_DURATION + AMBER_DURATION;
 800062c:	4b1e      	ldr	r3, [pc, #120]	; (80006a8 <checkDuration+0x84>)
 800062e:	681a      	ldr	r2, [r3, #0]
 8000630:	4b1e      	ldr	r3, [pc, #120]	; (80006ac <checkDuration+0x88>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	4413      	add	r3, r2
 8000636:	60fb      	str	r3, [r7, #12]
	switch (mode){
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	2b17      	cmp	r3, #23
 800063c:	d01f      	beq.n	800067e <checkDuration+0x5a>
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	2b17      	cmp	r3, #23
 8000642:	dc2c      	bgt.n	800069e <checkDuration+0x7a>
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	2b15      	cmp	r3, #21
 8000648:	d003      	beq.n	8000652 <checkDuration+0x2e>
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	2b16      	cmp	r3, #22
 800064e:	d00b      	beq.n	8000668 <checkDuration+0x44>
		break;
	case GREEN:
		if (lane != RED) RED_DURATION = GREEN_DURATION + AMBER_DURATION;
		break;
	}
}
 8000650:	e025      	b.n	800069e <checkDuration+0x7a>
		if (lane != RED) GREEN_DURATION = RED_DURATION - AMBER_DURATION;
 8000652:	68fb      	ldr	r3, [r7, #12]
 8000654:	2b15      	cmp	r3, #21
 8000656:	d01d      	beq.n	8000694 <checkDuration+0x70>
 8000658:	4b15      	ldr	r3, [pc, #84]	; (80006b0 <checkDuration+0x8c>)
 800065a:	681a      	ldr	r2, [r3, #0]
 800065c:	4b13      	ldr	r3, [pc, #76]	; (80006ac <checkDuration+0x88>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	1ad3      	subs	r3, r2, r3
 8000662:	4a11      	ldr	r2, [pc, #68]	; (80006a8 <checkDuration+0x84>)
 8000664:	6013      	str	r3, [r2, #0]
		break;
 8000666:	e015      	b.n	8000694 <checkDuration+0x70>
		if (lane != RED) RED_DURATION = GREEN_DURATION + AMBER_DURATION;
 8000668:	68fb      	ldr	r3, [r7, #12]
 800066a:	2b15      	cmp	r3, #21
 800066c:	d014      	beq.n	8000698 <checkDuration+0x74>
 800066e:	4b0e      	ldr	r3, [pc, #56]	; (80006a8 <checkDuration+0x84>)
 8000670:	681a      	ldr	r2, [r3, #0]
 8000672:	4b0e      	ldr	r3, [pc, #56]	; (80006ac <checkDuration+0x88>)
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	4413      	add	r3, r2
 8000678:	4a0d      	ldr	r2, [pc, #52]	; (80006b0 <checkDuration+0x8c>)
 800067a:	6013      	str	r3, [r2, #0]
		break;
 800067c:	e00c      	b.n	8000698 <checkDuration+0x74>
		if (lane != RED) RED_DURATION = GREEN_DURATION + AMBER_DURATION;
 800067e:	68fb      	ldr	r3, [r7, #12]
 8000680:	2b15      	cmp	r3, #21
 8000682:	d00b      	beq.n	800069c <checkDuration+0x78>
 8000684:	4b08      	ldr	r3, [pc, #32]	; (80006a8 <checkDuration+0x84>)
 8000686:	681a      	ldr	r2, [r3, #0]
 8000688:	4b08      	ldr	r3, [pc, #32]	; (80006ac <checkDuration+0x88>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4413      	add	r3, r2
 800068e:	4a08      	ldr	r2, [pc, #32]	; (80006b0 <checkDuration+0x8c>)
 8000690:	6013      	str	r3, [r2, #0]
		break;
 8000692:	e003      	b.n	800069c <checkDuration+0x78>
		break;
 8000694:	bf00      	nop
 8000696:	e002      	b.n	800069e <checkDuration+0x7a>
		break;
 8000698:	bf00      	nop
 800069a:	e000      	b.n	800069e <checkDuration+0x7a>
		break;
 800069c:	bf00      	nop
}
 800069e:	bf00      	nop
 80006a0:	3714      	adds	r7, #20
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bc80      	pop	{r7}
 80006a6:	4770      	bx	lr
 80006a8:	200000ac 	.word	0x200000ac
 80006ac:	200000a8 	.word	0x200000a8
 80006b0:	200000a4 	.word	0x200000a4

080006b4 <fsm_manual_run>:

void fsm_manual_run(){
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0
	switch(TRAFFIC_MODE){
 80006b8:	4b74      	ldr	r3, [pc, #464]	; (800088c <fsm_manual_run+0x1d8>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	3b0b      	subs	r3, #11
 80006be:	2b0c      	cmp	r3, #12
 80006c0:	f200 80d6 	bhi.w	8000870 <fsm_manual_run+0x1bc>
 80006c4:	a201      	add	r2, pc, #4	; (adr r2, 80006cc <fsm_manual_run+0x18>)
 80006c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006ca:	bf00      	nop
 80006cc:	08000701 	.word	0x08000701
 80006d0:	08000871 	.word	0x08000871
 80006d4:	08000725 	.word	0x08000725
 80006d8:	08000871 	.word	0x08000871
 80006dc:	08000871 	.word	0x08000871
 80006e0:	08000871 	.word	0x08000871
 80006e4:	08000871 	.word	0x08000871
 80006e8:	08000871 	.word	0x08000871
 80006ec:	08000871 	.word	0x08000871
 80006f0:	08000871 	.word	0x08000871
 80006f4:	08000773 	.word	0x08000773
 80006f8:	080007c9 	.word	0x080007c9
 80006fc:	0800081f 	.word	0x0800081f
		case AUTO:
			displayCountdown();
 8000700:	f7ff ff6e 	bl	80005e0 <displayCountdown>
			if (isButtonPressed(0)){
 8000704:	2000      	movs	r0, #0
 8000706:	f7ff fd21 	bl	800014c <isButtonPressed>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	f000 80b1 	beq.w	8000874 <fsm_manual_run+0x1c0>
				changeMode(MANUAL, 0, INIT);
 8000712:	2201      	movs	r2, #1
 8000714:	2100      	movs	r1, #0
 8000716:	200d      	movs	r0, #13
 8000718:	f7ff ff06 	bl	8000528 <changeMode>
				display7SEG(USER);
 800071c:	200e      	movs	r0, #14
 800071e:	f000 fbd9 	bl	8000ed4 <display7SEG>
			}
			break;
 8000722:	e0a7      	b.n	8000874 <fsm_manual_run+0x1c0>

		case MANUAL:
			//Change mode
			if (isButtonPressed(0)){
 8000724:	2000      	movs	r0, #0
 8000726:	f7ff fd11 	bl	800014c <isButtonPressed>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d006      	beq.n	800073e <fsm_manual_run+0x8a>
				changeMode(RED, RED_DURATION, OFF);
 8000730:	4b57      	ldr	r3, [pc, #348]	; (8000890 <fsm_manual_run+0x1dc>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	220c      	movs	r2, #12
 8000736:	4619      	mov	r1, r3
 8000738:	2015      	movs	r0, #21
 800073a:	f7ff fef5 	bl	8000528 <changeMode>
			}

			if (isButtonPressed(1)){
 800073e:	2001      	movs	r0, #1
 8000740:	f7ff fd04 	bl	800014c <isButtonPressed>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d005      	beq.n	8000756 <fsm_manual_run+0xa2>
				manualPlus(0);
 800074a:	2000      	movs	r0, #0
 800074c:	f7ff fe86 	bl	800045c <manualPlus>
				manualPlus(1);
 8000750:	2001      	movs	r0, #1
 8000752:	f7ff fe83 	bl	800045c <manualPlus>
			}
			if (isButtonPressed(2)){
 8000756:	2002      	movs	r0, #2
 8000758:	f7ff fcf8 	bl	800014c <isButtonPressed>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	f000 808a 	beq.w	8000878 <fsm_manual_run+0x1c4>
				manualMinus(0);
 8000764:	2000      	movs	r0, #0
 8000766:	f7ff feab 	bl	80004c0 <manualMinus>
				manualMinus(1);
 800076a:	2001      	movs	r0, #1
 800076c:	f7ff fea8 	bl	80004c0 <manualMinus>
			}
			break;
 8000770:	e082      	b.n	8000878 <fsm_manual_run+0x1c4>

		case RED:
			//Change mode
			if (isButtonPressed(0)) changeMode(AMBER, AMBER_DURATION, OFF);
 8000772:	2000      	movs	r0, #0
 8000774:	f7ff fcea 	bl	800014c <isButtonPressed>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d006      	beq.n	800078c <fsm_manual_run+0xd8>
 800077e:	4b45      	ldr	r3, [pc, #276]	; (8000894 <fsm_manual_run+0x1e0>)
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	220c      	movs	r2, #12
 8000784:	4619      	mov	r1, r3
 8000786:	2016      	movs	r0, #22
 8000788:	f7ff fece 	bl	8000528 <changeMode>

			//Change duration
			if (isButtonPressed(1))	changeDuration(RED);
 800078c:	2001      	movs	r0, #1
 800078e:	f7ff fcdd 	bl	800014c <isButtonPressed>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d002      	beq.n	800079e <fsm_manual_run+0xea>
 8000798:	2015      	movs	r0, #21
 800079a:	f7ff fef1 	bl	8000580 <changeDuration>

			//Save duration
			if (isButtonPressed(2)){
 800079e:	2002      	movs	r0, #2
 80007a0:	f7ff fcd4 	bl	800014c <isButtonPressed>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d006      	beq.n	80007b8 <fsm_manual_run+0x104>
				RED_DURATION = tempDuration;
 80007aa:	4b3b      	ldr	r3, [pc, #236]	; (8000898 <fsm_manual_run+0x1e4>)
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	4a38      	ldr	r2, [pc, #224]	; (8000890 <fsm_manual_run+0x1dc>)
 80007b0:	6013      	str	r3, [r2, #0]
				checkDuration(RED);
 80007b2:	2015      	movs	r0, #21
 80007b4:	f7ff ff36 	bl	8000624 <checkDuration>
			}

			//Toggle lights
			if (timer_flag[3]) toggle(RED);
 80007b8:	4b38      	ldr	r3, [pc, #224]	; (800089c <fsm_manual_run+0x1e8>)
 80007ba:	68db      	ldr	r3, [r3, #12]
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d05d      	beq.n	800087c <fsm_manual_run+0x1c8>
 80007c0:	2015      	movs	r0, #21
 80007c2:	f7ff fef9 	bl	80005b8 <toggle>
			break;
 80007c6:	e059      	b.n	800087c <fsm_manual_run+0x1c8>

		case AMBER:
			//Change mode
			if (isButtonPressed(0)) changeMode(GREEN, GREEN_DURATION, OFF);
 80007c8:	2000      	movs	r0, #0
 80007ca:	f7ff fcbf 	bl	800014c <isButtonPressed>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d006      	beq.n	80007e2 <fsm_manual_run+0x12e>
 80007d4:	4b32      	ldr	r3, [pc, #200]	; (80008a0 <fsm_manual_run+0x1ec>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	220c      	movs	r2, #12
 80007da:	4619      	mov	r1, r3
 80007dc:	2017      	movs	r0, #23
 80007de:	f7ff fea3 	bl	8000528 <changeMode>

			//Change duration
			if (isButtonPressed(1))	changeDuration(AMBER);
 80007e2:	2001      	movs	r0, #1
 80007e4:	f7ff fcb2 	bl	800014c <isButtonPressed>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d002      	beq.n	80007f4 <fsm_manual_run+0x140>
 80007ee:	2016      	movs	r0, #22
 80007f0:	f7ff fec6 	bl	8000580 <changeDuration>

			//Save duration
			if (isButtonPressed(2)){
 80007f4:	2002      	movs	r0, #2
 80007f6:	f7ff fca9 	bl	800014c <isButtonPressed>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d006      	beq.n	800080e <fsm_manual_run+0x15a>
				AMBER_DURATION = tempDuration;
 8000800:	4b25      	ldr	r3, [pc, #148]	; (8000898 <fsm_manual_run+0x1e4>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	4a23      	ldr	r2, [pc, #140]	; (8000894 <fsm_manual_run+0x1e0>)
 8000806:	6013      	str	r3, [r2, #0]
				checkDuration(AMBER);
 8000808:	2016      	movs	r0, #22
 800080a:	f7ff ff0b 	bl	8000624 <checkDuration>
			}

			//Toggle lights
			if (timer_flag[3]) toggle(AMBER);
 800080e:	4b23      	ldr	r3, [pc, #140]	; (800089c <fsm_manual_run+0x1e8>)
 8000810:	68db      	ldr	r3, [r3, #12]
 8000812:	2b00      	cmp	r3, #0
 8000814:	d034      	beq.n	8000880 <fsm_manual_run+0x1cc>
 8000816:	2016      	movs	r0, #22
 8000818:	f7ff fece 	bl	80005b8 <toggle>
			break;
 800081c:	e030      	b.n	8000880 <fsm_manual_run+0x1cc>

		case GREEN:
			//Change mode
			if (isButtonPressed(0))	changeMode(AUTO, 0, INIT);
 800081e:	2000      	movs	r0, #0
 8000820:	f7ff fc94 	bl	800014c <isButtonPressed>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d004      	beq.n	8000834 <fsm_manual_run+0x180>
 800082a:	2201      	movs	r2, #1
 800082c:	2100      	movs	r1, #0
 800082e:	200b      	movs	r0, #11
 8000830:	f7ff fe7a 	bl	8000528 <changeMode>

			//Change duration
			if (isButtonPressed(1)) changeDuration(GREEN);
 8000834:	2001      	movs	r0, #1
 8000836:	f7ff fc89 	bl	800014c <isButtonPressed>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d002      	beq.n	8000846 <fsm_manual_run+0x192>
 8000840:	2017      	movs	r0, #23
 8000842:	f7ff fe9d 	bl	8000580 <changeDuration>

			//Save duration
			if (isButtonPressed(2)){
 8000846:	2002      	movs	r0, #2
 8000848:	f7ff fc80 	bl	800014c <isButtonPressed>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d006      	beq.n	8000860 <fsm_manual_run+0x1ac>
				GREEN_DURATION = tempDuration;
 8000852:	4b11      	ldr	r3, [pc, #68]	; (8000898 <fsm_manual_run+0x1e4>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	4a12      	ldr	r2, [pc, #72]	; (80008a0 <fsm_manual_run+0x1ec>)
 8000858:	6013      	str	r3, [r2, #0]
				checkDuration(GREEN);
 800085a:	2017      	movs	r0, #23
 800085c:	f7ff fee2 	bl	8000624 <checkDuration>
			}

			//Toggle lights
			if (timer_flag[3]) toggle(GREEN);
 8000860:	4b0e      	ldr	r3, [pc, #56]	; (800089c <fsm_manual_run+0x1e8>)
 8000862:	68db      	ldr	r3, [r3, #12]
 8000864:	2b00      	cmp	r3, #0
 8000866:	d00d      	beq.n	8000884 <fsm_manual_run+0x1d0>
 8000868:	2017      	movs	r0, #23
 800086a:	f7ff fea5 	bl	80005b8 <toggle>
			break;
 800086e:	e009      	b.n	8000884 <fsm_manual_run+0x1d0>

		default:
			 break;
 8000870:	bf00      	nop
 8000872:	e008      	b.n	8000886 <fsm_manual_run+0x1d2>
			break;
 8000874:	bf00      	nop
 8000876:	e006      	b.n	8000886 <fsm_manual_run+0x1d2>
			break;
 8000878:	bf00      	nop
 800087a:	e004      	b.n	8000886 <fsm_manual_run+0x1d2>
			break;
 800087c:	bf00      	nop
 800087e:	e002      	b.n	8000886 <fsm_manual_run+0x1d2>
			break;
 8000880:	bf00      	nop
 8000882:	e000      	b.n	8000886 <fsm_manual_run+0x1d2>
			break;
 8000884:	bf00      	nop
	}
}
 8000886:	bf00      	nop
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	200000a0 	.word	0x200000a0
 8000890:	200000a4 	.word	0x200000a4
 8000894:	200000a8 	.word	0x200000a8
 8000898:	200000f4 	.word	0x200000f4
 800089c:	20000158 	.word	0x20000158
 80008a0:	200000ac 	.word	0x200000ac

080008a4 <buttonRead>:
	timerRun(2);
	timerRun(3);
	timerRun(4);
}

void buttonRead(void){
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
	getKeyInput(0);
 80008a8:	2000      	movs	r0, #0
 80008aa:	f7ff fc79 	bl	80001a0 <getKeyInput>
	getKeyInput(1);
 80008ae:	2001      	movs	r0, #1
 80008b0:	f7ff fc76 	bl	80001a0 <getKeyInput>
	getKeyInput(2);
 80008b4:	2002      	movs	r0, #2
 80008b6:	f7ff fc73 	bl	80001a0 <getKeyInput>
	getKeyInput(3);
 80008ba:	2003      	movs	r0, #3
 80008bc:	f7ff fc70 	bl	80001a0 <getKeyInput>
}
 80008c0:	bf00      	nop
 80008c2:	bd80      	pop	{r7, pc}

080008c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008c8:	f000 fd0e 	bl	80012e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008cc:	f000 f820 	bl	8000910 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008d0:	f000 f8aa 	bl	8000a28 <MX_GPIO_Init>
  MX_TIM2_Init();
 80008d4:	f000 f85c 	bl	8000990 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80008d8:	480c      	ldr	r0, [pc, #48]	; (800090c <main+0x48>)
 80008da:	f001 fc67 	bl	80021ac <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  setTimer(1, 100);
 80008de:	2164      	movs	r1, #100	; 0x64
 80008e0:	2001      	movs	r0, #1
 80008e2:	f000 f915 	bl	8000b10 <setTimer>
  setTimer(2, 200);
 80008e6:	21c8      	movs	r1, #200	; 0xc8
 80008e8:	2002      	movs	r0, #2
 80008ea:	f000 f911 	bl	8000b10 <setTimer>
  setTimer(3, 300);
 80008ee:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80008f2:	2003      	movs	r0, #3
 80008f4:	f000 f90c 	bl	8000b10 <setTimer>
//  int i = 0;
  while (1)
  {
	  fsm_manual_run();
 80008f8:	f7ff fedc 	bl	80006b4 <fsm_manual_run>
	  fsm_auto_run(0);
 80008fc:	2000      	movs	r0, #0
 80008fe:	f7ff fce7 	bl	80002d0 <fsm_auto_run>
	  fsm_auto_run(1);
 8000902:	2001      	movs	r0, #1
 8000904:	f7ff fce4 	bl	80002d0 <fsm_auto_run>
	  fsm_manual_run();
 8000908:	e7f6      	b.n	80008f8 <main+0x34>
 800090a:	bf00      	nop
 800090c:	200000f8 	.word	0x200000f8

08000910 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b090      	sub	sp, #64	; 0x40
 8000914:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000916:	f107 0318 	add.w	r3, r7, #24
 800091a:	2228      	movs	r2, #40	; 0x28
 800091c:	2100      	movs	r1, #0
 800091e:	4618      	mov	r0, r3
 8000920:	f001 ffdc 	bl	80028dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000924:	1d3b      	adds	r3, r7, #4
 8000926:	2200      	movs	r2, #0
 8000928:	601a      	str	r2, [r3, #0]
 800092a:	605a      	str	r2, [r3, #4]
 800092c:	609a      	str	r2, [r3, #8]
 800092e:	60da      	str	r2, [r3, #12]
 8000930:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000932:	2302      	movs	r3, #2
 8000934:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000936:	2301      	movs	r3, #1
 8000938:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800093a:	2310      	movs	r3, #16
 800093c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800093e:	2302      	movs	r3, #2
 8000940:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000942:	2300      	movs	r3, #0
 8000944:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8000946:	2300      	movs	r3, #0
 8000948:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800094a:	f107 0318 	add.w	r3, r7, #24
 800094e:	4618      	mov	r0, r3
 8000950:	f000 fffe 	bl	8001950 <HAL_RCC_OscConfig>
 8000954:	4603      	mov	r3, r0
 8000956:	2b00      	cmp	r3, #0
 8000958:	d001      	beq.n	800095e <SystemClock_Config+0x4e>
  {
    Error_Handler();
 800095a:	f000 f8d4 	bl	8000b06 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800095e:	230f      	movs	r3, #15
 8000960:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000962:	2302      	movs	r3, #2
 8000964:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000966:	2300      	movs	r3, #0
 8000968:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800096a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800096e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000970:	2300      	movs	r3, #0
 8000972:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000974:	1d3b      	adds	r3, r7, #4
 8000976:	2100      	movs	r1, #0
 8000978:	4618      	mov	r0, r3
 800097a:	f001 fa6b 	bl	8001e54 <HAL_RCC_ClockConfig>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d001      	beq.n	8000988 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000984:	f000 f8bf 	bl	8000b06 <Error_Handler>
  }
}
 8000988:	bf00      	nop
 800098a:	3740      	adds	r7, #64	; 0x40
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}

08000990 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b086      	sub	sp, #24
 8000994:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000996:	f107 0308 	add.w	r3, r7, #8
 800099a:	2200      	movs	r2, #0
 800099c:	601a      	str	r2, [r3, #0]
 800099e:	605a      	str	r2, [r3, #4]
 80009a0:	609a      	str	r2, [r3, #8]
 80009a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009a4:	463b      	mov	r3, r7
 80009a6:	2200      	movs	r2, #0
 80009a8:	601a      	str	r2, [r3, #0]
 80009aa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80009ac:	4b1d      	ldr	r3, [pc, #116]	; (8000a24 <MX_TIM2_Init+0x94>)
 80009ae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80009b2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 80009b4:	4b1b      	ldr	r3, [pc, #108]	; (8000a24 <MX_TIM2_Init+0x94>)
 80009b6:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80009ba:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009bc:	4b19      	ldr	r3, [pc, #100]	; (8000a24 <MX_TIM2_Init+0x94>)
 80009be:	2200      	movs	r2, #0
 80009c0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 80009c2:	4b18      	ldr	r3, [pc, #96]	; (8000a24 <MX_TIM2_Init+0x94>)
 80009c4:	2209      	movs	r2, #9
 80009c6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009c8:	4b16      	ldr	r3, [pc, #88]	; (8000a24 <MX_TIM2_Init+0x94>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009ce:	4b15      	ldr	r3, [pc, #84]	; (8000a24 <MX_TIM2_Init+0x94>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80009d4:	4813      	ldr	r0, [pc, #76]	; (8000a24 <MX_TIM2_Init+0x94>)
 80009d6:	f001 fb99 	bl	800210c <HAL_TIM_Base_Init>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d001      	beq.n	80009e4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80009e0:	f000 f891 	bl	8000b06 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009e8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80009ea:	f107 0308 	add.w	r3, r7, #8
 80009ee:	4619      	mov	r1, r3
 80009f0:	480c      	ldr	r0, [pc, #48]	; (8000a24 <MX_TIM2_Init+0x94>)
 80009f2:	f001 fd2f 	bl	8002454 <HAL_TIM_ConfigClockSource>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d001      	beq.n	8000a00 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80009fc:	f000 f883 	bl	8000b06 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a00:	2300      	movs	r3, #0
 8000a02:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a04:	2300      	movs	r3, #0
 8000a06:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a08:	463b      	mov	r3, r7
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	4805      	ldr	r0, [pc, #20]	; (8000a24 <MX_TIM2_Init+0x94>)
 8000a0e:	f001 fefb 	bl	8002808 <HAL_TIMEx_MasterConfigSynchronization>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000a18:	f000 f875 	bl	8000b06 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000a1c:	bf00      	nop
 8000a1e:	3718      	adds	r7, #24
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	200000f8 	.word	0x200000f8

08000a28 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b086      	sub	sp, #24
 8000a2c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a2e:	f107 0308 	add.w	r3, r7, #8
 8000a32:	2200      	movs	r2, #0
 8000a34:	601a      	str	r2, [r3, #0]
 8000a36:	605a      	str	r2, [r3, #4]
 8000a38:	609a      	str	r2, [r3, #8]
 8000a3a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a3c:	4b28      	ldr	r3, [pc, #160]	; (8000ae0 <MX_GPIO_Init+0xb8>)
 8000a3e:	699b      	ldr	r3, [r3, #24]
 8000a40:	4a27      	ldr	r2, [pc, #156]	; (8000ae0 <MX_GPIO_Init+0xb8>)
 8000a42:	f043 0304 	orr.w	r3, r3, #4
 8000a46:	6193      	str	r3, [r2, #24]
 8000a48:	4b25      	ldr	r3, [pc, #148]	; (8000ae0 <MX_GPIO_Init+0xb8>)
 8000a4a:	699b      	ldr	r3, [r3, #24]
 8000a4c:	f003 0304 	and.w	r3, r3, #4
 8000a50:	607b      	str	r3, [r7, #4]
 8000a52:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a54:	4b22      	ldr	r3, [pc, #136]	; (8000ae0 <MX_GPIO_Init+0xb8>)
 8000a56:	699b      	ldr	r3, [r3, #24]
 8000a58:	4a21      	ldr	r2, [pc, #132]	; (8000ae0 <MX_GPIO_Init+0xb8>)
 8000a5a:	f043 0308 	orr.w	r3, r3, #8
 8000a5e:	6193      	str	r3, [r2, #24]
 8000a60:	4b1f      	ldr	r3, [pc, #124]	; (8000ae0 <MX_GPIO_Init+0xb8>)
 8000a62:	699b      	ldr	r3, [r3, #24]
 8000a64:	f003 0308 	and.w	r3, r3, #8
 8000a68:	603b      	str	r3, [r7, #0]
 8000a6a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RED1_Pin|AMBER1_Pin|GREEN1_Pin|RED2_Pin
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
 8000a72:	481c      	ldr	r0, [pc, #112]	; (8000ae4 <MX_GPIO_Init+0xbc>)
 8000a74:	f000 ff3b 	bl	80018ee <HAL_GPIO_WritePin>
                          |AMBER2_Pin|GREEN2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG0_Pin|SEG1_Pin|SEG2_Pin|SEG3_Pin
 8000a78:	2200      	movs	r2, #0
 8000a7a:	217f      	movs	r1, #127	; 0x7f
 8000a7c:	481a      	ldr	r0, [pc, #104]	; (8000ae8 <MX_GPIO_Init+0xc0>)
 8000a7e:	f000 ff36 	bl	80018ee <HAL_GPIO_WritePin>
                          |SEG4_Pin|SEG5_Pin|SEG6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : RED1_Pin AMBER1_Pin GREEN1_Pin RED2_Pin
                           AMBER2_Pin GREEN2_Pin */
  GPIO_InitStruct.Pin = RED1_Pin|AMBER1_Pin|GREEN1_Pin|RED2_Pin
 8000a82:	f44f 73fc 	mov.w	r3, #504	; 0x1f8
 8000a86:	60bb      	str	r3, [r7, #8]
                          |AMBER2_Pin|GREEN2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a88:	2301      	movs	r3, #1
 8000a8a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a90:	2302      	movs	r3, #2
 8000a92:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a94:	f107 0308 	add.w	r3, r7, #8
 8000a98:	4619      	mov	r1, r3
 8000a9a:	4812      	ldr	r0, [pc, #72]	; (8000ae4 <MX_GPIO_Init+0xbc>)
 8000a9c:	f000 fd94 	bl	80015c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG0_Pin SEG1_Pin SEG2_Pin SEG3_Pin
                           SEG4_Pin SEG5_Pin SEG6_Pin */
  GPIO_InitStruct.Pin = SEG0_Pin|SEG1_Pin|SEG2_Pin|SEG3_Pin
 8000aa0:	237f      	movs	r3, #127	; 0x7f
 8000aa2:	60bb      	str	r3, [r7, #8]
                          |SEG4_Pin|SEG5_Pin|SEG6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aa4:	2301      	movs	r3, #1
 8000aa6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aac:	2302      	movs	r3, #2
 8000aae:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ab0:	f107 0308 	add.w	r3, r7, #8
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	480c      	ldr	r0, [pc, #48]	; (8000ae8 <MX_GPIO_Init+0xc0>)
 8000ab8:	f000 fd86 	bl	80015c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN1_Pin BTN2_Pin BTN3_Pin BTN4_Pin */
  GPIO_InitStruct.Pin = BTN1_Pin|BTN2_Pin|BTN3_Pin|BTN4_Pin;
 8000abc:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 8000ac0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aca:	f107 0308 	add.w	r3, r7, #8
 8000ace:	4619      	mov	r1, r3
 8000ad0:	4804      	ldr	r0, [pc, #16]	; (8000ae4 <MX_GPIO_Init+0xbc>)
 8000ad2:	f000 fd79 	bl	80015c8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ad6:	bf00      	nop
 8000ad8:	3718      	adds	r7, #24
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	40021000 	.word	0x40021000
 8000ae4:	40010800 	.word	0x40010800
 8000ae8:	40010c00 	.word	0x40010c00

08000aec <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
//	updateTimer();
	timerRun(1);
 8000af4:	2001      	movs	r0, #1
 8000af6:	f000 f823 	bl	8000b40 <timerRun>
	buttonRead();
 8000afa:	f7ff fed3 	bl	80008a4 <buttonRead>
}
 8000afe:	bf00      	nop
 8000b00:	3708      	adds	r7, #8
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}

08000b06 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b06:	b480      	push	{r7}
 8000b08:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b0a:	b672      	cpsid	i
}
 8000b0c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b0e:	e7fe      	b.n	8000b0e <Error_Handler+0x8>

08000b10 <setTimer>:
#include "software_timer.h"

int timer_counter[6] = {0, 0, 0, 0, 0, 0};
int timer_flag[6] = {0, 0, 0, 0, 0, 0};

void setTimer(int type, int duration){
 8000b10:	b480      	push	{r7}
 8000b12:	b083      	sub	sp, #12
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
 8000b18:	6039      	str	r1, [r7, #0]
	timer_counter[type] = duration;
 8000b1a:	4907      	ldr	r1, [pc, #28]	; (8000b38 <setTimer+0x28>)
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	683a      	ldr	r2, [r7, #0]
 8000b20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	timer_flag[type] = 0;
 8000b24:	4a05      	ldr	r2, [pc, #20]	; (8000b3c <setTimer+0x2c>)
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	2100      	movs	r1, #0
 8000b2a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000b2e:	bf00      	nop
 8000b30:	370c      	adds	r7, #12
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bc80      	pop	{r7}
 8000b36:	4770      	bx	lr
 8000b38:	20000140 	.word	0x20000140
 8000b3c:	20000158 	.word	0x20000158

08000b40 <timerRun>:

void timerRun(int type){
 8000b40:	b480      	push	{r7}
 8000b42:	b083      	sub	sp, #12
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
	if(timer_counter[type] > 0){
 8000b48:	4a0f      	ldr	r2, [pc, #60]	; (8000b88 <timerRun+0x48>)
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	dd13      	ble.n	8000b7c <timerRun+0x3c>
		timer_counter[type]--;
 8000b54:	4a0c      	ldr	r2, [pc, #48]	; (8000b88 <timerRun+0x48>)
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b5c:	1e5a      	subs	r2, r3, #1
 8000b5e:	490a      	ldr	r1, [pc, #40]	; (8000b88 <timerRun+0x48>)
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		if(timer_counter[type] <= 0){
 8000b66:	4a08      	ldr	r2, [pc, #32]	; (8000b88 <timerRun+0x48>)
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	dc04      	bgt.n	8000b7c <timerRun+0x3c>
			timer_flag[type] = 1;
 8000b72:	4a06      	ldr	r2, [pc, #24]	; (8000b8c <timerRun+0x4c>)
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	2101      	movs	r1, #1
 8000b78:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		}
	}
}
 8000b7c:	bf00      	nop
 8000b7e:	370c      	adds	r7, #12
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bc80      	pop	{r7}
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop
 8000b88:	20000140 	.word	0x20000140
 8000b8c:	20000158 	.word	0x20000158

08000b90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	b085      	sub	sp, #20
 8000b94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000b96:	4b15      	ldr	r3, [pc, #84]	; (8000bec <HAL_MspInit+0x5c>)
 8000b98:	699b      	ldr	r3, [r3, #24]
 8000b9a:	4a14      	ldr	r2, [pc, #80]	; (8000bec <HAL_MspInit+0x5c>)
 8000b9c:	f043 0301 	orr.w	r3, r3, #1
 8000ba0:	6193      	str	r3, [r2, #24]
 8000ba2:	4b12      	ldr	r3, [pc, #72]	; (8000bec <HAL_MspInit+0x5c>)
 8000ba4:	699b      	ldr	r3, [r3, #24]
 8000ba6:	f003 0301 	and.w	r3, r3, #1
 8000baa:	60bb      	str	r3, [r7, #8]
 8000bac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bae:	4b0f      	ldr	r3, [pc, #60]	; (8000bec <HAL_MspInit+0x5c>)
 8000bb0:	69db      	ldr	r3, [r3, #28]
 8000bb2:	4a0e      	ldr	r2, [pc, #56]	; (8000bec <HAL_MspInit+0x5c>)
 8000bb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bb8:	61d3      	str	r3, [r2, #28]
 8000bba:	4b0c      	ldr	r3, [pc, #48]	; (8000bec <HAL_MspInit+0x5c>)
 8000bbc:	69db      	ldr	r3, [r3, #28]
 8000bbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bc2:	607b      	str	r3, [r7, #4]
 8000bc4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000bc6:	4b0a      	ldr	r3, [pc, #40]	; (8000bf0 <HAL_MspInit+0x60>)
 8000bc8:	685b      	ldr	r3, [r3, #4]
 8000bca:	60fb      	str	r3, [r7, #12]
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000bd2:	60fb      	str	r3, [r7, #12]
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000bda:	60fb      	str	r3, [r7, #12]
 8000bdc:	4a04      	ldr	r2, [pc, #16]	; (8000bf0 <HAL_MspInit+0x60>)
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000be2:	bf00      	nop
 8000be4:	3714      	adds	r7, #20
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bc80      	pop	{r7}
 8000bea:	4770      	bx	lr
 8000bec:	40021000 	.word	0x40021000
 8000bf0:	40010000 	.word	0x40010000

08000bf4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b084      	sub	sp, #16
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c04:	d113      	bne.n	8000c2e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c06:	4b0c      	ldr	r3, [pc, #48]	; (8000c38 <HAL_TIM_Base_MspInit+0x44>)
 8000c08:	69db      	ldr	r3, [r3, #28]
 8000c0a:	4a0b      	ldr	r2, [pc, #44]	; (8000c38 <HAL_TIM_Base_MspInit+0x44>)
 8000c0c:	f043 0301 	orr.w	r3, r3, #1
 8000c10:	61d3      	str	r3, [r2, #28]
 8000c12:	4b09      	ldr	r3, [pc, #36]	; (8000c38 <HAL_TIM_Base_MspInit+0x44>)
 8000c14:	69db      	ldr	r3, [r3, #28]
 8000c16:	f003 0301 	and.w	r3, r3, #1
 8000c1a:	60fb      	str	r3, [r7, #12]
 8000c1c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000c1e:	2200      	movs	r2, #0
 8000c20:	2100      	movs	r1, #0
 8000c22:	201c      	movs	r0, #28
 8000c24:	f000 fc99 	bl	800155a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000c28:	201c      	movs	r0, #28
 8000c2a:	f000 fcb2 	bl	8001592 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000c2e:	bf00      	nop
 8000c30:	3710      	adds	r7, #16
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	40021000 	.word	0x40021000

08000c3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c40:	e7fe      	b.n	8000c40 <NMI_Handler+0x4>

08000c42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c42:	b480      	push	{r7}
 8000c44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c46:	e7fe      	b.n	8000c46 <HardFault_Handler+0x4>

08000c48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c4c:	e7fe      	b.n	8000c4c <MemManage_Handler+0x4>

08000c4e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c4e:	b480      	push	{r7}
 8000c50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c52:	e7fe      	b.n	8000c52 <BusFault_Handler+0x4>

08000c54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c58:	e7fe      	b.n	8000c58 <UsageFault_Handler+0x4>

08000c5a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c5a:	b480      	push	{r7}
 8000c5c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c5e:	bf00      	nop
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bc80      	pop	{r7}
 8000c64:	4770      	bx	lr

08000c66 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c66:	b480      	push	{r7}
 8000c68:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c6a:	bf00      	nop
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bc80      	pop	{r7}
 8000c70:	4770      	bx	lr

08000c72 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c72:	b480      	push	{r7}
 8000c74:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c76:	bf00      	nop
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bc80      	pop	{r7}
 8000c7c:	4770      	bx	lr

08000c7e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c7e:	b580      	push	{r7, lr}
 8000c80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c82:	f000 fb77 	bl	8001374 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c86:	bf00      	nop
 8000c88:	bd80      	pop	{r7, pc}
	...

08000c8c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000c90:	4802      	ldr	r0, [pc, #8]	; (8000c9c <TIM2_IRQHandler+0x10>)
 8000c92:	f001 fad7 	bl	8002244 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000c96:	bf00      	nop
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	200000f8 	.word	0x200000f8

08000ca0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ca4:	bf00      	nop
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bc80      	pop	{r7}
 8000caa:	4770      	bx	lr

08000cac <setTrafficLight>:
uint16_t REDLIGHT [2] = {RED1_Pin, RED2_Pin};
uint16_t GREENLIGHT [2] = {GREEN1_Pin, GREEN2_Pin};
uint16_t AMBERLIGHT [2] = {AMBER1_Pin, AMBER2_Pin};
GPIO_TypeDef * GPIO_Port [6] = {GPIOA, GPIOA, GPIOA, GPIOA, GPIOA, GPIOA};

void setTrafficLight(int lane, int light){
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b082      	sub	sp, #8
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
 8000cb4:	6039      	str	r1, [r7, #0]
	switch(light){
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	3b0c      	subs	r3, #12
 8000cba:	2b0b      	cmp	r3, #11
 8000cbc:	f200 808c 	bhi.w	8000dd8 <setTrafficLight+0x12c>
 8000cc0:	a201      	add	r2, pc, #4	; (adr r2, 8000cc8 <setTrafficLight+0x1c>)
 8000cc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cc6:	bf00      	nop
 8000cc8:	08000da1 	.word	0x08000da1
 8000ccc:	08000dd9 	.word	0x08000dd9
 8000cd0:	08000dd9 	.word	0x08000dd9
 8000cd4:	08000dd9 	.word	0x08000dd9
 8000cd8:	08000dd9 	.word	0x08000dd9
 8000cdc:	08000dd9 	.word	0x08000dd9
 8000ce0:	08000dd9 	.word	0x08000dd9
 8000ce4:	08000dd9 	.word	0x08000dd9
 8000ce8:	08000dd9 	.word	0x08000dd9
 8000cec:	08000cf9 	.word	0x08000cf9
 8000cf0:	08000d31 	.word	0x08000d31
 8000cf4:	08000d69 	.word	0x08000d69
	case RED:
		HAL_GPIO_WritePin(GPIOA, REDLIGHT[lane], RESET);
 8000cf8:	4a3a      	ldr	r2, [pc, #232]	; (8000de4 <setTrafficLight+0x138>)
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d00:	2200      	movs	r2, #0
 8000d02:	4619      	mov	r1, r3
 8000d04:	4838      	ldr	r0, [pc, #224]	; (8000de8 <setTrafficLight+0x13c>)
 8000d06:	f000 fdf2 	bl	80018ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GREENLIGHT[lane], SET);
 8000d0a:	4a38      	ldr	r2, [pc, #224]	; (8000dec <setTrafficLight+0x140>)
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d12:	2201      	movs	r2, #1
 8000d14:	4619      	mov	r1, r3
 8000d16:	4834      	ldr	r0, [pc, #208]	; (8000de8 <setTrafficLight+0x13c>)
 8000d18:	f000 fde9 	bl	80018ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, AMBERLIGHT[lane], SET);
 8000d1c:	4a34      	ldr	r2, [pc, #208]	; (8000df0 <setTrafficLight+0x144>)
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d24:	2201      	movs	r2, #1
 8000d26:	4619      	mov	r1, r3
 8000d28:	482f      	ldr	r0, [pc, #188]	; (8000de8 <setTrafficLight+0x13c>)
 8000d2a:	f000 fde0 	bl	80018ee <HAL_GPIO_WritePin>
		break;
 8000d2e:	e054      	b.n	8000dda <setTrafficLight+0x12e>
	case AMBER:
		HAL_GPIO_WritePin(GPIOA, REDLIGHT[lane], SET);
 8000d30:	4a2c      	ldr	r2, [pc, #176]	; (8000de4 <setTrafficLight+0x138>)
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d38:	2201      	movs	r2, #1
 8000d3a:	4619      	mov	r1, r3
 8000d3c:	482a      	ldr	r0, [pc, #168]	; (8000de8 <setTrafficLight+0x13c>)
 8000d3e:	f000 fdd6 	bl	80018ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GREENLIGHT[lane], SET);
 8000d42:	4a2a      	ldr	r2, [pc, #168]	; (8000dec <setTrafficLight+0x140>)
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d4a:	2201      	movs	r2, #1
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	4826      	ldr	r0, [pc, #152]	; (8000de8 <setTrafficLight+0x13c>)
 8000d50:	f000 fdcd 	bl	80018ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, AMBERLIGHT[lane], RESET);
 8000d54:	4a26      	ldr	r2, [pc, #152]	; (8000df0 <setTrafficLight+0x144>)
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	4619      	mov	r1, r3
 8000d60:	4821      	ldr	r0, [pc, #132]	; (8000de8 <setTrafficLight+0x13c>)
 8000d62:	f000 fdc4 	bl	80018ee <HAL_GPIO_WritePin>
		break;
 8000d66:	e038      	b.n	8000dda <setTrafficLight+0x12e>
	case GREEN:
		HAL_GPIO_WritePin(GPIOA, REDLIGHT[lane], SET);
 8000d68:	4a1e      	ldr	r2, [pc, #120]	; (8000de4 <setTrafficLight+0x138>)
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d70:	2201      	movs	r2, #1
 8000d72:	4619      	mov	r1, r3
 8000d74:	481c      	ldr	r0, [pc, #112]	; (8000de8 <setTrafficLight+0x13c>)
 8000d76:	f000 fdba 	bl	80018ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GREENLIGHT[lane], RESET);
 8000d7a:	4a1c      	ldr	r2, [pc, #112]	; (8000dec <setTrafficLight+0x140>)
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d82:	2200      	movs	r2, #0
 8000d84:	4619      	mov	r1, r3
 8000d86:	4818      	ldr	r0, [pc, #96]	; (8000de8 <setTrafficLight+0x13c>)
 8000d88:	f000 fdb1 	bl	80018ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, AMBERLIGHT[lane], SET);
 8000d8c:	4a18      	ldr	r2, [pc, #96]	; (8000df0 <setTrafficLight+0x144>)
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d94:	2201      	movs	r2, #1
 8000d96:	4619      	mov	r1, r3
 8000d98:	4813      	ldr	r0, [pc, #76]	; (8000de8 <setTrafficLight+0x13c>)
 8000d9a:	f000 fda8 	bl	80018ee <HAL_GPIO_WritePin>
		break;
 8000d9e:	e01c      	b.n	8000dda <setTrafficLight+0x12e>
	case OFF:
		HAL_GPIO_WritePin(GPIOA, REDLIGHT[lane], SET);
 8000da0:	4a10      	ldr	r2, [pc, #64]	; (8000de4 <setTrafficLight+0x138>)
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000da8:	2201      	movs	r2, #1
 8000daa:	4619      	mov	r1, r3
 8000dac:	480e      	ldr	r0, [pc, #56]	; (8000de8 <setTrafficLight+0x13c>)
 8000dae:	f000 fd9e 	bl	80018ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GREENLIGHT[lane], SET);
 8000db2:	4a0e      	ldr	r2, [pc, #56]	; (8000dec <setTrafficLight+0x140>)
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000dba:	2201      	movs	r2, #1
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	480a      	ldr	r0, [pc, #40]	; (8000de8 <setTrafficLight+0x13c>)
 8000dc0:	f000 fd95 	bl	80018ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, AMBERLIGHT[lane], SET);
 8000dc4:	4a0a      	ldr	r2, [pc, #40]	; (8000df0 <setTrafficLight+0x144>)
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000dcc:	2201      	movs	r2, #1
 8000dce:	4619      	mov	r1, r3
 8000dd0:	4805      	ldr	r0, [pc, #20]	; (8000de8 <setTrafficLight+0x13c>)
 8000dd2:	f000 fd8c 	bl	80018ee <HAL_GPIO_WritePin>
		break;
 8000dd6:	e000      	b.n	8000dda <setTrafficLight+0x12e>
	default:
		break;
 8000dd8:	bf00      	nop
	}

}
 8000dda:	bf00      	nop
 8000ddc:	3708      	adds	r7, #8
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	200000b4 	.word	0x200000b4
 8000de8:	40010800 	.word	0x40010800
 8000dec:	200000b8 	.word	0x200000b8
 8000df0:	200000bc 	.word	0x200000bc

08000df4 <toggleLight>:

void toggleLight(int lane, int light){
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b082      	sub	sp, #8
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
 8000dfc:	6039      	str	r1, [r7, #0]
	switch (light){
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	2b17      	cmp	r3, #23
 8000e02:	d03f      	beq.n	8000e84 <toggleLight+0x90>
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	2b17      	cmp	r3, #23
 8000e08:	dc57      	bgt.n	8000eba <toggleLight+0xc6>
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	2b15      	cmp	r3, #21
 8000e0e:	d003      	beq.n	8000e18 <toggleLight+0x24>
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	2b16      	cmp	r3, #22
 8000e14:	d01b      	beq.n	8000e4e <toggleLight+0x5a>
			HAL_GPIO_WritePin(GPIOA, REDLIGHT[lane], SET);
			HAL_GPIO_TogglePin(GPIOA, GREENLIGHT[lane]);
			HAL_GPIO_WritePin(GPIOA, AMBERLIGHT[lane], SET);
			break;
		default:
			break;
 8000e16:	e050      	b.n	8000eba <toggleLight+0xc6>
			HAL_GPIO_TogglePin(GPIOA, REDLIGHT[lane]);
 8000e18:	4a2a      	ldr	r2, [pc, #168]	; (8000ec4 <toggleLight+0xd0>)
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e20:	4619      	mov	r1, r3
 8000e22:	4829      	ldr	r0, [pc, #164]	; (8000ec8 <toggleLight+0xd4>)
 8000e24:	f000 fd7b 	bl	800191e <HAL_GPIO_TogglePin>
			HAL_GPIO_WritePin(GPIOA, GREENLIGHT[lane], SET);
 8000e28:	4a28      	ldr	r2, [pc, #160]	; (8000ecc <toggleLight+0xd8>)
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e30:	2201      	movs	r2, #1
 8000e32:	4619      	mov	r1, r3
 8000e34:	4824      	ldr	r0, [pc, #144]	; (8000ec8 <toggleLight+0xd4>)
 8000e36:	f000 fd5a 	bl	80018ee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, AMBERLIGHT[lane], SET);
 8000e3a:	4a25      	ldr	r2, [pc, #148]	; (8000ed0 <toggleLight+0xdc>)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e42:	2201      	movs	r2, #1
 8000e44:	4619      	mov	r1, r3
 8000e46:	4820      	ldr	r0, [pc, #128]	; (8000ec8 <toggleLight+0xd4>)
 8000e48:	f000 fd51 	bl	80018ee <HAL_GPIO_WritePin>
			break;
 8000e4c:	e036      	b.n	8000ebc <toggleLight+0xc8>
			HAL_GPIO_WritePin(GPIOA, REDLIGHT[lane], SET);
 8000e4e:	4a1d      	ldr	r2, [pc, #116]	; (8000ec4 <toggleLight+0xd0>)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e56:	2201      	movs	r2, #1
 8000e58:	4619      	mov	r1, r3
 8000e5a:	481b      	ldr	r0, [pc, #108]	; (8000ec8 <toggleLight+0xd4>)
 8000e5c:	f000 fd47 	bl	80018ee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GREENLIGHT[lane], SET);
 8000e60:	4a1a      	ldr	r2, [pc, #104]	; (8000ecc <toggleLight+0xd8>)
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e68:	2201      	movs	r2, #1
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	4816      	ldr	r0, [pc, #88]	; (8000ec8 <toggleLight+0xd4>)
 8000e6e:	f000 fd3e 	bl	80018ee <HAL_GPIO_WritePin>
			HAL_GPIO_TogglePin(GPIOA, AMBERLIGHT[lane]);
 8000e72:	4a17      	ldr	r2, [pc, #92]	; (8000ed0 <toggleLight+0xdc>)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	4812      	ldr	r0, [pc, #72]	; (8000ec8 <toggleLight+0xd4>)
 8000e7e:	f000 fd4e 	bl	800191e <HAL_GPIO_TogglePin>
			break;
 8000e82:	e01b      	b.n	8000ebc <toggleLight+0xc8>
			HAL_GPIO_WritePin(GPIOA, REDLIGHT[lane], SET);
 8000e84:	4a0f      	ldr	r2, [pc, #60]	; (8000ec4 <toggleLight+0xd0>)
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	4619      	mov	r1, r3
 8000e90:	480d      	ldr	r0, [pc, #52]	; (8000ec8 <toggleLight+0xd4>)
 8000e92:	f000 fd2c 	bl	80018ee <HAL_GPIO_WritePin>
			HAL_GPIO_TogglePin(GPIOA, GREENLIGHT[lane]);
 8000e96:	4a0d      	ldr	r2, [pc, #52]	; (8000ecc <toggleLight+0xd8>)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	4809      	ldr	r0, [pc, #36]	; (8000ec8 <toggleLight+0xd4>)
 8000ea2:	f000 fd3c 	bl	800191e <HAL_GPIO_TogglePin>
			HAL_GPIO_WritePin(GPIOA, AMBERLIGHT[lane], SET);
 8000ea6:	4a0a      	ldr	r2, [pc, #40]	; (8000ed0 <toggleLight+0xdc>)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000eae:	2201      	movs	r2, #1
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	4805      	ldr	r0, [pc, #20]	; (8000ec8 <toggleLight+0xd4>)
 8000eb4:	f000 fd1b 	bl	80018ee <HAL_GPIO_WritePin>
			break;
 8000eb8:	e000      	b.n	8000ebc <toggleLight+0xc8>
			break;
 8000eba:	bf00      	nop
	}
}
 8000ebc:	bf00      	nop
 8000ebe:	3708      	adds	r7, #8
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	200000b4 	.word	0x200000b4
 8000ec8:	40010800 	.word	0x40010800
 8000ecc:	200000b8 	.word	0x200000b8
 8000ed0:	200000bc 	.word	0x200000bc

08000ed4 <display7SEG>:



void display7SEG(int num){
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b082      	sub	sp, #8
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  switch(num){
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	2b0e      	cmp	r3, #14
 8000ee0:	f200 81d4 	bhi.w	800128c <display7SEG+0x3b8>
 8000ee4:	a201      	add	r2, pc, #4	; (adr r2, 8000eec <display7SEG+0x18>)
 8000ee6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000eea:	bf00      	nop
 8000eec:	08000f29 	.word	0x08000f29
 8000ef0:	08000f71 	.word	0x08000f71
 8000ef4:	08000fb9 	.word	0x08000fb9
 8000ef8:	08001001 	.word	0x08001001
 8000efc:	08001049 	.word	0x08001049
 8000f00:	08001091 	.word	0x08001091
 8000f04:	080010d9 	.word	0x080010d9
 8000f08:	08001121 	.word	0x08001121
 8000f0c:	08001169 	.word	0x08001169
 8000f10:	080011b1 	.word	0x080011b1
 8000f14:	0800128d 	.word	0x0800128d
 8000f18:	0800128d 	.word	0x0800128d
 8000f1c:	080011f9 	.word	0x080011f9
 8000f20:	0800128d 	.word	0x0800128d
 8000f24:	08001245 	.word	0x08001245
	case 0:
	  HAL_GPIO_WritePin(GPIOB, SEG0_Pin, RESET);
 8000f28:	2200      	movs	r2, #0
 8000f2a:	2101      	movs	r1, #1
 8000f2c:	48c4      	ldr	r0, [pc, #784]	; (8001240 <display7SEG+0x36c>)
 8000f2e:	f000 fcde 	bl	80018ee <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, SEG1_Pin, RESET);
 8000f32:	2200      	movs	r2, #0
 8000f34:	2102      	movs	r1, #2
 8000f36:	48c2      	ldr	r0, [pc, #776]	; (8001240 <display7SEG+0x36c>)
 8000f38:	f000 fcd9 	bl	80018ee <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, SEG2_Pin, RESET);
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	2104      	movs	r1, #4
 8000f40:	48bf      	ldr	r0, [pc, #764]	; (8001240 <display7SEG+0x36c>)
 8000f42:	f000 fcd4 	bl	80018ee <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, SEG3_Pin, RESET);
 8000f46:	2200      	movs	r2, #0
 8000f48:	2108      	movs	r1, #8
 8000f4a:	48bd      	ldr	r0, [pc, #756]	; (8001240 <display7SEG+0x36c>)
 8000f4c:	f000 fccf 	bl	80018ee <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, SEG4_Pin, RESET);
 8000f50:	2200      	movs	r2, #0
 8000f52:	2110      	movs	r1, #16
 8000f54:	48ba      	ldr	r0, [pc, #744]	; (8001240 <display7SEG+0x36c>)
 8000f56:	f000 fcca 	bl	80018ee <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, SEG5_Pin, RESET);
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	2120      	movs	r1, #32
 8000f5e:	48b8      	ldr	r0, [pc, #736]	; (8001240 <display7SEG+0x36c>)
 8000f60:	f000 fcc5 	bl	80018ee <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, SEG6_Pin, SET);
 8000f64:	2201      	movs	r2, #1
 8000f66:	2140      	movs	r1, #64	; 0x40
 8000f68:	48b5      	ldr	r0, [pc, #724]	; (8001240 <display7SEG+0x36c>)
 8000f6a:	f000 fcc0 	bl	80018ee <HAL_GPIO_WritePin>
	  break;
 8000f6e:	e18e      	b.n	800128e <display7SEG+0x3ba>
	case 1:
	  HAL_GPIO_WritePin(GPIOB, SEG0_Pin, SET);
 8000f70:	2201      	movs	r2, #1
 8000f72:	2101      	movs	r1, #1
 8000f74:	48b2      	ldr	r0, [pc, #712]	; (8001240 <display7SEG+0x36c>)
 8000f76:	f000 fcba 	bl	80018ee <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, SEG1_Pin, RESET);
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	2102      	movs	r1, #2
 8000f7e:	48b0      	ldr	r0, [pc, #704]	; (8001240 <display7SEG+0x36c>)
 8000f80:	f000 fcb5 	bl	80018ee <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, SEG2_Pin, RESET);
 8000f84:	2200      	movs	r2, #0
 8000f86:	2104      	movs	r1, #4
 8000f88:	48ad      	ldr	r0, [pc, #692]	; (8001240 <display7SEG+0x36c>)
 8000f8a:	f000 fcb0 	bl	80018ee <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, SEG3_Pin, SET);
 8000f8e:	2201      	movs	r2, #1
 8000f90:	2108      	movs	r1, #8
 8000f92:	48ab      	ldr	r0, [pc, #684]	; (8001240 <display7SEG+0x36c>)
 8000f94:	f000 fcab 	bl	80018ee <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, SEG4_Pin, SET);
 8000f98:	2201      	movs	r2, #1
 8000f9a:	2110      	movs	r1, #16
 8000f9c:	48a8      	ldr	r0, [pc, #672]	; (8001240 <display7SEG+0x36c>)
 8000f9e:	f000 fca6 	bl	80018ee <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, SEG5_Pin, SET);
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	2120      	movs	r1, #32
 8000fa6:	48a6      	ldr	r0, [pc, #664]	; (8001240 <display7SEG+0x36c>)
 8000fa8:	f000 fca1 	bl	80018ee <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, SEG6_Pin, SET);
 8000fac:	2201      	movs	r2, #1
 8000fae:	2140      	movs	r1, #64	; 0x40
 8000fb0:	48a3      	ldr	r0, [pc, #652]	; (8001240 <display7SEG+0x36c>)
 8000fb2:	f000 fc9c 	bl	80018ee <HAL_GPIO_WritePin>
	  break;
 8000fb6:	e16a      	b.n	800128e <display7SEG+0x3ba>
	case 2:
	  HAL_GPIO_WritePin(GPIOB, SEG0_Pin, RESET);
 8000fb8:	2200      	movs	r2, #0
 8000fba:	2101      	movs	r1, #1
 8000fbc:	48a0      	ldr	r0, [pc, #640]	; (8001240 <display7SEG+0x36c>)
 8000fbe:	f000 fc96 	bl	80018ee <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, SEG1_Pin, RESET);
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	2102      	movs	r1, #2
 8000fc6:	489e      	ldr	r0, [pc, #632]	; (8001240 <display7SEG+0x36c>)
 8000fc8:	f000 fc91 	bl	80018ee <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, SEG2_Pin, SET);
 8000fcc:	2201      	movs	r2, #1
 8000fce:	2104      	movs	r1, #4
 8000fd0:	489b      	ldr	r0, [pc, #620]	; (8001240 <display7SEG+0x36c>)
 8000fd2:	f000 fc8c 	bl	80018ee <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, SEG3_Pin, RESET);
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	2108      	movs	r1, #8
 8000fda:	4899      	ldr	r0, [pc, #612]	; (8001240 <display7SEG+0x36c>)
 8000fdc:	f000 fc87 	bl	80018ee <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, SEG4_Pin, RESET);
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	2110      	movs	r1, #16
 8000fe4:	4896      	ldr	r0, [pc, #600]	; (8001240 <display7SEG+0x36c>)
 8000fe6:	f000 fc82 	bl	80018ee <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, SEG5_Pin, SET);
 8000fea:	2201      	movs	r2, #1
 8000fec:	2120      	movs	r1, #32
 8000fee:	4894      	ldr	r0, [pc, #592]	; (8001240 <display7SEG+0x36c>)
 8000ff0:	f000 fc7d 	bl	80018ee <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, SEG6_Pin, RESET);
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	2140      	movs	r1, #64	; 0x40
 8000ff8:	4891      	ldr	r0, [pc, #580]	; (8001240 <display7SEG+0x36c>)
 8000ffa:	f000 fc78 	bl	80018ee <HAL_GPIO_WritePin>
	  break;
 8000ffe:	e146      	b.n	800128e <display7SEG+0x3ba>
	case 3:
	  HAL_GPIO_WritePin(GPIOB, SEG0_Pin, RESET);
 8001000:	2200      	movs	r2, #0
 8001002:	2101      	movs	r1, #1
 8001004:	488e      	ldr	r0, [pc, #568]	; (8001240 <display7SEG+0x36c>)
 8001006:	f000 fc72 	bl	80018ee <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, SEG1_Pin, RESET);
 800100a:	2200      	movs	r2, #0
 800100c:	2102      	movs	r1, #2
 800100e:	488c      	ldr	r0, [pc, #560]	; (8001240 <display7SEG+0x36c>)
 8001010:	f000 fc6d 	bl	80018ee <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, SEG2_Pin, RESET);
 8001014:	2200      	movs	r2, #0
 8001016:	2104      	movs	r1, #4
 8001018:	4889      	ldr	r0, [pc, #548]	; (8001240 <display7SEG+0x36c>)
 800101a:	f000 fc68 	bl	80018ee <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, SEG3_Pin, RESET);
 800101e:	2200      	movs	r2, #0
 8001020:	2108      	movs	r1, #8
 8001022:	4887      	ldr	r0, [pc, #540]	; (8001240 <display7SEG+0x36c>)
 8001024:	f000 fc63 	bl	80018ee <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, SEG4_Pin, SET);
 8001028:	2201      	movs	r2, #1
 800102a:	2110      	movs	r1, #16
 800102c:	4884      	ldr	r0, [pc, #528]	; (8001240 <display7SEG+0x36c>)
 800102e:	f000 fc5e 	bl	80018ee <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, SEG5_Pin, SET);
 8001032:	2201      	movs	r2, #1
 8001034:	2120      	movs	r1, #32
 8001036:	4882      	ldr	r0, [pc, #520]	; (8001240 <display7SEG+0x36c>)
 8001038:	f000 fc59 	bl	80018ee <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, SEG6_Pin, RESET);
 800103c:	2200      	movs	r2, #0
 800103e:	2140      	movs	r1, #64	; 0x40
 8001040:	487f      	ldr	r0, [pc, #508]	; (8001240 <display7SEG+0x36c>)
 8001042:	f000 fc54 	bl	80018ee <HAL_GPIO_WritePin>
	  break;
 8001046:	e122      	b.n	800128e <display7SEG+0x3ba>
	case 4:
	  HAL_GPIO_WritePin(GPIOB, SEG0_Pin, SET);
 8001048:	2201      	movs	r2, #1
 800104a:	2101      	movs	r1, #1
 800104c:	487c      	ldr	r0, [pc, #496]	; (8001240 <display7SEG+0x36c>)
 800104e:	f000 fc4e 	bl	80018ee <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, SEG1_Pin, RESET);
 8001052:	2200      	movs	r2, #0
 8001054:	2102      	movs	r1, #2
 8001056:	487a      	ldr	r0, [pc, #488]	; (8001240 <display7SEG+0x36c>)
 8001058:	f000 fc49 	bl	80018ee <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, SEG2_Pin, RESET);
 800105c:	2200      	movs	r2, #0
 800105e:	2104      	movs	r1, #4
 8001060:	4877      	ldr	r0, [pc, #476]	; (8001240 <display7SEG+0x36c>)
 8001062:	f000 fc44 	bl	80018ee <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, SEG3_Pin, SET);
 8001066:	2201      	movs	r2, #1
 8001068:	2108      	movs	r1, #8
 800106a:	4875      	ldr	r0, [pc, #468]	; (8001240 <display7SEG+0x36c>)
 800106c:	f000 fc3f 	bl	80018ee <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, SEG4_Pin, SET);
 8001070:	2201      	movs	r2, #1
 8001072:	2110      	movs	r1, #16
 8001074:	4872      	ldr	r0, [pc, #456]	; (8001240 <display7SEG+0x36c>)
 8001076:	f000 fc3a 	bl	80018ee <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, SEG5_Pin, RESET);
 800107a:	2200      	movs	r2, #0
 800107c:	2120      	movs	r1, #32
 800107e:	4870      	ldr	r0, [pc, #448]	; (8001240 <display7SEG+0x36c>)
 8001080:	f000 fc35 	bl	80018ee <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, SEG6_Pin, RESET);
 8001084:	2200      	movs	r2, #0
 8001086:	2140      	movs	r1, #64	; 0x40
 8001088:	486d      	ldr	r0, [pc, #436]	; (8001240 <display7SEG+0x36c>)
 800108a:	f000 fc30 	bl	80018ee <HAL_GPIO_WritePin>
	  break;
 800108e:	e0fe      	b.n	800128e <display7SEG+0x3ba>
	case 5:
	  HAL_GPIO_WritePin(GPIOB, SEG0_Pin, RESET);
 8001090:	2200      	movs	r2, #0
 8001092:	2101      	movs	r1, #1
 8001094:	486a      	ldr	r0, [pc, #424]	; (8001240 <display7SEG+0x36c>)
 8001096:	f000 fc2a 	bl	80018ee <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, SEG1_Pin, SET);
 800109a:	2201      	movs	r2, #1
 800109c:	2102      	movs	r1, #2
 800109e:	4868      	ldr	r0, [pc, #416]	; (8001240 <display7SEG+0x36c>)
 80010a0:	f000 fc25 	bl	80018ee <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, SEG2_Pin, RESET);
 80010a4:	2200      	movs	r2, #0
 80010a6:	2104      	movs	r1, #4
 80010a8:	4865      	ldr	r0, [pc, #404]	; (8001240 <display7SEG+0x36c>)
 80010aa:	f000 fc20 	bl	80018ee <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, SEG3_Pin, RESET);
 80010ae:	2200      	movs	r2, #0
 80010b0:	2108      	movs	r1, #8
 80010b2:	4863      	ldr	r0, [pc, #396]	; (8001240 <display7SEG+0x36c>)
 80010b4:	f000 fc1b 	bl	80018ee <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, SEG4_Pin, SET);
 80010b8:	2201      	movs	r2, #1
 80010ba:	2110      	movs	r1, #16
 80010bc:	4860      	ldr	r0, [pc, #384]	; (8001240 <display7SEG+0x36c>)
 80010be:	f000 fc16 	bl	80018ee <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, SEG5_Pin, RESET);
 80010c2:	2200      	movs	r2, #0
 80010c4:	2120      	movs	r1, #32
 80010c6:	485e      	ldr	r0, [pc, #376]	; (8001240 <display7SEG+0x36c>)
 80010c8:	f000 fc11 	bl	80018ee <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, SEG6_Pin, RESET);
 80010cc:	2200      	movs	r2, #0
 80010ce:	2140      	movs	r1, #64	; 0x40
 80010d0:	485b      	ldr	r0, [pc, #364]	; (8001240 <display7SEG+0x36c>)
 80010d2:	f000 fc0c 	bl	80018ee <HAL_GPIO_WritePin>
	  break;
 80010d6:	e0da      	b.n	800128e <display7SEG+0x3ba>
	case 6:
	  HAL_GPIO_WritePin(GPIOB, SEG0_Pin, RESET);
 80010d8:	2200      	movs	r2, #0
 80010da:	2101      	movs	r1, #1
 80010dc:	4858      	ldr	r0, [pc, #352]	; (8001240 <display7SEG+0x36c>)
 80010de:	f000 fc06 	bl	80018ee <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, SEG1_Pin, SET);
 80010e2:	2201      	movs	r2, #1
 80010e4:	2102      	movs	r1, #2
 80010e6:	4856      	ldr	r0, [pc, #344]	; (8001240 <display7SEG+0x36c>)
 80010e8:	f000 fc01 	bl	80018ee <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, SEG2_Pin, RESET);
 80010ec:	2200      	movs	r2, #0
 80010ee:	2104      	movs	r1, #4
 80010f0:	4853      	ldr	r0, [pc, #332]	; (8001240 <display7SEG+0x36c>)
 80010f2:	f000 fbfc 	bl	80018ee <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, SEG3_Pin, RESET);
 80010f6:	2200      	movs	r2, #0
 80010f8:	2108      	movs	r1, #8
 80010fa:	4851      	ldr	r0, [pc, #324]	; (8001240 <display7SEG+0x36c>)
 80010fc:	f000 fbf7 	bl	80018ee <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, SEG4_Pin, RESET);
 8001100:	2200      	movs	r2, #0
 8001102:	2110      	movs	r1, #16
 8001104:	484e      	ldr	r0, [pc, #312]	; (8001240 <display7SEG+0x36c>)
 8001106:	f000 fbf2 	bl	80018ee <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, SEG5_Pin, RESET);
 800110a:	2200      	movs	r2, #0
 800110c:	2120      	movs	r1, #32
 800110e:	484c      	ldr	r0, [pc, #304]	; (8001240 <display7SEG+0x36c>)
 8001110:	f000 fbed 	bl	80018ee <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, SEG6_Pin, RESET);
 8001114:	2200      	movs	r2, #0
 8001116:	2140      	movs	r1, #64	; 0x40
 8001118:	4849      	ldr	r0, [pc, #292]	; (8001240 <display7SEG+0x36c>)
 800111a:	f000 fbe8 	bl	80018ee <HAL_GPIO_WritePin>
	  break;
 800111e:	e0b6      	b.n	800128e <display7SEG+0x3ba>
	case 7:
	  HAL_GPIO_WritePin(GPIOB, SEG0_Pin, RESET);
 8001120:	2200      	movs	r2, #0
 8001122:	2101      	movs	r1, #1
 8001124:	4846      	ldr	r0, [pc, #280]	; (8001240 <display7SEG+0x36c>)
 8001126:	f000 fbe2 	bl	80018ee <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, SEG1_Pin, RESET);
 800112a:	2200      	movs	r2, #0
 800112c:	2102      	movs	r1, #2
 800112e:	4844      	ldr	r0, [pc, #272]	; (8001240 <display7SEG+0x36c>)
 8001130:	f000 fbdd 	bl	80018ee <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, SEG2_Pin, RESET);
 8001134:	2200      	movs	r2, #0
 8001136:	2104      	movs	r1, #4
 8001138:	4841      	ldr	r0, [pc, #260]	; (8001240 <display7SEG+0x36c>)
 800113a:	f000 fbd8 	bl	80018ee <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, SEG3_Pin, SET);
 800113e:	2201      	movs	r2, #1
 8001140:	2108      	movs	r1, #8
 8001142:	483f      	ldr	r0, [pc, #252]	; (8001240 <display7SEG+0x36c>)
 8001144:	f000 fbd3 	bl	80018ee <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, SEG4_Pin, SET);
 8001148:	2201      	movs	r2, #1
 800114a:	2110      	movs	r1, #16
 800114c:	483c      	ldr	r0, [pc, #240]	; (8001240 <display7SEG+0x36c>)
 800114e:	f000 fbce 	bl	80018ee <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, SEG5_Pin, SET);
 8001152:	2201      	movs	r2, #1
 8001154:	2120      	movs	r1, #32
 8001156:	483a      	ldr	r0, [pc, #232]	; (8001240 <display7SEG+0x36c>)
 8001158:	f000 fbc9 	bl	80018ee <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, SEG6_Pin, SET);
 800115c:	2201      	movs	r2, #1
 800115e:	2140      	movs	r1, #64	; 0x40
 8001160:	4837      	ldr	r0, [pc, #220]	; (8001240 <display7SEG+0x36c>)
 8001162:	f000 fbc4 	bl	80018ee <HAL_GPIO_WritePin>
	  break;
 8001166:	e092      	b.n	800128e <display7SEG+0x3ba>
	case 8:
	  HAL_GPIO_WritePin(GPIOB, SEG0_Pin, RESET);
 8001168:	2200      	movs	r2, #0
 800116a:	2101      	movs	r1, #1
 800116c:	4834      	ldr	r0, [pc, #208]	; (8001240 <display7SEG+0x36c>)
 800116e:	f000 fbbe 	bl	80018ee <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, SEG1_Pin, RESET);
 8001172:	2200      	movs	r2, #0
 8001174:	2102      	movs	r1, #2
 8001176:	4832      	ldr	r0, [pc, #200]	; (8001240 <display7SEG+0x36c>)
 8001178:	f000 fbb9 	bl	80018ee <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, SEG2_Pin, RESET);
 800117c:	2200      	movs	r2, #0
 800117e:	2104      	movs	r1, #4
 8001180:	482f      	ldr	r0, [pc, #188]	; (8001240 <display7SEG+0x36c>)
 8001182:	f000 fbb4 	bl	80018ee <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, SEG3_Pin, RESET);
 8001186:	2200      	movs	r2, #0
 8001188:	2108      	movs	r1, #8
 800118a:	482d      	ldr	r0, [pc, #180]	; (8001240 <display7SEG+0x36c>)
 800118c:	f000 fbaf 	bl	80018ee <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, SEG4_Pin, RESET);
 8001190:	2200      	movs	r2, #0
 8001192:	2110      	movs	r1, #16
 8001194:	482a      	ldr	r0, [pc, #168]	; (8001240 <display7SEG+0x36c>)
 8001196:	f000 fbaa 	bl	80018ee <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, SEG5_Pin, RESET);
 800119a:	2200      	movs	r2, #0
 800119c:	2120      	movs	r1, #32
 800119e:	4828      	ldr	r0, [pc, #160]	; (8001240 <display7SEG+0x36c>)
 80011a0:	f000 fba5 	bl	80018ee <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, SEG6_Pin, RESET);
 80011a4:	2200      	movs	r2, #0
 80011a6:	2140      	movs	r1, #64	; 0x40
 80011a8:	4825      	ldr	r0, [pc, #148]	; (8001240 <display7SEG+0x36c>)
 80011aa:	f000 fba0 	bl	80018ee <HAL_GPIO_WritePin>
	  break;
 80011ae:	e06e      	b.n	800128e <display7SEG+0x3ba>
	case 9:
	  HAL_GPIO_WritePin(GPIOB, SEG0_Pin, RESET);
 80011b0:	2200      	movs	r2, #0
 80011b2:	2101      	movs	r1, #1
 80011b4:	4822      	ldr	r0, [pc, #136]	; (8001240 <display7SEG+0x36c>)
 80011b6:	f000 fb9a 	bl	80018ee <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, SEG1_Pin, RESET);
 80011ba:	2200      	movs	r2, #0
 80011bc:	2102      	movs	r1, #2
 80011be:	4820      	ldr	r0, [pc, #128]	; (8001240 <display7SEG+0x36c>)
 80011c0:	f000 fb95 	bl	80018ee <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, SEG2_Pin, RESET);
 80011c4:	2200      	movs	r2, #0
 80011c6:	2104      	movs	r1, #4
 80011c8:	481d      	ldr	r0, [pc, #116]	; (8001240 <display7SEG+0x36c>)
 80011ca:	f000 fb90 	bl	80018ee <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, SEG3_Pin, RESET);
 80011ce:	2200      	movs	r2, #0
 80011d0:	2108      	movs	r1, #8
 80011d2:	481b      	ldr	r0, [pc, #108]	; (8001240 <display7SEG+0x36c>)
 80011d4:	f000 fb8b 	bl	80018ee <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, SEG4_Pin, SET);
 80011d8:	2201      	movs	r2, #1
 80011da:	2110      	movs	r1, #16
 80011dc:	4818      	ldr	r0, [pc, #96]	; (8001240 <display7SEG+0x36c>)
 80011de:	f000 fb86 	bl	80018ee <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, SEG5_Pin, RESET);
 80011e2:	2200      	movs	r2, #0
 80011e4:	2120      	movs	r1, #32
 80011e6:	4816      	ldr	r0, [pc, #88]	; (8001240 <display7SEG+0x36c>)
 80011e8:	f000 fb81 	bl	80018ee <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, SEG6_Pin, RESET);
 80011ec:	2200      	movs	r2, #0
 80011ee:	2140      	movs	r1, #64	; 0x40
 80011f0:	4813      	ldr	r0, [pc, #76]	; (8001240 <display7SEG+0x36c>)
 80011f2:	f000 fb7c 	bl	80018ee <HAL_GPIO_WritePin>
	  break;
 80011f6:	e04a      	b.n	800128e <display7SEG+0x3ba>
	case OFF:
	  HAL_GPIO_WritePin(GPIOB, SEG0_Pin, SET);
 80011f8:	2201      	movs	r2, #1
 80011fa:	2101      	movs	r1, #1
 80011fc:	4810      	ldr	r0, [pc, #64]	; (8001240 <display7SEG+0x36c>)
 80011fe:	f000 fb76 	bl	80018ee <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, SEG1_Pin, SET);
 8001202:	2201      	movs	r2, #1
 8001204:	2102      	movs	r1, #2
 8001206:	480e      	ldr	r0, [pc, #56]	; (8001240 <display7SEG+0x36c>)
 8001208:	f000 fb71 	bl	80018ee <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, SEG2_Pin, SET);
 800120c:	2201      	movs	r2, #1
 800120e:	2104      	movs	r1, #4
 8001210:	480b      	ldr	r0, [pc, #44]	; (8001240 <display7SEG+0x36c>)
 8001212:	f000 fb6c 	bl	80018ee <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, SEG3_Pin, SET);
 8001216:	2201      	movs	r2, #1
 8001218:	2108      	movs	r1, #8
 800121a:	4809      	ldr	r0, [pc, #36]	; (8001240 <display7SEG+0x36c>)
 800121c:	f000 fb67 	bl	80018ee <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, SEG4_Pin, SET);
 8001220:	2201      	movs	r2, #1
 8001222:	2110      	movs	r1, #16
 8001224:	4806      	ldr	r0, [pc, #24]	; (8001240 <display7SEG+0x36c>)
 8001226:	f000 fb62 	bl	80018ee <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, SEG5_Pin, SET);
 800122a:	2201      	movs	r2, #1
 800122c:	2120      	movs	r1, #32
 800122e:	4804      	ldr	r0, [pc, #16]	; (8001240 <display7SEG+0x36c>)
 8001230:	f000 fb5d 	bl	80018ee <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, SEG6_Pin, SET);
 8001234:	2201      	movs	r2, #1
 8001236:	2140      	movs	r1, #64	; 0x40
 8001238:	4801      	ldr	r0, [pc, #4]	; (8001240 <display7SEG+0x36c>)
 800123a:	f000 fb58 	bl	80018ee <HAL_GPIO_WritePin>
	  break;
 800123e:	e026      	b.n	800128e <display7SEG+0x3ba>
 8001240:	40010c00 	.word	0x40010c00
	case USER:
	  HAL_GPIO_WritePin(GPIOB, SEG0_Pin, SET);
 8001244:	2201      	movs	r2, #1
 8001246:	2101      	movs	r1, #1
 8001248:	4813      	ldr	r0, [pc, #76]	; (8001298 <display7SEG+0x3c4>)
 800124a:	f000 fb50 	bl	80018ee <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, SEG1_Pin, RESET);
 800124e:	2200      	movs	r2, #0
 8001250:	2102      	movs	r1, #2
 8001252:	4811      	ldr	r0, [pc, #68]	; (8001298 <display7SEG+0x3c4>)
 8001254:	f000 fb4b 	bl	80018ee <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, SEG2_Pin, RESET);
 8001258:	2200      	movs	r2, #0
 800125a:	2104      	movs	r1, #4
 800125c:	480e      	ldr	r0, [pc, #56]	; (8001298 <display7SEG+0x3c4>)
 800125e:	f000 fb46 	bl	80018ee <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, SEG3_Pin, RESET);
 8001262:	2200      	movs	r2, #0
 8001264:	2108      	movs	r1, #8
 8001266:	480c      	ldr	r0, [pc, #48]	; (8001298 <display7SEG+0x3c4>)
 8001268:	f000 fb41 	bl	80018ee <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, SEG4_Pin, RESET);
 800126c:	2200      	movs	r2, #0
 800126e:	2110      	movs	r1, #16
 8001270:	4809      	ldr	r0, [pc, #36]	; (8001298 <display7SEG+0x3c4>)
 8001272:	f000 fb3c 	bl	80018ee <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, SEG5_Pin, RESET);
 8001276:	2200      	movs	r2, #0
 8001278:	2120      	movs	r1, #32
 800127a:	4807      	ldr	r0, [pc, #28]	; (8001298 <display7SEG+0x3c4>)
 800127c:	f000 fb37 	bl	80018ee <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, SEG6_Pin, SET);
 8001280:	2201      	movs	r2, #1
 8001282:	2140      	movs	r1, #64	; 0x40
 8001284:	4804      	ldr	r0, [pc, #16]	; (8001298 <display7SEG+0x3c4>)
 8001286:	f000 fb32 	bl	80018ee <HAL_GPIO_WritePin>
	  break;
 800128a:	e000      	b.n	800128e <display7SEG+0x3ba>
	default:
	  break;
 800128c:	bf00      	nop
  }
}
 800128e:	bf00      	nop
 8001290:	3708      	adds	r7, #8
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	40010c00 	.word	0x40010c00

0800129c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800129c:	f7ff fd00 	bl	8000ca0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012a0:	480b      	ldr	r0, [pc, #44]	; (80012d0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80012a2:	490c      	ldr	r1, [pc, #48]	; (80012d4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80012a4:	4a0c      	ldr	r2, [pc, #48]	; (80012d8 <LoopFillZerobss+0x16>)
  movs r3, #0
 80012a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012a8:	e002      	b.n	80012b0 <LoopCopyDataInit>

080012aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012ae:	3304      	adds	r3, #4

080012b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012b4:	d3f9      	bcc.n	80012aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012b6:	4a09      	ldr	r2, [pc, #36]	; (80012dc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80012b8:	4c09      	ldr	r4, [pc, #36]	; (80012e0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80012ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012bc:	e001      	b.n	80012c2 <LoopFillZerobss>

080012be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012c0:	3204      	adds	r2, #4

080012c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012c4:	d3fb      	bcc.n	80012be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80012c6:	f001 fb11 	bl	80028ec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80012ca:	f7ff fafb 	bl	80008c4 <main>
  bx lr
 80012ce:	4770      	bx	lr
  ldr r0, =_sdata
 80012d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012d4:	200000c8 	.word	0x200000c8
  ldr r2, =_sidata
 80012d8:	08002978 	.word	0x08002978
  ldr r2, =_sbss
 80012dc:	200000c8 	.word	0x200000c8
  ldr r4, =_ebss
 80012e0:	20000174 	.word	0x20000174

080012e4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80012e4:	e7fe      	b.n	80012e4 <ADC1_2_IRQHandler>
	...

080012e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012ec:	4b08      	ldr	r3, [pc, #32]	; (8001310 <HAL_Init+0x28>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4a07      	ldr	r2, [pc, #28]	; (8001310 <HAL_Init+0x28>)
 80012f2:	f043 0310 	orr.w	r3, r3, #16
 80012f6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012f8:	2003      	movs	r0, #3
 80012fa:	f000 f923 	bl	8001544 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012fe:	200f      	movs	r0, #15
 8001300:	f000 f808 	bl	8001314 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001304:	f7ff fc44 	bl	8000b90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001308:	2300      	movs	r3, #0
}
 800130a:	4618      	mov	r0, r3
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	40022000 	.word	0x40022000

08001314 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800131c:	4b12      	ldr	r3, [pc, #72]	; (8001368 <HAL_InitTick+0x54>)
 800131e:	681a      	ldr	r2, [r3, #0]
 8001320:	4b12      	ldr	r3, [pc, #72]	; (800136c <HAL_InitTick+0x58>)
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	4619      	mov	r1, r3
 8001326:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800132a:	fbb3 f3f1 	udiv	r3, r3, r1
 800132e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001332:	4618      	mov	r0, r3
 8001334:	f000 f93b 	bl	80015ae <HAL_SYSTICK_Config>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800133e:	2301      	movs	r3, #1
 8001340:	e00e      	b.n	8001360 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	2b0f      	cmp	r3, #15
 8001346:	d80a      	bhi.n	800135e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001348:	2200      	movs	r2, #0
 800134a:	6879      	ldr	r1, [r7, #4]
 800134c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001350:	f000 f903 	bl	800155a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001354:	4a06      	ldr	r2, [pc, #24]	; (8001370 <HAL_InitTick+0x5c>)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800135a:	2300      	movs	r3, #0
 800135c:	e000      	b.n	8001360 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800135e:	2301      	movs	r3, #1
}
 8001360:	4618      	mov	r0, r3
 8001362:	3708      	adds	r7, #8
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}
 8001368:	200000b0 	.word	0x200000b0
 800136c:	200000c4 	.word	0x200000c4
 8001370:	200000c0 	.word	0x200000c0

08001374 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001378:	4b05      	ldr	r3, [pc, #20]	; (8001390 <HAL_IncTick+0x1c>)
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	461a      	mov	r2, r3
 800137e:	4b05      	ldr	r3, [pc, #20]	; (8001394 <HAL_IncTick+0x20>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4413      	add	r3, r2
 8001384:	4a03      	ldr	r2, [pc, #12]	; (8001394 <HAL_IncTick+0x20>)
 8001386:	6013      	str	r3, [r2, #0]
}
 8001388:	bf00      	nop
 800138a:	46bd      	mov	sp, r7
 800138c:	bc80      	pop	{r7}
 800138e:	4770      	bx	lr
 8001390:	200000c4 	.word	0x200000c4
 8001394:	20000170 	.word	0x20000170

08001398 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0
  return uwTick;
 800139c:	4b02      	ldr	r3, [pc, #8]	; (80013a8 <HAL_GetTick+0x10>)
 800139e:	681b      	ldr	r3, [r3, #0]
}
 80013a0:	4618      	mov	r0, r3
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bc80      	pop	{r7}
 80013a6:	4770      	bx	lr
 80013a8:	20000170 	.word	0x20000170

080013ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b085      	sub	sp, #20
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	f003 0307 	and.w	r3, r3, #7
 80013ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013bc:	4b0c      	ldr	r3, [pc, #48]	; (80013f0 <__NVIC_SetPriorityGrouping+0x44>)
 80013be:	68db      	ldr	r3, [r3, #12]
 80013c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013c2:	68ba      	ldr	r2, [r7, #8]
 80013c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013c8:	4013      	ands	r3, r2
 80013ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013d0:	68bb      	ldr	r3, [r7, #8]
 80013d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013de:	4a04      	ldr	r2, [pc, #16]	; (80013f0 <__NVIC_SetPriorityGrouping+0x44>)
 80013e0:	68bb      	ldr	r3, [r7, #8]
 80013e2:	60d3      	str	r3, [r2, #12]
}
 80013e4:	bf00      	nop
 80013e6:	3714      	adds	r7, #20
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bc80      	pop	{r7}
 80013ec:	4770      	bx	lr
 80013ee:	bf00      	nop
 80013f0:	e000ed00 	.word	0xe000ed00

080013f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013f8:	4b04      	ldr	r3, [pc, #16]	; (800140c <__NVIC_GetPriorityGrouping+0x18>)
 80013fa:	68db      	ldr	r3, [r3, #12]
 80013fc:	0a1b      	lsrs	r3, r3, #8
 80013fe:	f003 0307 	and.w	r3, r3, #7
}
 8001402:	4618      	mov	r0, r3
 8001404:	46bd      	mov	sp, r7
 8001406:	bc80      	pop	{r7}
 8001408:	4770      	bx	lr
 800140a:	bf00      	nop
 800140c:	e000ed00 	.word	0xe000ed00

08001410 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001410:	b480      	push	{r7}
 8001412:	b083      	sub	sp, #12
 8001414:	af00      	add	r7, sp, #0
 8001416:	4603      	mov	r3, r0
 8001418:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800141a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800141e:	2b00      	cmp	r3, #0
 8001420:	db0b      	blt.n	800143a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001422:	79fb      	ldrb	r3, [r7, #7]
 8001424:	f003 021f 	and.w	r2, r3, #31
 8001428:	4906      	ldr	r1, [pc, #24]	; (8001444 <__NVIC_EnableIRQ+0x34>)
 800142a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800142e:	095b      	lsrs	r3, r3, #5
 8001430:	2001      	movs	r0, #1
 8001432:	fa00 f202 	lsl.w	r2, r0, r2
 8001436:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800143a:	bf00      	nop
 800143c:	370c      	adds	r7, #12
 800143e:	46bd      	mov	sp, r7
 8001440:	bc80      	pop	{r7}
 8001442:	4770      	bx	lr
 8001444:	e000e100 	.word	0xe000e100

08001448 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001448:	b480      	push	{r7}
 800144a:	b083      	sub	sp, #12
 800144c:	af00      	add	r7, sp, #0
 800144e:	4603      	mov	r3, r0
 8001450:	6039      	str	r1, [r7, #0]
 8001452:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001454:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001458:	2b00      	cmp	r3, #0
 800145a:	db0a      	blt.n	8001472 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	b2da      	uxtb	r2, r3
 8001460:	490c      	ldr	r1, [pc, #48]	; (8001494 <__NVIC_SetPriority+0x4c>)
 8001462:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001466:	0112      	lsls	r2, r2, #4
 8001468:	b2d2      	uxtb	r2, r2
 800146a:	440b      	add	r3, r1
 800146c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001470:	e00a      	b.n	8001488 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	b2da      	uxtb	r2, r3
 8001476:	4908      	ldr	r1, [pc, #32]	; (8001498 <__NVIC_SetPriority+0x50>)
 8001478:	79fb      	ldrb	r3, [r7, #7]
 800147a:	f003 030f 	and.w	r3, r3, #15
 800147e:	3b04      	subs	r3, #4
 8001480:	0112      	lsls	r2, r2, #4
 8001482:	b2d2      	uxtb	r2, r2
 8001484:	440b      	add	r3, r1
 8001486:	761a      	strb	r2, [r3, #24]
}
 8001488:	bf00      	nop
 800148a:	370c      	adds	r7, #12
 800148c:	46bd      	mov	sp, r7
 800148e:	bc80      	pop	{r7}
 8001490:	4770      	bx	lr
 8001492:	bf00      	nop
 8001494:	e000e100 	.word	0xe000e100
 8001498:	e000ed00 	.word	0xe000ed00

0800149c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800149c:	b480      	push	{r7}
 800149e:	b089      	sub	sp, #36	; 0x24
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	60f8      	str	r0, [r7, #12]
 80014a4:	60b9      	str	r1, [r7, #8]
 80014a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	f003 0307 	and.w	r3, r3, #7
 80014ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014b0:	69fb      	ldr	r3, [r7, #28]
 80014b2:	f1c3 0307 	rsb	r3, r3, #7
 80014b6:	2b04      	cmp	r3, #4
 80014b8:	bf28      	it	cs
 80014ba:	2304      	movcs	r3, #4
 80014bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014be:	69fb      	ldr	r3, [r7, #28]
 80014c0:	3304      	adds	r3, #4
 80014c2:	2b06      	cmp	r3, #6
 80014c4:	d902      	bls.n	80014cc <NVIC_EncodePriority+0x30>
 80014c6:	69fb      	ldr	r3, [r7, #28]
 80014c8:	3b03      	subs	r3, #3
 80014ca:	e000      	b.n	80014ce <NVIC_EncodePriority+0x32>
 80014cc:	2300      	movs	r3, #0
 80014ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80014d4:	69bb      	ldr	r3, [r7, #24]
 80014d6:	fa02 f303 	lsl.w	r3, r2, r3
 80014da:	43da      	mvns	r2, r3
 80014dc:	68bb      	ldr	r3, [r7, #8]
 80014de:	401a      	ands	r2, r3
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014e4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	fa01 f303 	lsl.w	r3, r1, r3
 80014ee:	43d9      	mvns	r1, r3
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014f4:	4313      	orrs	r3, r2
         );
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	3724      	adds	r7, #36	; 0x24
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bc80      	pop	{r7}
 80014fe:	4770      	bx	lr

08001500 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b082      	sub	sp, #8
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	3b01      	subs	r3, #1
 800150c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001510:	d301      	bcc.n	8001516 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001512:	2301      	movs	r3, #1
 8001514:	e00f      	b.n	8001536 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001516:	4a0a      	ldr	r2, [pc, #40]	; (8001540 <SysTick_Config+0x40>)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	3b01      	subs	r3, #1
 800151c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800151e:	210f      	movs	r1, #15
 8001520:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001524:	f7ff ff90 	bl	8001448 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001528:	4b05      	ldr	r3, [pc, #20]	; (8001540 <SysTick_Config+0x40>)
 800152a:	2200      	movs	r2, #0
 800152c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800152e:	4b04      	ldr	r3, [pc, #16]	; (8001540 <SysTick_Config+0x40>)
 8001530:	2207      	movs	r2, #7
 8001532:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001534:	2300      	movs	r3, #0
}
 8001536:	4618      	mov	r0, r3
 8001538:	3708      	adds	r7, #8
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	e000e010 	.word	0xe000e010

08001544 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b082      	sub	sp, #8
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800154c:	6878      	ldr	r0, [r7, #4]
 800154e:	f7ff ff2d 	bl	80013ac <__NVIC_SetPriorityGrouping>
}
 8001552:	bf00      	nop
 8001554:	3708      	adds	r7, #8
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}

0800155a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800155a:	b580      	push	{r7, lr}
 800155c:	b086      	sub	sp, #24
 800155e:	af00      	add	r7, sp, #0
 8001560:	4603      	mov	r3, r0
 8001562:	60b9      	str	r1, [r7, #8]
 8001564:	607a      	str	r2, [r7, #4]
 8001566:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001568:	2300      	movs	r3, #0
 800156a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800156c:	f7ff ff42 	bl	80013f4 <__NVIC_GetPriorityGrouping>
 8001570:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001572:	687a      	ldr	r2, [r7, #4]
 8001574:	68b9      	ldr	r1, [r7, #8]
 8001576:	6978      	ldr	r0, [r7, #20]
 8001578:	f7ff ff90 	bl	800149c <NVIC_EncodePriority>
 800157c:	4602      	mov	r2, r0
 800157e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001582:	4611      	mov	r1, r2
 8001584:	4618      	mov	r0, r3
 8001586:	f7ff ff5f 	bl	8001448 <__NVIC_SetPriority>
}
 800158a:	bf00      	nop
 800158c:	3718      	adds	r7, #24
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}

08001592 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001592:	b580      	push	{r7, lr}
 8001594:	b082      	sub	sp, #8
 8001596:	af00      	add	r7, sp, #0
 8001598:	4603      	mov	r3, r0
 800159a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800159c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015a0:	4618      	mov	r0, r3
 80015a2:	f7ff ff35 	bl	8001410 <__NVIC_EnableIRQ>
}
 80015a6:	bf00      	nop
 80015a8:	3708      	adds	r7, #8
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}

080015ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015ae:	b580      	push	{r7, lr}
 80015b0:	b082      	sub	sp, #8
 80015b2:	af00      	add	r7, sp, #0
 80015b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015b6:	6878      	ldr	r0, [r7, #4]
 80015b8:	f7ff ffa2 	bl	8001500 <SysTick_Config>
 80015bc:	4603      	mov	r3, r0
}
 80015be:	4618      	mov	r0, r3
 80015c0:	3708      	adds	r7, #8
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
	...

080015c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b08b      	sub	sp, #44	; 0x2c
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
 80015d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80015d2:	2300      	movs	r3, #0
 80015d4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80015d6:	2300      	movs	r3, #0
 80015d8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015da:	e161      	b.n	80018a0 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80015dc:	2201      	movs	r2, #1
 80015de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e0:	fa02 f303 	lsl.w	r3, r2, r3
 80015e4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	69fa      	ldr	r2, [r7, #28]
 80015ec:	4013      	ands	r3, r2
 80015ee:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80015f0:	69ba      	ldr	r2, [r7, #24]
 80015f2:	69fb      	ldr	r3, [r7, #28]
 80015f4:	429a      	cmp	r2, r3
 80015f6:	f040 8150 	bne.w	800189a <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	4a97      	ldr	r2, [pc, #604]	; (800185c <HAL_GPIO_Init+0x294>)
 8001600:	4293      	cmp	r3, r2
 8001602:	d05e      	beq.n	80016c2 <HAL_GPIO_Init+0xfa>
 8001604:	4a95      	ldr	r2, [pc, #596]	; (800185c <HAL_GPIO_Init+0x294>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d875      	bhi.n	80016f6 <HAL_GPIO_Init+0x12e>
 800160a:	4a95      	ldr	r2, [pc, #596]	; (8001860 <HAL_GPIO_Init+0x298>)
 800160c:	4293      	cmp	r3, r2
 800160e:	d058      	beq.n	80016c2 <HAL_GPIO_Init+0xfa>
 8001610:	4a93      	ldr	r2, [pc, #588]	; (8001860 <HAL_GPIO_Init+0x298>)
 8001612:	4293      	cmp	r3, r2
 8001614:	d86f      	bhi.n	80016f6 <HAL_GPIO_Init+0x12e>
 8001616:	4a93      	ldr	r2, [pc, #588]	; (8001864 <HAL_GPIO_Init+0x29c>)
 8001618:	4293      	cmp	r3, r2
 800161a:	d052      	beq.n	80016c2 <HAL_GPIO_Init+0xfa>
 800161c:	4a91      	ldr	r2, [pc, #580]	; (8001864 <HAL_GPIO_Init+0x29c>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d869      	bhi.n	80016f6 <HAL_GPIO_Init+0x12e>
 8001622:	4a91      	ldr	r2, [pc, #580]	; (8001868 <HAL_GPIO_Init+0x2a0>)
 8001624:	4293      	cmp	r3, r2
 8001626:	d04c      	beq.n	80016c2 <HAL_GPIO_Init+0xfa>
 8001628:	4a8f      	ldr	r2, [pc, #572]	; (8001868 <HAL_GPIO_Init+0x2a0>)
 800162a:	4293      	cmp	r3, r2
 800162c:	d863      	bhi.n	80016f6 <HAL_GPIO_Init+0x12e>
 800162e:	4a8f      	ldr	r2, [pc, #572]	; (800186c <HAL_GPIO_Init+0x2a4>)
 8001630:	4293      	cmp	r3, r2
 8001632:	d046      	beq.n	80016c2 <HAL_GPIO_Init+0xfa>
 8001634:	4a8d      	ldr	r2, [pc, #564]	; (800186c <HAL_GPIO_Init+0x2a4>)
 8001636:	4293      	cmp	r3, r2
 8001638:	d85d      	bhi.n	80016f6 <HAL_GPIO_Init+0x12e>
 800163a:	2b12      	cmp	r3, #18
 800163c:	d82a      	bhi.n	8001694 <HAL_GPIO_Init+0xcc>
 800163e:	2b12      	cmp	r3, #18
 8001640:	d859      	bhi.n	80016f6 <HAL_GPIO_Init+0x12e>
 8001642:	a201      	add	r2, pc, #4	; (adr r2, 8001648 <HAL_GPIO_Init+0x80>)
 8001644:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001648:	080016c3 	.word	0x080016c3
 800164c:	0800169d 	.word	0x0800169d
 8001650:	080016af 	.word	0x080016af
 8001654:	080016f1 	.word	0x080016f1
 8001658:	080016f7 	.word	0x080016f7
 800165c:	080016f7 	.word	0x080016f7
 8001660:	080016f7 	.word	0x080016f7
 8001664:	080016f7 	.word	0x080016f7
 8001668:	080016f7 	.word	0x080016f7
 800166c:	080016f7 	.word	0x080016f7
 8001670:	080016f7 	.word	0x080016f7
 8001674:	080016f7 	.word	0x080016f7
 8001678:	080016f7 	.word	0x080016f7
 800167c:	080016f7 	.word	0x080016f7
 8001680:	080016f7 	.word	0x080016f7
 8001684:	080016f7 	.word	0x080016f7
 8001688:	080016f7 	.word	0x080016f7
 800168c:	080016a5 	.word	0x080016a5
 8001690:	080016b9 	.word	0x080016b9
 8001694:	4a76      	ldr	r2, [pc, #472]	; (8001870 <HAL_GPIO_Init+0x2a8>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d013      	beq.n	80016c2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800169a:	e02c      	b.n	80016f6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	68db      	ldr	r3, [r3, #12]
 80016a0:	623b      	str	r3, [r7, #32]
          break;
 80016a2:	e029      	b.n	80016f8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	68db      	ldr	r3, [r3, #12]
 80016a8:	3304      	adds	r3, #4
 80016aa:	623b      	str	r3, [r7, #32]
          break;
 80016ac:	e024      	b.n	80016f8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	68db      	ldr	r3, [r3, #12]
 80016b2:	3308      	adds	r3, #8
 80016b4:	623b      	str	r3, [r7, #32]
          break;
 80016b6:	e01f      	b.n	80016f8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	68db      	ldr	r3, [r3, #12]
 80016bc:	330c      	adds	r3, #12
 80016be:	623b      	str	r3, [r7, #32]
          break;
 80016c0:	e01a      	b.n	80016f8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	689b      	ldr	r3, [r3, #8]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d102      	bne.n	80016d0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80016ca:	2304      	movs	r3, #4
 80016cc:	623b      	str	r3, [r7, #32]
          break;
 80016ce:	e013      	b.n	80016f8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	689b      	ldr	r3, [r3, #8]
 80016d4:	2b01      	cmp	r3, #1
 80016d6:	d105      	bne.n	80016e4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80016d8:	2308      	movs	r3, #8
 80016da:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	69fa      	ldr	r2, [r7, #28]
 80016e0:	611a      	str	r2, [r3, #16]
          break;
 80016e2:	e009      	b.n	80016f8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80016e4:	2308      	movs	r3, #8
 80016e6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	69fa      	ldr	r2, [r7, #28]
 80016ec:	615a      	str	r2, [r3, #20]
          break;
 80016ee:	e003      	b.n	80016f8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80016f0:	2300      	movs	r3, #0
 80016f2:	623b      	str	r3, [r7, #32]
          break;
 80016f4:	e000      	b.n	80016f8 <HAL_GPIO_Init+0x130>
          break;
 80016f6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80016f8:	69bb      	ldr	r3, [r7, #24]
 80016fa:	2bff      	cmp	r3, #255	; 0xff
 80016fc:	d801      	bhi.n	8001702 <HAL_GPIO_Init+0x13a>
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	e001      	b.n	8001706 <HAL_GPIO_Init+0x13e>
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	3304      	adds	r3, #4
 8001706:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001708:	69bb      	ldr	r3, [r7, #24]
 800170a:	2bff      	cmp	r3, #255	; 0xff
 800170c:	d802      	bhi.n	8001714 <HAL_GPIO_Init+0x14c>
 800170e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001710:	009b      	lsls	r3, r3, #2
 8001712:	e002      	b.n	800171a <HAL_GPIO_Init+0x152>
 8001714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001716:	3b08      	subs	r3, #8
 8001718:	009b      	lsls	r3, r3, #2
 800171a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	681a      	ldr	r2, [r3, #0]
 8001720:	210f      	movs	r1, #15
 8001722:	693b      	ldr	r3, [r7, #16]
 8001724:	fa01 f303 	lsl.w	r3, r1, r3
 8001728:	43db      	mvns	r3, r3
 800172a:	401a      	ands	r2, r3
 800172c:	6a39      	ldr	r1, [r7, #32]
 800172e:	693b      	ldr	r3, [r7, #16]
 8001730:	fa01 f303 	lsl.w	r3, r1, r3
 8001734:	431a      	orrs	r2, r3
 8001736:	697b      	ldr	r3, [r7, #20]
 8001738:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001742:	2b00      	cmp	r3, #0
 8001744:	f000 80a9 	beq.w	800189a <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001748:	4b4a      	ldr	r3, [pc, #296]	; (8001874 <HAL_GPIO_Init+0x2ac>)
 800174a:	699b      	ldr	r3, [r3, #24]
 800174c:	4a49      	ldr	r2, [pc, #292]	; (8001874 <HAL_GPIO_Init+0x2ac>)
 800174e:	f043 0301 	orr.w	r3, r3, #1
 8001752:	6193      	str	r3, [r2, #24]
 8001754:	4b47      	ldr	r3, [pc, #284]	; (8001874 <HAL_GPIO_Init+0x2ac>)
 8001756:	699b      	ldr	r3, [r3, #24]
 8001758:	f003 0301 	and.w	r3, r3, #1
 800175c:	60bb      	str	r3, [r7, #8]
 800175e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001760:	4a45      	ldr	r2, [pc, #276]	; (8001878 <HAL_GPIO_Init+0x2b0>)
 8001762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001764:	089b      	lsrs	r3, r3, #2
 8001766:	3302      	adds	r3, #2
 8001768:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800176c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800176e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001770:	f003 0303 	and.w	r3, r3, #3
 8001774:	009b      	lsls	r3, r3, #2
 8001776:	220f      	movs	r2, #15
 8001778:	fa02 f303 	lsl.w	r3, r2, r3
 800177c:	43db      	mvns	r3, r3
 800177e:	68fa      	ldr	r2, [r7, #12]
 8001780:	4013      	ands	r3, r2
 8001782:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	4a3d      	ldr	r2, [pc, #244]	; (800187c <HAL_GPIO_Init+0x2b4>)
 8001788:	4293      	cmp	r3, r2
 800178a:	d00d      	beq.n	80017a8 <HAL_GPIO_Init+0x1e0>
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	4a3c      	ldr	r2, [pc, #240]	; (8001880 <HAL_GPIO_Init+0x2b8>)
 8001790:	4293      	cmp	r3, r2
 8001792:	d007      	beq.n	80017a4 <HAL_GPIO_Init+0x1dc>
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	4a3b      	ldr	r2, [pc, #236]	; (8001884 <HAL_GPIO_Init+0x2bc>)
 8001798:	4293      	cmp	r3, r2
 800179a:	d101      	bne.n	80017a0 <HAL_GPIO_Init+0x1d8>
 800179c:	2302      	movs	r3, #2
 800179e:	e004      	b.n	80017aa <HAL_GPIO_Init+0x1e2>
 80017a0:	2303      	movs	r3, #3
 80017a2:	e002      	b.n	80017aa <HAL_GPIO_Init+0x1e2>
 80017a4:	2301      	movs	r3, #1
 80017a6:	e000      	b.n	80017aa <HAL_GPIO_Init+0x1e2>
 80017a8:	2300      	movs	r3, #0
 80017aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017ac:	f002 0203 	and.w	r2, r2, #3
 80017b0:	0092      	lsls	r2, r2, #2
 80017b2:	4093      	lsls	r3, r2
 80017b4:	68fa      	ldr	r2, [r7, #12]
 80017b6:	4313      	orrs	r3, r2
 80017b8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80017ba:	492f      	ldr	r1, [pc, #188]	; (8001878 <HAL_GPIO_Init+0x2b0>)
 80017bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017be:	089b      	lsrs	r3, r3, #2
 80017c0:	3302      	adds	r3, #2
 80017c2:	68fa      	ldr	r2, [r7, #12]
 80017c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d006      	beq.n	80017e2 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80017d4:	4b2c      	ldr	r3, [pc, #176]	; (8001888 <HAL_GPIO_Init+0x2c0>)
 80017d6:	689a      	ldr	r2, [r3, #8]
 80017d8:	492b      	ldr	r1, [pc, #172]	; (8001888 <HAL_GPIO_Init+0x2c0>)
 80017da:	69bb      	ldr	r3, [r7, #24]
 80017dc:	4313      	orrs	r3, r2
 80017de:	608b      	str	r3, [r1, #8]
 80017e0:	e006      	b.n	80017f0 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80017e2:	4b29      	ldr	r3, [pc, #164]	; (8001888 <HAL_GPIO_Init+0x2c0>)
 80017e4:	689a      	ldr	r2, [r3, #8]
 80017e6:	69bb      	ldr	r3, [r7, #24]
 80017e8:	43db      	mvns	r3, r3
 80017ea:	4927      	ldr	r1, [pc, #156]	; (8001888 <HAL_GPIO_Init+0x2c0>)
 80017ec:	4013      	ands	r3, r2
 80017ee:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d006      	beq.n	800180a <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80017fc:	4b22      	ldr	r3, [pc, #136]	; (8001888 <HAL_GPIO_Init+0x2c0>)
 80017fe:	68da      	ldr	r2, [r3, #12]
 8001800:	4921      	ldr	r1, [pc, #132]	; (8001888 <HAL_GPIO_Init+0x2c0>)
 8001802:	69bb      	ldr	r3, [r7, #24]
 8001804:	4313      	orrs	r3, r2
 8001806:	60cb      	str	r3, [r1, #12]
 8001808:	e006      	b.n	8001818 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800180a:	4b1f      	ldr	r3, [pc, #124]	; (8001888 <HAL_GPIO_Init+0x2c0>)
 800180c:	68da      	ldr	r2, [r3, #12]
 800180e:	69bb      	ldr	r3, [r7, #24]
 8001810:	43db      	mvns	r3, r3
 8001812:	491d      	ldr	r1, [pc, #116]	; (8001888 <HAL_GPIO_Init+0x2c0>)
 8001814:	4013      	ands	r3, r2
 8001816:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001820:	2b00      	cmp	r3, #0
 8001822:	d006      	beq.n	8001832 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001824:	4b18      	ldr	r3, [pc, #96]	; (8001888 <HAL_GPIO_Init+0x2c0>)
 8001826:	685a      	ldr	r2, [r3, #4]
 8001828:	4917      	ldr	r1, [pc, #92]	; (8001888 <HAL_GPIO_Init+0x2c0>)
 800182a:	69bb      	ldr	r3, [r7, #24]
 800182c:	4313      	orrs	r3, r2
 800182e:	604b      	str	r3, [r1, #4]
 8001830:	e006      	b.n	8001840 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001832:	4b15      	ldr	r3, [pc, #84]	; (8001888 <HAL_GPIO_Init+0x2c0>)
 8001834:	685a      	ldr	r2, [r3, #4]
 8001836:	69bb      	ldr	r3, [r7, #24]
 8001838:	43db      	mvns	r3, r3
 800183a:	4913      	ldr	r1, [pc, #76]	; (8001888 <HAL_GPIO_Init+0x2c0>)
 800183c:	4013      	ands	r3, r2
 800183e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001848:	2b00      	cmp	r3, #0
 800184a:	d01f      	beq.n	800188c <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800184c:	4b0e      	ldr	r3, [pc, #56]	; (8001888 <HAL_GPIO_Init+0x2c0>)
 800184e:	681a      	ldr	r2, [r3, #0]
 8001850:	490d      	ldr	r1, [pc, #52]	; (8001888 <HAL_GPIO_Init+0x2c0>)
 8001852:	69bb      	ldr	r3, [r7, #24]
 8001854:	4313      	orrs	r3, r2
 8001856:	600b      	str	r3, [r1, #0]
 8001858:	e01f      	b.n	800189a <HAL_GPIO_Init+0x2d2>
 800185a:	bf00      	nop
 800185c:	10320000 	.word	0x10320000
 8001860:	10310000 	.word	0x10310000
 8001864:	10220000 	.word	0x10220000
 8001868:	10210000 	.word	0x10210000
 800186c:	10120000 	.word	0x10120000
 8001870:	10110000 	.word	0x10110000
 8001874:	40021000 	.word	0x40021000
 8001878:	40010000 	.word	0x40010000
 800187c:	40010800 	.word	0x40010800
 8001880:	40010c00 	.word	0x40010c00
 8001884:	40011000 	.word	0x40011000
 8001888:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800188c:	4b0b      	ldr	r3, [pc, #44]	; (80018bc <HAL_GPIO_Init+0x2f4>)
 800188e:	681a      	ldr	r2, [r3, #0]
 8001890:	69bb      	ldr	r3, [r7, #24]
 8001892:	43db      	mvns	r3, r3
 8001894:	4909      	ldr	r1, [pc, #36]	; (80018bc <HAL_GPIO_Init+0x2f4>)
 8001896:	4013      	ands	r3, r2
 8001898:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800189a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800189c:	3301      	adds	r3, #1
 800189e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	681a      	ldr	r2, [r3, #0]
 80018a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a6:	fa22 f303 	lsr.w	r3, r2, r3
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	f47f ae96 	bne.w	80015dc <HAL_GPIO_Init+0x14>
  }
}
 80018b0:	bf00      	nop
 80018b2:	bf00      	nop
 80018b4:	372c      	adds	r7, #44	; 0x2c
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bc80      	pop	{r7}
 80018ba:	4770      	bx	lr
 80018bc:	40010400 	.word	0x40010400

080018c0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b085      	sub	sp, #20
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
 80018c8:	460b      	mov	r3, r1
 80018ca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	689a      	ldr	r2, [r3, #8]
 80018d0:	887b      	ldrh	r3, [r7, #2]
 80018d2:	4013      	ands	r3, r2
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d002      	beq.n	80018de <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80018d8:	2301      	movs	r3, #1
 80018da:	73fb      	strb	r3, [r7, #15]
 80018dc:	e001      	b.n	80018e2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80018de:	2300      	movs	r3, #0
 80018e0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80018e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80018e4:	4618      	mov	r0, r3
 80018e6:	3714      	adds	r7, #20
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bc80      	pop	{r7}
 80018ec:	4770      	bx	lr

080018ee <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018ee:	b480      	push	{r7}
 80018f0:	b083      	sub	sp, #12
 80018f2:	af00      	add	r7, sp, #0
 80018f4:	6078      	str	r0, [r7, #4]
 80018f6:	460b      	mov	r3, r1
 80018f8:	807b      	strh	r3, [r7, #2]
 80018fa:	4613      	mov	r3, r2
 80018fc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80018fe:	787b      	ldrb	r3, [r7, #1]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d003      	beq.n	800190c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001904:	887a      	ldrh	r2, [r7, #2]
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800190a:	e003      	b.n	8001914 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800190c:	887b      	ldrh	r3, [r7, #2]
 800190e:	041a      	lsls	r2, r3, #16
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	611a      	str	r2, [r3, #16]
}
 8001914:	bf00      	nop
 8001916:	370c      	adds	r7, #12
 8001918:	46bd      	mov	sp, r7
 800191a:	bc80      	pop	{r7}
 800191c:	4770      	bx	lr

0800191e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800191e:	b480      	push	{r7}
 8001920:	b085      	sub	sp, #20
 8001922:	af00      	add	r7, sp, #0
 8001924:	6078      	str	r0, [r7, #4]
 8001926:	460b      	mov	r3, r1
 8001928:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	68db      	ldr	r3, [r3, #12]
 800192e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001930:	887a      	ldrh	r2, [r7, #2]
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	4013      	ands	r3, r2
 8001936:	041a      	lsls	r2, r3, #16
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	43d9      	mvns	r1, r3
 800193c:	887b      	ldrh	r3, [r7, #2]
 800193e:	400b      	ands	r3, r1
 8001940:	431a      	orrs	r2, r3
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	611a      	str	r2, [r3, #16]
}
 8001946:	bf00      	nop
 8001948:	3714      	adds	r7, #20
 800194a:	46bd      	mov	sp, r7
 800194c:	bc80      	pop	{r7}
 800194e:	4770      	bx	lr

08001950 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b086      	sub	sp, #24
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d101      	bne.n	8001962 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800195e:	2301      	movs	r3, #1
 8001960:	e272      	b.n	8001e48 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f003 0301 	and.w	r3, r3, #1
 800196a:	2b00      	cmp	r3, #0
 800196c:	f000 8087 	beq.w	8001a7e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001970:	4b92      	ldr	r3, [pc, #584]	; (8001bbc <HAL_RCC_OscConfig+0x26c>)
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	f003 030c 	and.w	r3, r3, #12
 8001978:	2b04      	cmp	r3, #4
 800197a:	d00c      	beq.n	8001996 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800197c:	4b8f      	ldr	r3, [pc, #572]	; (8001bbc <HAL_RCC_OscConfig+0x26c>)
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	f003 030c 	and.w	r3, r3, #12
 8001984:	2b08      	cmp	r3, #8
 8001986:	d112      	bne.n	80019ae <HAL_RCC_OscConfig+0x5e>
 8001988:	4b8c      	ldr	r3, [pc, #560]	; (8001bbc <HAL_RCC_OscConfig+0x26c>)
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001990:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001994:	d10b      	bne.n	80019ae <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001996:	4b89      	ldr	r3, [pc, #548]	; (8001bbc <HAL_RCC_OscConfig+0x26c>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d06c      	beq.n	8001a7c <HAL_RCC_OscConfig+0x12c>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d168      	bne.n	8001a7c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80019aa:	2301      	movs	r3, #1
 80019ac:	e24c      	b.n	8001e48 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019b6:	d106      	bne.n	80019c6 <HAL_RCC_OscConfig+0x76>
 80019b8:	4b80      	ldr	r3, [pc, #512]	; (8001bbc <HAL_RCC_OscConfig+0x26c>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a7f      	ldr	r2, [pc, #508]	; (8001bbc <HAL_RCC_OscConfig+0x26c>)
 80019be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019c2:	6013      	str	r3, [r2, #0]
 80019c4:	e02e      	b.n	8001a24 <HAL_RCC_OscConfig+0xd4>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d10c      	bne.n	80019e8 <HAL_RCC_OscConfig+0x98>
 80019ce:	4b7b      	ldr	r3, [pc, #492]	; (8001bbc <HAL_RCC_OscConfig+0x26c>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4a7a      	ldr	r2, [pc, #488]	; (8001bbc <HAL_RCC_OscConfig+0x26c>)
 80019d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019d8:	6013      	str	r3, [r2, #0]
 80019da:	4b78      	ldr	r3, [pc, #480]	; (8001bbc <HAL_RCC_OscConfig+0x26c>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4a77      	ldr	r2, [pc, #476]	; (8001bbc <HAL_RCC_OscConfig+0x26c>)
 80019e0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019e4:	6013      	str	r3, [r2, #0]
 80019e6:	e01d      	b.n	8001a24 <HAL_RCC_OscConfig+0xd4>
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019f0:	d10c      	bne.n	8001a0c <HAL_RCC_OscConfig+0xbc>
 80019f2:	4b72      	ldr	r3, [pc, #456]	; (8001bbc <HAL_RCC_OscConfig+0x26c>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4a71      	ldr	r2, [pc, #452]	; (8001bbc <HAL_RCC_OscConfig+0x26c>)
 80019f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019fc:	6013      	str	r3, [r2, #0]
 80019fe:	4b6f      	ldr	r3, [pc, #444]	; (8001bbc <HAL_RCC_OscConfig+0x26c>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4a6e      	ldr	r2, [pc, #440]	; (8001bbc <HAL_RCC_OscConfig+0x26c>)
 8001a04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a08:	6013      	str	r3, [r2, #0]
 8001a0a:	e00b      	b.n	8001a24 <HAL_RCC_OscConfig+0xd4>
 8001a0c:	4b6b      	ldr	r3, [pc, #428]	; (8001bbc <HAL_RCC_OscConfig+0x26c>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a6a      	ldr	r2, [pc, #424]	; (8001bbc <HAL_RCC_OscConfig+0x26c>)
 8001a12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a16:	6013      	str	r3, [r2, #0]
 8001a18:	4b68      	ldr	r3, [pc, #416]	; (8001bbc <HAL_RCC_OscConfig+0x26c>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a67      	ldr	r2, [pc, #412]	; (8001bbc <HAL_RCC_OscConfig+0x26c>)
 8001a1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a22:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d013      	beq.n	8001a54 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a2c:	f7ff fcb4 	bl	8001398 <HAL_GetTick>
 8001a30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a32:	e008      	b.n	8001a46 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a34:	f7ff fcb0 	bl	8001398 <HAL_GetTick>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	1ad3      	subs	r3, r2, r3
 8001a3e:	2b64      	cmp	r3, #100	; 0x64
 8001a40:	d901      	bls.n	8001a46 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001a42:	2303      	movs	r3, #3
 8001a44:	e200      	b.n	8001e48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a46:	4b5d      	ldr	r3, [pc, #372]	; (8001bbc <HAL_RCC_OscConfig+0x26c>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d0f0      	beq.n	8001a34 <HAL_RCC_OscConfig+0xe4>
 8001a52:	e014      	b.n	8001a7e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a54:	f7ff fca0 	bl	8001398 <HAL_GetTick>
 8001a58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a5a:	e008      	b.n	8001a6e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a5c:	f7ff fc9c 	bl	8001398 <HAL_GetTick>
 8001a60:	4602      	mov	r2, r0
 8001a62:	693b      	ldr	r3, [r7, #16]
 8001a64:	1ad3      	subs	r3, r2, r3
 8001a66:	2b64      	cmp	r3, #100	; 0x64
 8001a68:	d901      	bls.n	8001a6e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001a6a:	2303      	movs	r3, #3
 8001a6c:	e1ec      	b.n	8001e48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a6e:	4b53      	ldr	r3, [pc, #332]	; (8001bbc <HAL_RCC_OscConfig+0x26c>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d1f0      	bne.n	8001a5c <HAL_RCC_OscConfig+0x10c>
 8001a7a:	e000      	b.n	8001a7e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f003 0302 	and.w	r3, r3, #2
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d063      	beq.n	8001b52 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a8a:	4b4c      	ldr	r3, [pc, #304]	; (8001bbc <HAL_RCC_OscConfig+0x26c>)
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	f003 030c 	and.w	r3, r3, #12
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d00b      	beq.n	8001aae <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001a96:	4b49      	ldr	r3, [pc, #292]	; (8001bbc <HAL_RCC_OscConfig+0x26c>)
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	f003 030c 	and.w	r3, r3, #12
 8001a9e:	2b08      	cmp	r3, #8
 8001aa0:	d11c      	bne.n	8001adc <HAL_RCC_OscConfig+0x18c>
 8001aa2:	4b46      	ldr	r3, [pc, #280]	; (8001bbc <HAL_RCC_OscConfig+0x26c>)
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d116      	bne.n	8001adc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001aae:	4b43      	ldr	r3, [pc, #268]	; (8001bbc <HAL_RCC_OscConfig+0x26c>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f003 0302 	and.w	r3, r3, #2
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d005      	beq.n	8001ac6 <HAL_RCC_OscConfig+0x176>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	691b      	ldr	r3, [r3, #16]
 8001abe:	2b01      	cmp	r3, #1
 8001ac0:	d001      	beq.n	8001ac6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	e1c0      	b.n	8001e48 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ac6:	4b3d      	ldr	r3, [pc, #244]	; (8001bbc <HAL_RCC_OscConfig+0x26c>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	695b      	ldr	r3, [r3, #20]
 8001ad2:	00db      	lsls	r3, r3, #3
 8001ad4:	4939      	ldr	r1, [pc, #228]	; (8001bbc <HAL_RCC_OscConfig+0x26c>)
 8001ad6:	4313      	orrs	r3, r2
 8001ad8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ada:	e03a      	b.n	8001b52 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	691b      	ldr	r3, [r3, #16]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d020      	beq.n	8001b26 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ae4:	4b36      	ldr	r3, [pc, #216]	; (8001bc0 <HAL_RCC_OscConfig+0x270>)
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aea:	f7ff fc55 	bl	8001398 <HAL_GetTick>
 8001aee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001af0:	e008      	b.n	8001b04 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001af2:	f7ff fc51 	bl	8001398 <HAL_GetTick>
 8001af6:	4602      	mov	r2, r0
 8001af8:	693b      	ldr	r3, [r7, #16]
 8001afa:	1ad3      	subs	r3, r2, r3
 8001afc:	2b02      	cmp	r3, #2
 8001afe:	d901      	bls.n	8001b04 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001b00:	2303      	movs	r3, #3
 8001b02:	e1a1      	b.n	8001e48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b04:	4b2d      	ldr	r3, [pc, #180]	; (8001bbc <HAL_RCC_OscConfig+0x26c>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f003 0302 	and.w	r3, r3, #2
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d0f0      	beq.n	8001af2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b10:	4b2a      	ldr	r3, [pc, #168]	; (8001bbc <HAL_RCC_OscConfig+0x26c>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	695b      	ldr	r3, [r3, #20]
 8001b1c:	00db      	lsls	r3, r3, #3
 8001b1e:	4927      	ldr	r1, [pc, #156]	; (8001bbc <HAL_RCC_OscConfig+0x26c>)
 8001b20:	4313      	orrs	r3, r2
 8001b22:	600b      	str	r3, [r1, #0]
 8001b24:	e015      	b.n	8001b52 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b26:	4b26      	ldr	r3, [pc, #152]	; (8001bc0 <HAL_RCC_OscConfig+0x270>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b2c:	f7ff fc34 	bl	8001398 <HAL_GetTick>
 8001b30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b32:	e008      	b.n	8001b46 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b34:	f7ff fc30 	bl	8001398 <HAL_GetTick>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	693b      	ldr	r3, [r7, #16]
 8001b3c:	1ad3      	subs	r3, r2, r3
 8001b3e:	2b02      	cmp	r3, #2
 8001b40:	d901      	bls.n	8001b46 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001b42:	2303      	movs	r3, #3
 8001b44:	e180      	b.n	8001e48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b46:	4b1d      	ldr	r3, [pc, #116]	; (8001bbc <HAL_RCC_OscConfig+0x26c>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f003 0302 	and.w	r3, r3, #2
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d1f0      	bne.n	8001b34 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f003 0308 	and.w	r3, r3, #8
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d03a      	beq.n	8001bd4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	699b      	ldr	r3, [r3, #24]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d019      	beq.n	8001b9a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b66:	4b17      	ldr	r3, [pc, #92]	; (8001bc4 <HAL_RCC_OscConfig+0x274>)
 8001b68:	2201      	movs	r2, #1
 8001b6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b6c:	f7ff fc14 	bl	8001398 <HAL_GetTick>
 8001b70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b72:	e008      	b.n	8001b86 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b74:	f7ff fc10 	bl	8001398 <HAL_GetTick>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	693b      	ldr	r3, [r7, #16]
 8001b7c:	1ad3      	subs	r3, r2, r3
 8001b7e:	2b02      	cmp	r3, #2
 8001b80:	d901      	bls.n	8001b86 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001b82:	2303      	movs	r3, #3
 8001b84:	e160      	b.n	8001e48 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b86:	4b0d      	ldr	r3, [pc, #52]	; (8001bbc <HAL_RCC_OscConfig+0x26c>)
 8001b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b8a:	f003 0302 	and.w	r3, r3, #2
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d0f0      	beq.n	8001b74 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001b92:	2001      	movs	r0, #1
 8001b94:	f000 fa9c 	bl	80020d0 <RCC_Delay>
 8001b98:	e01c      	b.n	8001bd4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b9a:	4b0a      	ldr	r3, [pc, #40]	; (8001bc4 <HAL_RCC_OscConfig+0x274>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ba0:	f7ff fbfa 	bl	8001398 <HAL_GetTick>
 8001ba4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ba6:	e00f      	b.n	8001bc8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ba8:	f7ff fbf6 	bl	8001398 <HAL_GetTick>
 8001bac:	4602      	mov	r2, r0
 8001bae:	693b      	ldr	r3, [r7, #16]
 8001bb0:	1ad3      	subs	r3, r2, r3
 8001bb2:	2b02      	cmp	r3, #2
 8001bb4:	d908      	bls.n	8001bc8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001bb6:	2303      	movs	r3, #3
 8001bb8:	e146      	b.n	8001e48 <HAL_RCC_OscConfig+0x4f8>
 8001bba:	bf00      	nop
 8001bbc:	40021000 	.word	0x40021000
 8001bc0:	42420000 	.word	0x42420000
 8001bc4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bc8:	4b92      	ldr	r3, [pc, #584]	; (8001e14 <HAL_RCC_OscConfig+0x4c4>)
 8001bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bcc:	f003 0302 	and.w	r3, r3, #2
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d1e9      	bne.n	8001ba8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f003 0304 	and.w	r3, r3, #4
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	f000 80a6 	beq.w	8001d2e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001be2:	2300      	movs	r3, #0
 8001be4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001be6:	4b8b      	ldr	r3, [pc, #556]	; (8001e14 <HAL_RCC_OscConfig+0x4c4>)
 8001be8:	69db      	ldr	r3, [r3, #28]
 8001bea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d10d      	bne.n	8001c0e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bf2:	4b88      	ldr	r3, [pc, #544]	; (8001e14 <HAL_RCC_OscConfig+0x4c4>)
 8001bf4:	69db      	ldr	r3, [r3, #28]
 8001bf6:	4a87      	ldr	r2, [pc, #540]	; (8001e14 <HAL_RCC_OscConfig+0x4c4>)
 8001bf8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bfc:	61d3      	str	r3, [r2, #28]
 8001bfe:	4b85      	ldr	r3, [pc, #532]	; (8001e14 <HAL_RCC_OscConfig+0x4c4>)
 8001c00:	69db      	ldr	r3, [r3, #28]
 8001c02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c06:	60bb      	str	r3, [r7, #8]
 8001c08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c0e:	4b82      	ldr	r3, [pc, #520]	; (8001e18 <HAL_RCC_OscConfig+0x4c8>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d118      	bne.n	8001c4c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c1a:	4b7f      	ldr	r3, [pc, #508]	; (8001e18 <HAL_RCC_OscConfig+0x4c8>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a7e      	ldr	r2, [pc, #504]	; (8001e18 <HAL_RCC_OscConfig+0x4c8>)
 8001c20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c24:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c26:	f7ff fbb7 	bl	8001398 <HAL_GetTick>
 8001c2a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c2c:	e008      	b.n	8001c40 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c2e:	f7ff fbb3 	bl	8001398 <HAL_GetTick>
 8001c32:	4602      	mov	r2, r0
 8001c34:	693b      	ldr	r3, [r7, #16]
 8001c36:	1ad3      	subs	r3, r2, r3
 8001c38:	2b64      	cmp	r3, #100	; 0x64
 8001c3a:	d901      	bls.n	8001c40 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001c3c:	2303      	movs	r3, #3
 8001c3e:	e103      	b.n	8001e48 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c40:	4b75      	ldr	r3, [pc, #468]	; (8001e18 <HAL_RCC_OscConfig+0x4c8>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d0f0      	beq.n	8001c2e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	68db      	ldr	r3, [r3, #12]
 8001c50:	2b01      	cmp	r3, #1
 8001c52:	d106      	bne.n	8001c62 <HAL_RCC_OscConfig+0x312>
 8001c54:	4b6f      	ldr	r3, [pc, #444]	; (8001e14 <HAL_RCC_OscConfig+0x4c4>)
 8001c56:	6a1b      	ldr	r3, [r3, #32]
 8001c58:	4a6e      	ldr	r2, [pc, #440]	; (8001e14 <HAL_RCC_OscConfig+0x4c4>)
 8001c5a:	f043 0301 	orr.w	r3, r3, #1
 8001c5e:	6213      	str	r3, [r2, #32]
 8001c60:	e02d      	b.n	8001cbe <HAL_RCC_OscConfig+0x36e>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	68db      	ldr	r3, [r3, #12]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d10c      	bne.n	8001c84 <HAL_RCC_OscConfig+0x334>
 8001c6a:	4b6a      	ldr	r3, [pc, #424]	; (8001e14 <HAL_RCC_OscConfig+0x4c4>)
 8001c6c:	6a1b      	ldr	r3, [r3, #32]
 8001c6e:	4a69      	ldr	r2, [pc, #420]	; (8001e14 <HAL_RCC_OscConfig+0x4c4>)
 8001c70:	f023 0301 	bic.w	r3, r3, #1
 8001c74:	6213      	str	r3, [r2, #32]
 8001c76:	4b67      	ldr	r3, [pc, #412]	; (8001e14 <HAL_RCC_OscConfig+0x4c4>)
 8001c78:	6a1b      	ldr	r3, [r3, #32]
 8001c7a:	4a66      	ldr	r2, [pc, #408]	; (8001e14 <HAL_RCC_OscConfig+0x4c4>)
 8001c7c:	f023 0304 	bic.w	r3, r3, #4
 8001c80:	6213      	str	r3, [r2, #32]
 8001c82:	e01c      	b.n	8001cbe <HAL_RCC_OscConfig+0x36e>
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	68db      	ldr	r3, [r3, #12]
 8001c88:	2b05      	cmp	r3, #5
 8001c8a:	d10c      	bne.n	8001ca6 <HAL_RCC_OscConfig+0x356>
 8001c8c:	4b61      	ldr	r3, [pc, #388]	; (8001e14 <HAL_RCC_OscConfig+0x4c4>)
 8001c8e:	6a1b      	ldr	r3, [r3, #32]
 8001c90:	4a60      	ldr	r2, [pc, #384]	; (8001e14 <HAL_RCC_OscConfig+0x4c4>)
 8001c92:	f043 0304 	orr.w	r3, r3, #4
 8001c96:	6213      	str	r3, [r2, #32]
 8001c98:	4b5e      	ldr	r3, [pc, #376]	; (8001e14 <HAL_RCC_OscConfig+0x4c4>)
 8001c9a:	6a1b      	ldr	r3, [r3, #32]
 8001c9c:	4a5d      	ldr	r2, [pc, #372]	; (8001e14 <HAL_RCC_OscConfig+0x4c4>)
 8001c9e:	f043 0301 	orr.w	r3, r3, #1
 8001ca2:	6213      	str	r3, [r2, #32]
 8001ca4:	e00b      	b.n	8001cbe <HAL_RCC_OscConfig+0x36e>
 8001ca6:	4b5b      	ldr	r3, [pc, #364]	; (8001e14 <HAL_RCC_OscConfig+0x4c4>)
 8001ca8:	6a1b      	ldr	r3, [r3, #32]
 8001caa:	4a5a      	ldr	r2, [pc, #360]	; (8001e14 <HAL_RCC_OscConfig+0x4c4>)
 8001cac:	f023 0301 	bic.w	r3, r3, #1
 8001cb0:	6213      	str	r3, [r2, #32]
 8001cb2:	4b58      	ldr	r3, [pc, #352]	; (8001e14 <HAL_RCC_OscConfig+0x4c4>)
 8001cb4:	6a1b      	ldr	r3, [r3, #32]
 8001cb6:	4a57      	ldr	r2, [pc, #348]	; (8001e14 <HAL_RCC_OscConfig+0x4c4>)
 8001cb8:	f023 0304 	bic.w	r3, r3, #4
 8001cbc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	68db      	ldr	r3, [r3, #12]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d015      	beq.n	8001cf2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cc6:	f7ff fb67 	bl	8001398 <HAL_GetTick>
 8001cca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ccc:	e00a      	b.n	8001ce4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cce:	f7ff fb63 	bl	8001398 <HAL_GetTick>
 8001cd2:	4602      	mov	r2, r0
 8001cd4:	693b      	ldr	r3, [r7, #16]
 8001cd6:	1ad3      	subs	r3, r2, r3
 8001cd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d901      	bls.n	8001ce4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001ce0:	2303      	movs	r3, #3
 8001ce2:	e0b1      	b.n	8001e48 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ce4:	4b4b      	ldr	r3, [pc, #300]	; (8001e14 <HAL_RCC_OscConfig+0x4c4>)
 8001ce6:	6a1b      	ldr	r3, [r3, #32]
 8001ce8:	f003 0302 	and.w	r3, r3, #2
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d0ee      	beq.n	8001cce <HAL_RCC_OscConfig+0x37e>
 8001cf0:	e014      	b.n	8001d1c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cf2:	f7ff fb51 	bl	8001398 <HAL_GetTick>
 8001cf6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cf8:	e00a      	b.n	8001d10 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cfa:	f7ff fb4d 	bl	8001398 <HAL_GetTick>
 8001cfe:	4602      	mov	r2, r0
 8001d00:	693b      	ldr	r3, [r7, #16]
 8001d02:	1ad3      	subs	r3, r2, r3
 8001d04:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d901      	bls.n	8001d10 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001d0c:	2303      	movs	r3, #3
 8001d0e:	e09b      	b.n	8001e48 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d10:	4b40      	ldr	r3, [pc, #256]	; (8001e14 <HAL_RCC_OscConfig+0x4c4>)
 8001d12:	6a1b      	ldr	r3, [r3, #32]
 8001d14:	f003 0302 	and.w	r3, r3, #2
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d1ee      	bne.n	8001cfa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001d1c:	7dfb      	ldrb	r3, [r7, #23]
 8001d1e:	2b01      	cmp	r3, #1
 8001d20:	d105      	bne.n	8001d2e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d22:	4b3c      	ldr	r3, [pc, #240]	; (8001e14 <HAL_RCC_OscConfig+0x4c4>)
 8001d24:	69db      	ldr	r3, [r3, #28]
 8001d26:	4a3b      	ldr	r2, [pc, #236]	; (8001e14 <HAL_RCC_OscConfig+0x4c4>)
 8001d28:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d2c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	69db      	ldr	r3, [r3, #28]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	f000 8087 	beq.w	8001e46 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d38:	4b36      	ldr	r3, [pc, #216]	; (8001e14 <HAL_RCC_OscConfig+0x4c4>)
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	f003 030c 	and.w	r3, r3, #12
 8001d40:	2b08      	cmp	r3, #8
 8001d42:	d061      	beq.n	8001e08 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	69db      	ldr	r3, [r3, #28]
 8001d48:	2b02      	cmp	r3, #2
 8001d4a:	d146      	bne.n	8001dda <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d4c:	4b33      	ldr	r3, [pc, #204]	; (8001e1c <HAL_RCC_OscConfig+0x4cc>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d52:	f7ff fb21 	bl	8001398 <HAL_GetTick>
 8001d56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d58:	e008      	b.n	8001d6c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d5a:	f7ff fb1d 	bl	8001398 <HAL_GetTick>
 8001d5e:	4602      	mov	r2, r0
 8001d60:	693b      	ldr	r3, [r7, #16]
 8001d62:	1ad3      	subs	r3, r2, r3
 8001d64:	2b02      	cmp	r3, #2
 8001d66:	d901      	bls.n	8001d6c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001d68:	2303      	movs	r3, #3
 8001d6a:	e06d      	b.n	8001e48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d6c:	4b29      	ldr	r3, [pc, #164]	; (8001e14 <HAL_RCC_OscConfig+0x4c4>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d1f0      	bne.n	8001d5a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6a1b      	ldr	r3, [r3, #32]
 8001d7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d80:	d108      	bne.n	8001d94 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001d82:	4b24      	ldr	r3, [pc, #144]	; (8001e14 <HAL_RCC_OscConfig+0x4c4>)
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	689b      	ldr	r3, [r3, #8]
 8001d8e:	4921      	ldr	r1, [pc, #132]	; (8001e14 <HAL_RCC_OscConfig+0x4c4>)
 8001d90:	4313      	orrs	r3, r2
 8001d92:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d94:	4b1f      	ldr	r3, [pc, #124]	; (8001e14 <HAL_RCC_OscConfig+0x4c4>)
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6a19      	ldr	r1, [r3, #32]
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001da4:	430b      	orrs	r3, r1
 8001da6:	491b      	ldr	r1, [pc, #108]	; (8001e14 <HAL_RCC_OscConfig+0x4c4>)
 8001da8:	4313      	orrs	r3, r2
 8001daa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001dac:	4b1b      	ldr	r3, [pc, #108]	; (8001e1c <HAL_RCC_OscConfig+0x4cc>)
 8001dae:	2201      	movs	r2, #1
 8001db0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001db2:	f7ff faf1 	bl	8001398 <HAL_GetTick>
 8001db6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001db8:	e008      	b.n	8001dcc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dba:	f7ff faed 	bl	8001398 <HAL_GetTick>
 8001dbe:	4602      	mov	r2, r0
 8001dc0:	693b      	ldr	r3, [r7, #16]
 8001dc2:	1ad3      	subs	r3, r2, r3
 8001dc4:	2b02      	cmp	r3, #2
 8001dc6:	d901      	bls.n	8001dcc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001dc8:	2303      	movs	r3, #3
 8001dca:	e03d      	b.n	8001e48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001dcc:	4b11      	ldr	r3, [pc, #68]	; (8001e14 <HAL_RCC_OscConfig+0x4c4>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d0f0      	beq.n	8001dba <HAL_RCC_OscConfig+0x46a>
 8001dd8:	e035      	b.n	8001e46 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dda:	4b10      	ldr	r3, [pc, #64]	; (8001e1c <HAL_RCC_OscConfig+0x4cc>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001de0:	f7ff fada 	bl	8001398 <HAL_GetTick>
 8001de4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001de6:	e008      	b.n	8001dfa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001de8:	f7ff fad6 	bl	8001398 <HAL_GetTick>
 8001dec:	4602      	mov	r2, r0
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	1ad3      	subs	r3, r2, r3
 8001df2:	2b02      	cmp	r3, #2
 8001df4:	d901      	bls.n	8001dfa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001df6:	2303      	movs	r3, #3
 8001df8:	e026      	b.n	8001e48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dfa:	4b06      	ldr	r3, [pc, #24]	; (8001e14 <HAL_RCC_OscConfig+0x4c4>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d1f0      	bne.n	8001de8 <HAL_RCC_OscConfig+0x498>
 8001e06:	e01e      	b.n	8001e46 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	69db      	ldr	r3, [r3, #28]
 8001e0c:	2b01      	cmp	r3, #1
 8001e0e:	d107      	bne.n	8001e20 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001e10:	2301      	movs	r3, #1
 8001e12:	e019      	b.n	8001e48 <HAL_RCC_OscConfig+0x4f8>
 8001e14:	40021000 	.word	0x40021000
 8001e18:	40007000 	.word	0x40007000
 8001e1c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001e20:	4b0b      	ldr	r3, [pc, #44]	; (8001e50 <HAL_RCC_OscConfig+0x500>)
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6a1b      	ldr	r3, [r3, #32]
 8001e30:	429a      	cmp	r2, r3
 8001e32:	d106      	bne.n	8001e42 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e3e:	429a      	cmp	r2, r3
 8001e40:	d001      	beq.n	8001e46 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001e42:	2301      	movs	r3, #1
 8001e44:	e000      	b.n	8001e48 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001e46:	2300      	movs	r3, #0
}
 8001e48:	4618      	mov	r0, r3
 8001e4a:	3718      	adds	r7, #24
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}
 8001e50:	40021000 	.word	0x40021000

08001e54 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b084      	sub	sp, #16
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
 8001e5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d101      	bne.n	8001e68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e64:	2301      	movs	r3, #1
 8001e66:	e0d0      	b.n	800200a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e68:	4b6a      	ldr	r3, [pc, #424]	; (8002014 <HAL_RCC_ClockConfig+0x1c0>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f003 0307 	and.w	r3, r3, #7
 8001e70:	683a      	ldr	r2, [r7, #0]
 8001e72:	429a      	cmp	r2, r3
 8001e74:	d910      	bls.n	8001e98 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e76:	4b67      	ldr	r3, [pc, #412]	; (8002014 <HAL_RCC_ClockConfig+0x1c0>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f023 0207 	bic.w	r2, r3, #7
 8001e7e:	4965      	ldr	r1, [pc, #404]	; (8002014 <HAL_RCC_ClockConfig+0x1c0>)
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	4313      	orrs	r3, r2
 8001e84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e86:	4b63      	ldr	r3, [pc, #396]	; (8002014 <HAL_RCC_ClockConfig+0x1c0>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f003 0307 	and.w	r3, r3, #7
 8001e8e:	683a      	ldr	r2, [r7, #0]
 8001e90:	429a      	cmp	r2, r3
 8001e92:	d001      	beq.n	8001e98 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001e94:	2301      	movs	r3, #1
 8001e96:	e0b8      	b.n	800200a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f003 0302 	and.w	r3, r3, #2
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d020      	beq.n	8001ee6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f003 0304 	and.w	r3, r3, #4
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d005      	beq.n	8001ebc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001eb0:	4b59      	ldr	r3, [pc, #356]	; (8002018 <HAL_RCC_ClockConfig+0x1c4>)
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	4a58      	ldr	r2, [pc, #352]	; (8002018 <HAL_RCC_ClockConfig+0x1c4>)
 8001eb6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001eba:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f003 0308 	and.w	r3, r3, #8
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d005      	beq.n	8001ed4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ec8:	4b53      	ldr	r3, [pc, #332]	; (8002018 <HAL_RCC_ClockConfig+0x1c4>)
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	4a52      	ldr	r2, [pc, #328]	; (8002018 <HAL_RCC_ClockConfig+0x1c4>)
 8001ece:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001ed2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ed4:	4b50      	ldr	r3, [pc, #320]	; (8002018 <HAL_RCC_ClockConfig+0x1c4>)
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	689b      	ldr	r3, [r3, #8]
 8001ee0:	494d      	ldr	r1, [pc, #308]	; (8002018 <HAL_RCC_ClockConfig+0x1c4>)
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f003 0301 	and.w	r3, r3, #1
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d040      	beq.n	8001f74 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	2b01      	cmp	r3, #1
 8001ef8:	d107      	bne.n	8001f0a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001efa:	4b47      	ldr	r3, [pc, #284]	; (8002018 <HAL_RCC_ClockConfig+0x1c4>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d115      	bne.n	8001f32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f06:	2301      	movs	r3, #1
 8001f08:	e07f      	b.n	800200a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	2b02      	cmp	r3, #2
 8001f10:	d107      	bne.n	8001f22 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f12:	4b41      	ldr	r3, [pc, #260]	; (8002018 <HAL_RCC_ClockConfig+0x1c4>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d109      	bne.n	8001f32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e073      	b.n	800200a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f22:	4b3d      	ldr	r3, [pc, #244]	; (8002018 <HAL_RCC_ClockConfig+0x1c4>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f003 0302 	and.w	r3, r3, #2
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d101      	bne.n	8001f32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e06b      	b.n	800200a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f32:	4b39      	ldr	r3, [pc, #228]	; (8002018 <HAL_RCC_ClockConfig+0x1c4>)
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	f023 0203 	bic.w	r2, r3, #3
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	4936      	ldr	r1, [pc, #216]	; (8002018 <HAL_RCC_ClockConfig+0x1c4>)
 8001f40:	4313      	orrs	r3, r2
 8001f42:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f44:	f7ff fa28 	bl	8001398 <HAL_GetTick>
 8001f48:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f4a:	e00a      	b.n	8001f62 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f4c:	f7ff fa24 	bl	8001398 <HAL_GetTick>
 8001f50:	4602      	mov	r2, r0
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	1ad3      	subs	r3, r2, r3
 8001f56:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d901      	bls.n	8001f62 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f5e:	2303      	movs	r3, #3
 8001f60:	e053      	b.n	800200a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f62:	4b2d      	ldr	r3, [pc, #180]	; (8002018 <HAL_RCC_ClockConfig+0x1c4>)
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	f003 020c 	and.w	r2, r3, #12
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	009b      	lsls	r3, r3, #2
 8001f70:	429a      	cmp	r2, r3
 8001f72:	d1eb      	bne.n	8001f4c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f74:	4b27      	ldr	r3, [pc, #156]	; (8002014 <HAL_RCC_ClockConfig+0x1c0>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f003 0307 	and.w	r3, r3, #7
 8001f7c:	683a      	ldr	r2, [r7, #0]
 8001f7e:	429a      	cmp	r2, r3
 8001f80:	d210      	bcs.n	8001fa4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f82:	4b24      	ldr	r3, [pc, #144]	; (8002014 <HAL_RCC_ClockConfig+0x1c0>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f023 0207 	bic.w	r2, r3, #7
 8001f8a:	4922      	ldr	r1, [pc, #136]	; (8002014 <HAL_RCC_ClockConfig+0x1c0>)
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f92:	4b20      	ldr	r3, [pc, #128]	; (8002014 <HAL_RCC_ClockConfig+0x1c0>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f003 0307 	and.w	r3, r3, #7
 8001f9a:	683a      	ldr	r2, [r7, #0]
 8001f9c:	429a      	cmp	r2, r3
 8001f9e:	d001      	beq.n	8001fa4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	e032      	b.n	800200a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f003 0304 	and.w	r3, r3, #4
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d008      	beq.n	8001fc2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fb0:	4b19      	ldr	r3, [pc, #100]	; (8002018 <HAL_RCC_ClockConfig+0x1c4>)
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	68db      	ldr	r3, [r3, #12]
 8001fbc:	4916      	ldr	r1, [pc, #88]	; (8002018 <HAL_RCC_ClockConfig+0x1c4>)
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f003 0308 	and.w	r3, r3, #8
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d009      	beq.n	8001fe2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001fce:	4b12      	ldr	r3, [pc, #72]	; (8002018 <HAL_RCC_ClockConfig+0x1c4>)
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	691b      	ldr	r3, [r3, #16]
 8001fda:	00db      	lsls	r3, r3, #3
 8001fdc:	490e      	ldr	r1, [pc, #56]	; (8002018 <HAL_RCC_ClockConfig+0x1c4>)
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001fe2:	f000 f821 	bl	8002028 <HAL_RCC_GetSysClockFreq>
 8001fe6:	4602      	mov	r2, r0
 8001fe8:	4b0b      	ldr	r3, [pc, #44]	; (8002018 <HAL_RCC_ClockConfig+0x1c4>)
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	091b      	lsrs	r3, r3, #4
 8001fee:	f003 030f 	and.w	r3, r3, #15
 8001ff2:	490a      	ldr	r1, [pc, #40]	; (800201c <HAL_RCC_ClockConfig+0x1c8>)
 8001ff4:	5ccb      	ldrb	r3, [r1, r3]
 8001ff6:	fa22 f303 	lsr.w	r3, r2, r3
 8001ffa:	4a09      	ldr	r2, [pc, #36]	; (8002020 <HAL_RCC_ClockConfig+0x1cc>)
 8001ffc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001ffe:	4b09      	ldr	r3, [pc, #36]	; (8002024 <HAL_RCC_ClockConfig+0x1d0>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4618      	mov	r0, r3
 8002004:	f7ff f986 	bl	8001314 <HAL_InitTick>

  return HAL_OK;
 8002008:	2300      	movs	r3, #0
}
 800200a:	4618      	mov	r0, r3
 800200c:	3710      	adds	r7, #16
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}
 8002012:	bf00      	nop
 8002014:	40022000 	.word	0x40022000
 8002018:	40021000 	.word	0x40021000
 800201c:	0800294c 	.word	0x0800294c
 8002020:	200000b0 	.word	0x200000b0
 8002024:	200000c0 	.word	0x200000c0

08002028 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002028:	b480      	push	{r7}
 800202a:	b087      	sub	sp, #28
 800202c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800202e:	2300      	movs	r3, #0
 8002030:	60fb      	str	r3, [r7, #12]
 8002032:	2300      	movs	r3, #0
 8002034:	60bb      	str	r3, [r7, #8]
 8002036:	2300      	movs	r3, #0
 8002038:	617b      	str	r3, [r7, #20]
 800203a:	2300      	movs	r3, #0
 800203c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800203e:	2300      	movs	r3, #0
 8002040:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002042:	4b1e      	ldr	r3, [pc, #120]	; (80020bc <HAL_RCC_GetSysClockFreq+0x94>)
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	f003 030c 	and.w	r3, r3, #12
 800204e:	2b04      	cmp	r3, #4
 8002050:	d002      	beq.n	8002058 <HAL_RCC_GetSysClockFreq+0x30>
 8002052:	2b08      	cmp	r3, #8
 8002054:	d003      	beq.n	800205e <HAL_RCC_GetSysClockFreq+0x36>
 8002056:	e027      	b.n	80020a8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002058:	4b19      	ldr	r3, [pc, #100]	; (80020c0 <HAL_RCC_GetSysClockFreq+0x98>)
 800205a:	613b      	str	r3, [r7, #16]
      break;
 800205c:	e027      	b.n	80020ae <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	0c9b      	lsrs	r3, r3, #18
 8002062:	f003 030f 	and.w	r3, r3, #15
 8002066:	4a17      	ldr	r2, [pc, #92]	; (80020c4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002068:	5cd3      	ldrb	r3, [r2, r3]
 800206a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002072:	2b00      	cmp	r3, #0
 8002074:	d010      	beq.n	8002098 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002076:	4b11      	ldr	r3, [pc, #68]	; (80020bc <HAL_RCC_GetSysClockFreq+0x94>)
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	0c5b      	lsrs	r3, r3, #17
 800207c:	f003 0301 	and.w	r3, r3, #1
 8002080:	4a11      	ldr	r2, [pc, #68]	; (80020c8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002082:	5cd3      	ldrb	r3, [r2, r3]
 8002084:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	4a0d      	ldr	r2, [pc, #52]	; (80020c0 <HAL_RCC_GetSysClockFreq+0x98>)
 800208a:	fb03 f202 	mul.w	r2, r3, r2
 800208e:	68bb      	ldr	r3, [r7, #8]
 8002090:	fbb2 f3f3 	udiv	r3, r2, r3
 8002094:	617b      	str	r3, [r7, #20]
 8002096:	e004      	b.n	80020a2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	4a0c      	ldr	r2, [pc, #48]	; (80020cc <HAL_RCC_GetSysClockFreq+0xa4>)
 800209c:	fb02 f303 	mul.w	r3, r2, r3
 80020a0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	613b      	str	r3, [r7, #16]
      break;
 80020a6:	e002      	b.n	80020ae <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80020a8:	4b05      	ldr	r3, [pc, #20]	; (80020c0 <HAL_RCC_GetSysClockFreq+0x98>)
 80020aa:	613b      	str	r3, [r7, #16]
      break;
 80020ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80020ae:	693b      	ldr	r3, [r7, #16]
}
 80020b0:	4618      	mov	r0, r3
 80020b2:	371c      	adds	r7, #28
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bc80      	pop	{r7}
 80020b8:	4770      	bx	lr
 80020ba:	bf00      	nop
 80020bc:	40021000 	.word	0x40021000
 80020c0:	007a1200 	.word	0x007a1200
 80020c4:	0800295c 	.word	0x0800295c
 80020c8:	0800296c 	.word	0x0800296c
 80020cc:	003d0900 	.word	0x003d0900

080020d0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b085      	sub	sp, #20
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80020d8:	4b0a      	ldr	r3, [pc, #40]	; (8002104 <RCC_Delay+0x34>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a0a      	ldr	r2, [pc, #40]	; (8002108 <RCC_Delay+0x38>)
 80020de:	fba2 2303 	umull	r2, r3, r2, r3
 80020e2:	0a5b      	lsrs	r3, r3, #9
 80020e4:	687a      	ldr	r2, [r7, #4]
 80020e6:	fb02 f303 	mul.w	r3, r2, r3
 80020ea:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80020ec:	bf00      	nop
  }
  while (Delay --);
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	1e5a      	subs	r2, r3, #1
 80020f2:	60fa      	str	r2, [r7, #12]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d1f9      	bne.n	80020ec <RCC_Delay+0x1c>
}
 80020f8:	bf00      	nop
 80020fa:	bf00      	nop
 80020fc:	3714      	adds	r7, #20
 80020fe:	46bd      	mov	sp, r7
 8002100:	bc80      	pop	{r7}
 8002102:	4770      	bx	lr
 8002104:	200000b0 	.word	0x200000b0
 8002108:	10624dd3 	.word	0x10624dd3

0800210c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b082      	sub	sp, #8
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d101      	bne.n	800211e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800211a:	2301      	movs	r3, #1
 800211c:	e041      	b.n	80021a2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002124:	b2db      	uxtb	r3, r3
 8002126:	2b00      	cmp	r3, #0
 8002128:	d106      	bne.n	8002138 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2200      	movs	r2, #0
 800212e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002132:	6878      	ldr	r0, [r7, #4]
 8002134:	f7fe fd5e 	bl	8000bf4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2202      	movs	r2, #2
 800213c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681a      	ldr	r2, [r3, #0]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	3304      	adds	r3, #4
 8002148:	4619      	mov	r1, r3
 800214a:	4610      	mov	r0, r2
 800214c:	f000 fa6e 	bl	800262c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2201      	movs	r2, #1
 8002154:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2201      	movs	r2, #1
 800215c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2201      	movs	r2, #1
 8002164:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2201      	movs	r2, #1
 800216c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2201      	movs	r2, #1
 8002174:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2201      	movs	r2, #1
 800217c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2201      	movs	r2, #1
 8002184:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2201      	movs	r2, #1
 800218c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2201      	movs	r2, #1
 8002194:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2201      	movs	r2, #1
 800219c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80021a0:	2300      	movs	r3, #0
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	3708      	adds	r7, #8
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}
	...

080021ac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b085      	sub	sp, #20
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021ba:	b2db      	uxtb	r3, r3
 80021bc:	2b01      	cmp	r3, #1
 80021be:	d001      	beq.n	80021c4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80021c0:	2301      	movs	r3, #1
 80021c2:	e035      	b.n	8002230 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2202      	movs	r2, #2
 80021c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	68da      	ldr	r2, [r3, #12]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f042 0201 	orr.w	r2, r2, #1
 80021da:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a16      	ldr	r2, [pc, #88]	; (800223c <HAL_TIM_Base_Start_IT+0x90>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d009      	beq.n	80021fa <HAL_TIM_Base_Start_IT+0x4e>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021ee:	d004      	beq.n	80021fa <HAL_TIM_Base_Start_IT+0x4e>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a12      	ldr	r2, [pc, #72]	; (8002240 <HAL_TIM_Base_Start_IT+0x94>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d111      	bne.n	800221e <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	689b      	ldr	r3, [r3, #8]
 8002200:	f003 0307 	and.w	r3, r3, #7
 8002204:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	2b06      	cmp	r3, #6
 800220a:	d010      	beq.n	800222e <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f042 0201 	orr.w	r2, r2, #1
 800221a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800221c:	e007      	b.n	800222e <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	681a      	ldr	r2, [r3, #0]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f042 0201 	orr.w	r2, r2, #1
 800222c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800222e:	2300      	movs	r3, #0
}
 8002230:	4618      	mov	r0, r3
 8002232:	3714      	adds	r7, #20
 8002234:	46bd      	mov	sp, r7
 8002236:	bc80      	pop	{r7}
 8002238:	4770      	bx	lr
 800223a:	bf00      	nop
 800223c:	40012c00 	.word	0x40012c00
 8002240:	40000400 	.word	0x40000400

08002244 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b082      	sub	sp, #8
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	691b      	ldr	r3, [r3, #16]
 8002252:	f003 0302 	and.w	r3, r3, #2
 8002256:	2b02      	cmp	r3, #2
 8002258:	d122      	bne.n	80022a0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	68db      	ldr	r3, [r3, #12]
 8002260:	f003 0302 	and.w	r3, r3, #2
 8002264:	2b02      	cmp	r3, #2
 8002266:	d11b      	bne.n	80022a0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f06f 0202 	mvn.w	r2, #2
 8002270:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2201      	movs	r2, #1
 8002276:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	699b      	ldr	r3, [r3, #24]
 800227e:	f003 0303 	and.w	r3, r3, #3
 8002282:	2b00      	cmp	r3, #0
 8002284:	d003      	beq.n	800228e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002286:	6878      	ldr	r0, [r7, #4]
 8002288:	f000 f9b4 	bl	80025f4 <HAL_TIM_IC_CaptureCallback>
 800228c:	e005      	b.n	800229a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800228e:	6878      	ldr	r0, [r7, #4]
 8002290:	f000 f9a7 	bl	80025e2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002294:	6878      	ldr	r0, [r7, #4]
 8002296:	f000 f9b6 	bl	8002606 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2200      	movs	r2, #0
 800229e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	691b      	ldr	r3, [r3, #16]
 80022a6:	f003 0304 	and.w	r3, r3, #4
 80022aa:	2b04      	cmp	r3, #4
 80022ac:	d122      	bne.n	80022f4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	68db      	ldr	r3, [r3, #12]
 80022b4:	f003 0304 	and.w	r3, r3, #4
 80022b8:	2b04      	cmp	r3, #4
 80022ba:	d11b      	bne.n	80022f4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f06f 0204 	mvn.w	r2, #4
 80022c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2202      	movs	r2, #2
 80022ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	699b      	ldr	r3, [r3, #24]
 80022d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d003      	beq.n	80022e2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022da:	6878      	ldr	r0, [r7, #4]
 80022dc:	f000 f98a 	bl	80025f4 <HAL_TIM_IC_CaptureCallback>
 80022e0:	e005      	b.n	80022ee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022e2:	6878      	ldr	r0, [r7, #4]
 80022e4:	f000 f97d 	bl	80025e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022e8:	6878      	ldr	r0, [r7, #4]
 80022ea:	f000 f98c 	bl	8002606 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2200      	movs	r2, #0
 80022f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	691b      	ldr	r3, [r3, #16]
 80022fa:	f003 0308 	and.w	r3, r3, #8
 80022fe:	2b08      	cmp	r3, #8
 8002300:	d122      	bne.n	8002348 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	68db      	ldr	r3, [r3, #12]
 8002308:	f003 0308 	and.w	r3, r3, #8
 800230c:	2b08      	cmp	r3, #8
 800230e:	d11b      	bne.n	8002348 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f06f 0208 	mvn.w	r2, #8
 8002318:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2204      	movs	r2, #4
 800231e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	69db      	ldr	r3, [r3, #28]
 8002326:	f003 0303 	and.w	r3, r3, #3
 800232a:	2b00      	cmp	r3, #0
 800232c:	d003      	beq.n	8002336 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800232e:	6878      	ldr	r0, [r7, #4]
 8002330:	f000 f960 	bl	80025f4 <HAL_TIM_IC_CaptureCallback>
 8002334:	e005      	b.n	8002342 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002336:	6878      	ldr	r0, [r7, #4]
 8002338:	f000 f953 	bl	80025e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800233c:	6878      	ldr	r0, [r7, #4]
 800233e:	f000 f962 	bl	8002606 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2200      	movs	r2, #0
 8002346:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	691b      	ldr	r3, [r3, #16]
 800234e:	f003 0310 	and.w	r3, r3, #16
 8002352:	2b10      	cmp	r3, #16
 8002354:	d122      	bne.n	800239c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	68db      	ldr	r3, [r3, #12]
 800235c:	f003 0310 	and.w	r3, r3, #16
 8002360:	2b10      	cmp	r3, #16
 8002362:	d11b      	bne.n	800239c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f06f 0210 	mvn.w	r2, #16
 800236c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2208      	movs	r2, #8
 8002372:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	69db      	ldr	r3, [r3, #28]
 800237a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800237e:	2b00      	cmp	r3, #0
 8002380:	d003      	beq.n	800238a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002382:	6878      	ldr	r0, [r7, #4]
 8002384:	f000 f936 	bl	80025f4 <HAL_TIM_IC_CaptureCallback>
 8002388:	e005      	b.n	8002396 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800238a:	6878      	ldr	r0, [r7, #4]
 800238c:	f000 f929 	bl	80025e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002390:	6878      	ldr	r0, [r7, #4]
 8002392:	f000 f938 	bl	8002606 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2200      	movs	r2, #0
 800239a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	691b      	ldr	r3, [r3, #16]
 80023a2:	f003 0301 	and.w	r3, r3, #1
 80023a6:	2b01      	cmp	r3, #1
 80023a8:	d10e      	bne.n	80023c8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	68db      	ldr	r3, [r3, #12]
 80023b0:	f003 0301 	and.w	r3, r3, #1
 80023b4:	2b01      	cmp	r3, #1
 80023b6:	d107      	bne.n	80023c8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f06f 0201 	mvn.w	r2, #1
 80023c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80023c2:	6878      	ldr	r0, [r7, #4]
 80023c4:	f7fe fb92 	bl	8000aec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	691b      	ldr	r3, [r3, #16]
 80023ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023d2:	2b80      	cmp	r3, #128	; 0x80
 80023d4:	d10e      	bne.n	80023f4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	68db      	ldr	r3, [r3, #12]
 80023dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023e0:	2b80      	cmp	r3, #128	; 0x80
 80023e2:	d107      	bne.n	80023f4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80023ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80023ee:	6878      	ldr	r0, [r7, #4]
 80023f0:	f000 fa6b 	bl	80028ca <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	691b      	ldr	r3, [r3, #16]
 80023fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023fe:	2b40      	cmp	r3, #64	; 0x40
 8002400:	d10e      	bne.n	8002420 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	68db      	ldr	r3, [r3, #12]
 8002408:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800240c:	2b40      	cmp	r3, #64	; 0x40
 800240e:	d107      	bne.n	8002420 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002418:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800241a:	6878      	ldr	r0, [r7, #4]
 800241c:	f000 f8fc 	bl	8002618 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	691b      	ldr	r3, [r3, #16]
 8002426:	f003 0320 	and.w	r3, r3, #32
 800242a:	2b20      	cmp	r3, #32
 800242c:	d10e      	bne.n	800244c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	68db      	ldr	r3, [r3, #12]
 8002434:	f003 0320 	and.w	r3, r3, #32
 8002438:	2b20      	cmp	r3, #32
 800243a:	d107      	bne.n	800244c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f06f 0220 	mvn.w	r2, #32
 8002444:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002446:	6878      	ldr	r0, [r7, #4]
 8002448:	f000 fa36 	bl	80028b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800244c:	bf00      	nop
 800244e:	3708      	adds	r7, #8
 8002450:	46bd      	mov	sp, r7
 8002452:	bd80      	pop	{r7, pc}

08002454 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b084      	sub	sp, #16
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
 800245c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800245e:	2300      	movs	r3, #0
 8002460:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002468:	2b01      	cmp	r3, #1
 800246a:	d101      	bne.n	8002470 <HAL_TIM_ConfigClockSource+0x1c>
 800246c:	2302      	movs	r3, #2
 800246e:	e0b4      	b.n	80025da <HAL_TIM_ConfigClockSource+0x186>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2201      	movs	r2, #1
 8002474:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2202      	movs	r2, #2
 800247c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	689b      	ldr	r3, [r3, #8]
 8002486:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800248e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002490:	68bb      	ldr	r3, [r7, #8]
 8002492:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002496:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	68ba      	ldr	r2, [r7, #8]
 800249e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80024a8:	d03e      	beq.n	8002528 <HAL_TIM_ConfigClockSource+0xd4>
 80024aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80024ae:	f200 8087 	bhi.w	80025c0 <HAL_TIM_ConfigClockSource+0x16c>
 80024b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024b6:	f000 8086 	beq.w	80025c6 <HAL_TIM_ConfigClockSource+0x172>
 80024ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024be:	d87f      	bhi.n	80025c0 <HAL_TIM_ConfigClockSource+0x16c>
 80024c0:	2b70      	cmp	r3, #112	; 0x70
 80024c2:	d01a      	beq.n	80024fa <HAL_TIM_ConfigClockSource+0xa6>
 80024c4:	2b70      	cmp	r3, #112	; 0x70
 80024c6:	d87b      	bhi.n	80025c0 <HAL_TIM_ConfigClockSource+0x16c>
 80024c8:	2b60      	cmp	r3, #96	; 0x60
 80024ca:	d050      	beq.n	800256e <HAL_TIM_ConfigClockSource+0x11a>
 80024cc:	2b60      	cmp	r3, #96	; 0x60
 80024ce:	d877      	bhi.n	80025c0 <HAL_TIM_ConfigClockSource+0x16c>
 80024d0:	2b50      	cmp	r3, #80	; 0x50
 80024d2:	d03c      	beq.n	800254e <HAL_TIM_ConfigClockSource+0xfa>
 80024d4:	2b50      	cmp	r3, #80	; 0x50
 80024d6:	d873      	bhi.n	80025c0 <HAL_TIM_ConfigClockSource+0x16c>
 80024d8:	2b40      	cmp	r3, #64	; 0x40
 80024da:	d058      	beq.n	800258e <HAL_TIM_ConfigClockSource+0x13a>
 80024dc:	2b40      	cmp	r3, #64	; 0x40
 80024de:	d86f      	bhi.n	80025c0 <HAL_TIM_ConfigClockSource+0x16c>
 80024e0:	2b30      	cmp	r3, #48	; 0x30
 80024e2:	d064      	beq.n	80025ae <HAL_TIM_ConfigClockSource+0x15a>
 80024e4:	2b30      	cmp	r3, #48	; 0x30
 80024e6:	d86b      	bhi.n	80025c0 <HAL_TIM_ConfigClockSource+0x16c>
 80024e8:	2b20      	cmp	r3, #32
 80024ea:	d060      	beq.n	80025ae <HAL_TIM_ConfigClockSource+0x15a>
 80024ec:	2b20      	cmp	r3, #32
 80024ee:	d867      	bhi.n	80025c0 <HAL_TIM_ConfigClockSource+0x16c>
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d05c      	beq.n	80025ae <HAL_TIM_ConfigClockSource+0x15a>
 80024f4:	2b10      	cmp	r3, #16
 80024f6:	d05a      	beq.n	80025ae <HAL_TIM_ConfigClockSource+0x15a>
 80024f8:	e062      	b.n	80025c0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800250a:	f000 f95e 	bl	80027ca <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	689b      	ldr	r3, [r3, #8]
 8002514:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002516:	68bb      	ldr	r3, [r7, #8]
 8002518:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800251c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	68ba      	ldr	r2, [r7, #8]
 8002524:	609a      	str	r2, [r3, #8]
      break;
 8002526:	e04f      	b.n	80025c8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002538:	f000 f947 	bl	80027ca <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	689a      	ldr	r2, [r3, #8]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800254a:	609a      	str	r2, [r3, #8]
      break;
 800254c:	e03c      	b.n	80025c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800255a:	461a      	mov	r2, r3
 800255c:	f000 f8be 	bl	80026dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	2150      	movs	r1, #80	; 0x50
 8002566:	4618      	mov	r0, r3
 8002568:	f000 f915 	bl	8002796 <TIM_ITRx_SetConfig>
      break;
 800256c:	e02c      	b.n	80025c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800257a:	461a      	mov	r2, r3
 800257c:	f000 f8dc 	bl	8002738 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	2160      	movs	r1, #96	; 0x60
 8002586:	4618      	mov	r0, r3
 8002588:	f000 f905 	bl	8002796 <TIM_ITRx_SetConfig>
      break;
 800258c:	e01c      	b.n	80025c8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800259a:	461a      	mov	r2, r3
 800259c:	f000 f89e 	bl	80026dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	2140      	movs	r1, #64	; 0x40
 80025a6:	4618      	mov	r0, r3
 80025a8:	f000 f8f5 	bl	8002796 <TIM_ITRx_SetConfig>
      break;
 80025ac:	e00c      	b.n	80025c8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681a      	ldr	r2, [r3, #0]
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4619      	mov	r1, r3
 80025b8:	4610      	mov	r0, r2
 80025ba:	f000 f8ec 	bl	8002796 <TIM_ITRx_SetConfig>
      break;
 80025be:	e003      	b.n	80025c8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80025c0:	2301      	movs	r3, #1
 80025c2:	73fb      	strb	r3, [r7, #15]
      break;
 80025c4:	e000      	b.n	80025c8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80025c6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2201      	movs	r2, #1
 80025cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2200      	movs	r2, #0
 80025d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80025d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80025da:	4618      	mov	r0, r3
 80025dc:	3710      	adds	r7, #16
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}

080025e2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80025e2:	b480      	push	{r7}
 80025e4:	b083      	sub	sp, #12
 80025e6:	af00      	add	r7, sp, #0
 80025e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80025ea:	bf00      	nop
 80025ec:	370c      	adds	r7, #12
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bc80      	pop	{r7}
 80025f2:	4770      	bx	lr

080025f4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b083      	sub	sp, #12
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80025fc:	bf00      	nop
 80025fe:	370c      	adds	r7, #12
 8002600:	46bd      	mov	sp, r7
 8002602:	bc80      	pop	{r7}
 8002604:	4770      	bx	lr

08002606 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002606:	b480      	push	{r7}
 8002608:	b083      	sub	sp, #12
 800260a:	af00      	add	r7, sp, #0
 800260c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800260e:	bf00      	nop
 8002610:	370c      	adds	r7, #12
 8002612:	46bd      	mov	sp, r7
 8002614:	bc80      	pop	{r7}
 8002616:	4770      	bx	lr

08002618 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002618:	b480      	push	{r7}
 800261a:	b083      	sub	sp, #12
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002620:	bf00      	nop
 8002622:	370c      	adds	r7, #12
 8002624:	46bd      	mov	sp, r7
 8002626:	bc80      	pop	{r7}
 8002628:	4770      	bx	lr
	...

0800262c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800262c:	b480      	push	{r7}
 800262e:	b085      	sub	sp, #20
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
 8002634:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	4a25      	ldr	r2, [pc, #148]	; (80026d4 <TIM_Base_SetConfig+0xa8>)
 8002640:	4293      	cmp	r3, r2
 8002642:	d007      	beq.n	8002654 <TIM_Base_SetConfig+0x28>
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800264a:	d003      	beq.n	8002654 <TIM_Base_SetConfig+0x28>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	4a22      	ldr	r2, [pc, #136]	; (80026d8 <TIM_Base_SetConfig+0xac>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d108      	bne.n	8002666 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800265a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	68fa      	ldr	r2, [r7, #12]
 8002662:	4313      	orrs	r3, r2
 8002664:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	4a1a      	ldr	r2, [pc, #104]	; (80026d4 <TIM_Base_SetConfig+0xa8>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d007      	beq.n	800267e <TIM_Base_SetConfig+0x52>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002674:	d003      	beq.n	800267e <TIM_Base_SetConfig+0x52>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	4a17      	ldr	r2, [pc, #92]	; (80026d8 <TIM_Base_SetConfig+0xac>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d108      	bne.n	8002690 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002684:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	68db      	ldr	r3, [r3, #12]
 800268a:	68fa      	ldr	r2, [r7, #12]
 800268c:	4313      	orrs	r3, r2
 800268e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	695b      	ldr	r3, [r3, #20]
 800269a:	4313      	orrs	r3, r2
 800269c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	68fa      	ldr	r2, [r7, #12]
 80026a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	689a      	ldr	r2, [r3, #8]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	681a      	ldr	r2, [r3, #0]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	4a07      	ldr	r2, [pc, #28]	; (80026d4 <TIM_Base_SetConfig+0xa8>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d103      	bne.n	80026c4 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	691a      	ldr	r2, [r3, #16]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2201      	movs	r2, #1
 80026c8:	615a      	str	r2, [r3, #20]
}
 80026ca:	bf00      	nop
 80026cc:	3714      	adds	r7, #20
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bc80      	pop	{r7}
 80026d2:	4770      	bx	lr
 80026d4:	40012c00 	.word	0x40012c00
 80026d8:	40000400 	.word	0x40000400

080026dc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80026dc:	b480      	push	{r7}
 80026de:	b087      	sub	sp, #28
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	60f8      	str	r0, [r7, #12]
 80026e4:	60b9      	str	r1, [r7, #8]
 80026e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	6a1b      	ldr	r3, [r3, #32]
 80026ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	6a1b      	ldr	r3, [r3, #32]
 80026f2:	f023 0201 	bic.w	r2, r3, #1
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	699b      	ldr	r3, [r3, #24]
 80026fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002706:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	011b      	lsls	r3, r3, #4
 800270c:	693a      	ldr	r2, [r7, #16]
 800270e:	4313      	orrs	r3, r2
 8002710:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	f023 030a 	bic.w	r3, r3, #10
 8002718:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800271a:	697a      	ldr	r2, [r7, #20]
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	4313      	orrs	r3, r2
 8002720:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	693a      	ldr	r2, [r7, #16]
 8002726:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	697a      	ldr	r2, [r7, #20]
 800272c:	621a      	str	r2, [r3, #32]
}
 800272e:	bf00      	nop
 8002730:	371c      	adds	r7, #28
 8002732:	46bd      	mov	sp, r7
 8002734:	bc80      	pop	{r7}
 8002736:	4770      	bx	lr

08002738 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002738:	b480      	push	{r7}
 800273a:	b087      	sub	sp, #28
 800273c:	af00      	add	r7, sp, #0
 800273e:	60f8      	str	r0, [r7, #12]
 8002740:	60b9      	str	r1, [r7, #8]
 8002742:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	6a1b      	ldr	r3, [r3, #32]
 8002748:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	6a1b      	ldr	r3, [r3, #32]
 800274e:	f023 0210 	bic.w	r2, r3, #16
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	699b      	ldr	r3, [r3, #24]
 800275a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800275c:	693b      	ldr	r3, [r7, #16]
 800275e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002762:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	031b      	lsls	r3, r3, #12
 8002768:	693a      	ldr	r2, [r7, #16]
 800276a:	4313      	orrs	r3, r2
 800276c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800276e:	697b      	ldr	r3, [r7, #20]
 8002770:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002774:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002776:	68bb      	ldr	r3, [r7, #8]
 8002778:	011b      	lsls	r3, r3, #4
 800277a:	697a      	ldr	r2, [r7, #20]
 800277c:	4313      	orrs	r3, r2
 800277e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	693a      	ldr	r2, [r7, #16]
 8002784:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	697a      	ldr	r2, [r7, #20]
 800278a:	621a      	str	r2, [r3, #32]
}
 800278c:	bf00      	nop
 800278e:	371c      	adds	r7, #28
 8002790:	46bd      	mov	sp, r7
 8002792:	bc80      	pop	{r7}
 8002794:	4770      	bx	lr

08002796 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002796:	b480      	push	{r7}
 8002798:	b085      	sub	sp, #20
 800279a:	af00      	add	r7, sp, #0
 800279c:	6078      	str	r0, [r7, #4]
 800279e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	689b      	ldr	r3, [r3, #8]
 80027a4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027ac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80027ae:	683a      	ldr	r2, [r7, #0]
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	4313      	orrs	r3, r2
 80027b4:	f043 0307 	orr.w	r3, r3, #7
 80027b8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	68fa      	ldr	r2, [r7, #12]
 80027be:	609a      	str	r2, [r3, #8]
}
 80027c0:	bf00      	nop
 80027c2:	3714      	adds	r7, #20
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bc80      	pop	{r7}
 80027c8:	4770      	bx	lr

080027ca <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80027ca:	b480      	push	{r7}
 80027cc:	b087      	sub	sp, #28
 80027ce:	af00      	add	r7, sp, #0
 80027d0:	60f8      	str	r0, [r7, #12]
 80027d2:	60b9      	str	r1, [r7, #8]
 80027d4:	607a      	str	r2, [r7, #4]
 80027d6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	689b      	ldr	r3, [r3, #8]
 80027dc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80027e4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	021a      	lsls	r2, r3, #8
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	431a      	orrs	r2, r3
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	4313      	orrs	r3, r2
 80027f2:	697a      	ldr	r2, [r7, #20]
 80027f4:	4313      	orrs	r3, r2
 80027f6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	697a      	ldr	r2, [r7, #20]
 80027fc:	609a      	str	r2, [r3, #8]
}
 80027fe:	bf00      	nop
 8002800:	371c      	adds	r7, #28
 8002802:	46bd      	mov	sp, r7
 8002804:	bc80      	pop	{r7}
 8002806:	4770      	bx	lr

08002808 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002808:	b480      	push	{r7}
 800280a:	b085      	sub	sp, #20
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
 8002810:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002818:	2b01      	cmp	r3, #1
 800281a:	d101      	bne.n	8002820 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800281c:	2302      	movs	r3, #2
 800281e:	e041      	b.n	80028a4 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2201      	movs	r2, #1
 8002824:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2202      	movs	r2, #2
 800282c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	689b      	ldr	r3, [r3, #8]
 800283e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002846:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	68fa      	ldr	r2, [r7, #12]
 800284e:	4313      	orrs	r3, r2
 8002850:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	68fa      	ldr	r2, [r7, #12]
 8002858:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a14      	ldr	r2, [pc, #80]	; (80028b0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d009      	beq.n	8002878 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800286c:	d004      	beq.n	8002878 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a10      	ldr	r2, [pc, #64]	; (80028b4 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002874:	4293      	cmp	r3, r2
 8002876:	d10c      	bne.n	8002892 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800287e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	68ba      	ldr	r2, [r7, #8]
 8002886:	4313      	orrs	r3, r2
 8002888:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	68ba      	ldr	r2, [r7, #8]
 8002890:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2201      	movs	r2, #1
 8002896:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2200      	movs	r2, #0
 800289e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80028a2:	2300      	movs	r3, #0
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	3714      	adds	r7, #20
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bc80      	pop	{r7}
 80028ac:	4770      	bx	lr
 80028ae:	bf00      	nop
 80028b0:	40012c00 	.word	0x40012c00
 80028b4:	40000400 	.word	0x40000400

080028b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b083      	sub	sp, #12
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80028c0:	bf00      	nop
 80028c2:	370c      	adds	r7, #12
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bc80      	pop	{r7}
 80028c8:	4770      	bx	lr

080028ca <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80028ca:	b480      	push	{r7}
 80028cc:	b083      	sub	sp, #12
 80028ce:	af00      	add	r7, sp, #0
 80028d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80028d2:	bf00      	nop
 80028d4:	370c      	adds	r7, #12
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bc80      	pop	{r7}
 80028da:	4770      	bx	lr

080028dc <memset>:
 80028dc:	4603      	mov	r3, r0
 80028de:	4402      	add	r2, r0
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d100      	bne.n	80028e6 <memset+0xa>
 80028e4:	4770      	bx	lr
 80028e6:	f803 1b01 	strb.w	r1, [r3], #1
 80028ea:	e7f9      	b.n	80028e0 <memset+0x4>

080028ec <__libc_init_array>:
 80028ec:	b570      	push	{r4, r5, r6, lr}
 80028ee:	2600      	movs	r6, #0
 80028f0:	4d0c      	ldr	r5, [pc, #48]	; (8002924 <__libc_init_array+0x38>)
 80028f2:	4c0d      	ldr	r4, [pc, #52]	; (8002928 <__libc_init_array+0x3c>)
 80028f4:	1b64      	subs	r4, r4, r5
 80028f6:	10a4      	asrs	r4, r4, #2
 80028f8:	42a6      	cmp	r6, r4
 80028fa:	d109      	bne.n	8002910 <__libc_init_array+0x24>
 80028fc:	f000 f81a 	bl	8002934 <_init>
 8002900:	2600      	movs	r6, #0
 8002902:	4d0a      	ldr	r5, [pc, #40]	; (800292c <__libc_init_array+0x40>)
 8002904:	4c0a      	ldr	r4, [pc, #40]	; (8002930 <__libc_init_array+0x44>)
 8002906:	1b64      	subs	r4, r4, r5
 8002908:	10a4      	asrs	r4, r4, #2
 800290a:	42a6      	cmp	r6, r4
 800290c:	d105      	bne.n	800291a <__libc_init_array+0x2e>
 800290e:	bd70      	pop	{r4, r5, r6, pc}
 8002910:	f855 3b04 	ldr.w	r3, [r5], #4
 8002914:	4798      	blx	r3
 8002916:	3601      	adds	r6, #1
 8002918:	e7ee      	b.n	80028f8 <__libc_init_array+0xc>
 800291a:	f855 3b04 	ldr.w	r3, [r5], #4
 800291e:	4798      	blx	r3
 8002920:	3601      	adds	r6, #1
 8002922:	e7f2      	b.n	800290a <__libc_init_array+0x1e>
 8002924:	08002970 	.word	0x08002970
 8002928:	08002970 	.word	0x08002970
 800292c:	08002970 	.word	0x08002970
 8002930:	08002974 	.word	0x08002974

08002934 <_init>:
 8002934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002936:	bf00      	nop
 8002938:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800293a:	bc08      	pop	{r3}
 800293c:	469e      	mov	lr, r3
 800293e:	4770      	bx	lr

08002940 <_fini>:
 8002940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002942:	bf00      	nop
 8002944:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002946:	bc08      	pop	{r3}
 8002948:	469e      	mov	lr, r3
 800294a:	4770      	bx	lr
